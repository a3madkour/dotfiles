#+TITLE: Doom Emacs Configuration
#+author: Abdelrahman Madkour
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args :tangle no :results silent
* Introduction
This is my doom emacs config or whatever. Not perfect by any means and will ever be a work in progress, kinda like me hahahah I am so funny...kill yourself
(Shamelessly ripped off from the lovely [[https://tecosaur.github.io/emacs-config/config.html][tecosaur config]])
* Basic Configuration
#+begin_src emacs-lisp
;; ;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** Personal Information
Name and email and stuff, don't spam me please. I guess I will have to encrypt this at some point if I make this public.
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Abdelrahman Madkour"
      user-mail-address "a3madkour@gmail.com")
#+end_src

Here is where I would load the email stuff
#+begin_src emacs-lisp

#+end_src
** Doom configuration
*** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
(text ripped off from [[https://tecosaur.github.io/emacs-config/config.html][tecosaur config]])
Doom has this lovely /modular configuration base/ that takes a lot of work out of
configuring Emacs. Each module (when enabled) can provide a list of packages to
install (on ~doom sync~) and configuration to be applied. The modules can also
have flags applied to tweak their behavior.

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments none
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation, and 'gd' to browse its directory.

(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src

**** Structure
(text ripped off from [[https://tecosaur.github.io/emacs-config/config.html][tecosaur config]])
As you may have noticed by this point, this is a [[https://en.wikipedia.org/wiki/Literate_programming][literate]] configuration. Doom
has good support for this which we access though the ~literate~ module.

While we're in the ~:config~ section, we'll use Dooms nicer defaults, along with
the bindings and smartparens behaviour (the flags aren't documented, but they exist).
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src

**** Interface
(text ripped off from [[https://tecosaur.github.io/emacs-config/config.html][tecosaur config]])
here's a lot that can be done to enhance Emacs' capabilities.
I reckon enabling half the modules Doom provides should do it.

#+name: doom-completion
#+begin_src emacs-lisp
(company                     ; the ultimate code completion backend
 +childframe)                ; better UI for company (Emacs 26+)
;;helm                       ; the *other* search engine for love and life
;;ido                        ; the other *other* search engine...
;; (ivy                         ; a search engine for love and life
;;  +icons                      ; ... icons are nice
;;  ;; +childframe                 ; better UI for company (Emacs 26+)
;;  +fuzzy                      ; enable fuzzy search backend
;;  +prescient                 ; ... I know what I want(ed)
;;  )
(vertico +icons)
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
deft                       ; notational velocity for Emacs
doom                         ; what makes DOOM look the way it does
doom-dashboard               ; a nifty splash screen for Emacs
doom-quit                    ; DOOM quit-message prompts when you quit Emacs
;;emoji
;; fill-column                ; a `fill-column' indicator
hl-todo                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
hydra                      ; quick documentation for related commands
;; indent-guides              ; highlighted indent columns, notoriously slow
;; (ligatures
;; +iosevka
;; +hasklig
;; +fira
;; +extra)           ; ligatures and symbols to make your code pretty again
minimap                    ; show a map of the code on the side
modeline                     ; snazzy, Atom-inspired modeline, plus API
nav-flash                    ; blink the current line after jumping
;;neotree                    ; a project drawer, like NERDTree for vim
ophints                      ; highlight the region an operation acts on
(popup                       ; tame sudden yet inevitable temporary windows
 ;; +all                        ; catch all popups that start with an asterix
 +defaults)                  ; default popup rules
;;(tabs                      ; an tab bar for Emacs
;;  +centaur-tabs)           ; ... with prettier tabs
;; treemacs                     ; a project drawer, like neotree but cooler
unicode                    ; extended unicode support for various languages
vc-gutter                    ; vcs diff in the fringe
vi-tilde-fringe              ; fringe tildes to mark beyond EOB
(window-select +numbers)     ; visually switch windows
workspaces                   ; tab emulation, persistence & separate workspaces
zen                          ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)           ; come to the dark side, we have cookies
file-templates               ; auto-snippets for empty files
fold                         ; (nigh) universal code folding
(format +onsave)             ; automated prettiness
;;god                        ; run Emacs commands without modifier keys
lispy                      ; vim for lisp, for people who don't like vim
multiple-cursors             ; editing in many places at once
;;objed                      ; text object editing for the innocent
;;parinfer                   ; turn lisp into python, sort of
rotate-text                  ; cycle region at point between text candidates
snippets                     ; my elves. They type so I don't have to
word-wrap                  ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +ranger +icons)               ; making dired pretty [functional]
electric                     ; smarter, keyword-based electric-indent
(ibuffer +icons)             ; interactive buffer management
(undo +tree)                 ; persistent, smarter undo for your inevitable mistakes
vc                           ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
eshell                     ; the elisp shell that works everywhere
;;shell                      ; simple shell REPL for Emacs
;; term                       ; basic terminal emulator for Emacs
vterm                        ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
syntax                       ; tasing you for every semicolon you forget
spell
;; (spell +enchant)
grammar                      ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
;; ansible                      ; a crucible for infrastructure as code
(debugger                    ; FIXME stepping through code, to help you add bugs
 +lsp)
;;direnv                     ; be direct about your environment
(docker                     ; port everything to containers
 +lsp)
editorconfig               ; let someone else argue about tabs vs spaces
ein                        ; tame Jupyter notebooks with emacs
(eval +overlay)              ; run code, run (also, repls)
gist                       ; interacting with github gists
(lookup                      ; helps you navigate your code and documentation
 +dictionary                 ; dictionary/thesaurus is nice
 +offline
 +docsets)                   ; ...or in Dash docsets locally
lsp                          ; Language Server Protocol
(magit)                       ; a git porcelain for Emacs
 ;; forge)                     ; interface with git forges
make                         ; run make tasks from Emacs
biblio
pass                       ; password manager for nerds
pdf                          ; pdf enhancements
prodigy                    ; FIXME managing external services & code builders
rgb                          ; creating color strings
taskrunner                 ; taskrunner for all your projects
;;terraform                  ; infrastructure as code
;;tmux                       ; an API for interacting with tmux
upload                       ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)              ; MacOS-specific commands
;; tty                          ; improve the terminal Emacs experience
#+end_src

**** Language support
(text ripped off from [[https://tecosaur.github.io/emacs-config/config.html][tecosaur config]])
We can be rather liberal with enabling support for languages as the associated
packages/configuration are (usually) only loaded when first opening an
associated file.

#+name: doom-lang
#+begin_src emacs-lisp
agda                      ; types of types of types of types...
(cc +lsp)                    ; C/C++/Obj-C madness
clojure                    ; java with a lisp
;;common-lisp                ; if you've seen one lisp, you've seen them all
coq                        ; proofs-as-programs
;;crystal                    ; ruby at the speed of c
(csharp +lsp)                ; unity, .NET, and mono shenanigans
data                      ; config/data formats
;; (dart +flutter)            ; paint ui and not much else
;;elixir                     ; erlang done right
;;elm                        ; care for a cup of TEA?
emacs-lisp                   ; drown in parentheses
;;erlang                     ; an elegant language for a more civilized age
ess                          ; emacs speaks statistics
;;faust                      ; dsp, but you get to keep your soul
;;fsharp                     ; ML stands for Microsoft's Language
;;fstar                      ; (dependent) types and (monadic) effects and Z3
(gdscript +lsp)              ; the language you waited for
;; (go +lsp)                  ; the hipster dialect
(haskell +lsp)             ; a language that's lazier than I am
;;hy                         ; readability of scheme w/ speed of python
;;idris                      ;
json                       ; At least it ain't XML
(java +lsp)          ; the poster child for carpal tunnel syndrome
(javascript +lsp)            ; all(hope(abandon(ye(who(enter(here))))))
;; julia                      ; a better, faster MATLAB
;;kotlin                     ; a better, slicker Java(Script)
(latex                       ; writing papers in Emacs has never been so fun
 +latexmk                    ; what else would you use?
 +cdlatex                    ; quick maths symbols
 +lsp
 +fold)                      ; fold the clutter away nicities
;;lean                       ; proof that mathematicians need help
;;factor                     ; for when scripts are stacked against you
ledger                     ; an accounting system in Emacs
lua                          ; one-based indices? one-based indices
markdown                     ; writing docs for people to ignore
;; nim                        ; python + lisp at the speed of c
;;nix                        ; I hereby declare "nix geht mehr!"
ocaml                      ; an objective camel
(org                         ; organize your plain life in plain text
 +pretty                     ; yessss my pretties! (nice unicode symbols)
 +dragndrop                  ; drag & drop files/images into org buffers
 +hugo                     ; use Emacs for hugo blogging
 +journal
 +jupyter                    ; ipython/jupyter support for babel
 +pandoc                     ; export-with-pandoc support
 +gnuplot                    ; who doesn't like pretty pictures
 +noter
 +pomodoro                 ; be fruitful with the tomato technique
 +present                    ; using org-mode for presentations
 +roam2)                      ; wander around notes
;; )
;;perl                       ; write code no one else can comprehend
;;php                        ; perl's insecure younger brother
;;plantuml                   ; diagrams for confusing people more
;;purescript                 ; javascript, but functional
(python                     ; beautiful is better than ugly
 +conda
 +pyright
 +lsp)
;;qt                         ; the 'cutest' gui framework ever
racket                     ; a DSL for DSLs
;;raku                       ; the artist formerly known as perl6
rest                       ; Emacs as a REST client
rst                        ; ReST in peace
;;(ruby +rails)              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust +lsp)                  ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala                      ; java, but good
scheme                       ; a fully conniving family of lisps
(sh +lsp)                           ; she sells {ba,z,fi}sh shells on the C xor
sml                        ; no, the /other/ ML
;;solidity                   ; do you need a blockchain? No.
;;swift                      ; who asked for emoji variables?
;;terra                      ; Earth and Moon in alignment for performance.
(web                          ; the tubes
 +css
 +html)
(yaml                         ; JSON, but readable
 +lsp)
#+end_src

**** Everything in Emacs

#+name: doom-email
#+begin_src emacs-lisp
(mu4e +org)
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;; emms
;; everywhere        ; *leave* Emacs!? You must be joking
calendar
irc                          ; how neckbeards socialize
(rss +org)                   ; emacs as an RSS reader
twitter                    ; twitter client https://twitter.com/vnought
#+end_src
*** Visual Settings
Visual settings for the vanilla emacs options.
**** Font Face
Font and text options
#+begin_src emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 14))
#+end_src
**** Theme and modeline
#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-molokai)
#+end_src
**** Miscellaneous
#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; (global-display-line-numbers-mode 't)

; Disable line numbers for some modes
;; (dolist (mode '(term-mode-hook
;; 		shell-mode-hook
;;         org-mode-hook
;; 		eshell-mode-hook))
;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Other things
*** Systemd daemon
Configuring the daemon so that EXWM works properly when I use it. Which may never happen, Xmonad is pretty good.
#+begin_src emacs-lisp
;; (defun greedily-do-daemon-setup ()
;;   (require 'org)
;;   (when (require 'mu4e nil t)
;;     (setq mu4e-confirm-quit t)
;;     (setq +mu4e-lock-greedy t)
;;     (setq +mu4e-lock-relaxed t)
;;     (+mu4e-lock-add-watcher)
;;     (when (+mu4e-lock-available t)
;;       (mu4e~start)))
;;   (when (require 'elfeed nil t)
;;     (run-at-time nil (* 8 60 60) #'elfeed-update)))

;; (when (daemonp)
;;   (add-hook 'emacs-startup-hook #'greedily-do-daemon-setup))
#+end_src
*** Window management
Make the default split horizontal
#+begin_src emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+end_src
*** To babel or not babel
Make sure the xmonad compiles when I save, should probably make a var that is the list of files I want to auto-tangle but whateves.
#+begin_src emacs-lisp
(defun a3madkour/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/dotfiles/.config/xmonad/README.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'a3madkour/org-babel-tangle-config)))
#+end_src
*** Splash screen
Again shamelessly ripped off from my homeboy [[https://tecosaur.github.io/emacs-config/config.html][tecosaur]]
The image
#+begin_src emacs-lisp
;; (setq fancy-splash-image "~/test.png")
(defvar fancy-splash-image-template
  (expand-file-name "misc/splash-images/emacs-e-template.svg" doom-private-dir)
  "Default template svg used for the splash image, with substitutions from ")

(defvar fancy-splash-sizes
  `((:height 300 :min-height 50 :padding (0 . 2))
    (:height 250 :min-height 42 :padding (2 . 4))
    (:height 200 :min-height 35 :padding (3 . 3))
    (:height 150 :min-height 28 :padding (3 . 3))
    (:height 100 :min-height 20 :padding (2 . 2))
    (:height 75  :min-height 15 :padding (2 . 1))
    (:height 50  :min-height 10 :padding (1 . 0))
    (:height 1   :min-height 0  :padding (0 . 0)))
  "list of plists with the following properties
  :height the height of the image
  :min-height minimum `frame-height' for image
  :padding `+doom-dashboard-banner-padding' (top . bottom) to apply
  :template non-default template file
  :file file to use instead of template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            theme-name
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  "Delete all cached fancy splash images"
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
   described by `fancy-splash-template-colours' for the current theme"
  (with-temp-buffer
    (insert-file-contents template)
    (re-search-forward "$height" nil t)
    (replace-match (number-to-string height) nil nil)
    (dolist (substitution fancy-splash-template-colours)
      (goto-char (point-min))
      (while (re-search-forward (car substitution) nil t)
        (replace-match (doom-color (cdr substitution)) nil nil)))
    (write-region nil nil
                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&rest _)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
;; (add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+end_src
The one line below the image
#+begin_src emacs-lisp
(defvar splash-phrase-source-folder
  (expand-file-name "misc/splash-phrases" doom-private-dir)
  "A folder of text files with a fun phrase on each line.")

(defvar splash-phrase-sources
  (let* ((files (directory-files splash-phrase-source-folder nil "\\.txt\\'"))
         (sets (delete-dups (mapcar
                             (lambda (file)
                               (replace-regexp-in-string "\\(?:-[0-9]+-\\w+\\)?\\.txt" "" file))
                             files))))
    (mapcar (lambda (sset)
              (cons sset
                    (delq nil (mapcar
                               (lambda (file)
                                 (when (string-match-p (regexp-quote sset) file)
                                   file))
                               files))))
            sets))
  "A list of cons giving the phrase set name, and a list of files which contain phrase components.")

(defvar splash-phrase-set
  (nth (random (length splash-phrase-sources)) (mapcar #'car splash-phrase-sources))
  "The default phrase set. See `splash-phrase-sources'.")

(defun splase-phrase-set-random-set ()
  "Set a new random splash phrase set."
  (interactive)
  (setq splash-phrase-set
        (nth (random (1- (length splash-phrase-sources)))
             (cl-set-difference (mapcar #'car splash-phrase-sources) (list splash-phrase-set))))
  (+doom-dashboard-reload t))

(defvar splase-phrase--cache nil)

(defun splash-phrase-get-from-file (file)
  "Fetch a random line from FILE."
  (let ((lines (or (cdr (assoc file splase-phrase--cache))
                   (cdar (push (cons file
                                     (with-temp-buffer
                                       (insert-file-contents (expand-file-name file splash-phrase-source-folder))
                                       (split-string (string-trim (buffer-string)) "\n")))
                               splase-phrase--cache)))))
    (nth (random (length lines)) lines)))

(defun splash-phrase (&optional set)
  "Construct a splash phrase from SET. See `splash-phrase-sources'."
  (mapconcat
   #'splash-phrase-get-from-file
   (cdr (assoc (or set splash-phrase-set) splash-phrase-sources))
   " "))

(defun doom-dashboard-phrase ()
  "Get a splash phrase, flow it over multiple lines as needed, and make fontify it."
  (mapconcat
   (lambda (line)
     (+doom-dashboard--center
      +doom-dashboard--width
      (with-temp-buffer
        (insert-text-button
         line
         'action
         (lambda (_) (+doom-dashboard-reload t))
         'face 'doom-dashboard-menu-title
         'mouse-face 'doom-dashboard-menu-title
         'help-echo "Random phrase"
         'follow-link t)
        (buffer-string))))
   (split-string
    (with-temp-buffer
      (insert (splash-phrase))
      (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
      (fill-region (point-min) (point-max))
      (buffer-string))
    "\n")
   "\n"))

(defadvice! doom-dashboard-widget-loaded-with-phrase ()
  :override #'doom-dashboard-widget-loaded
  (setq line-spacing 0.2)
  (insert
   "\n\n"
   (propertize
    (+doom-dashboard--center
     +doom-dashboard--width
     (doom-display-benchmark-h 'return))
    'face 'doom-dashboard-loaded)
   "\n"
   (doom-dashboard-phrase)
   "\n"))
#+end_src
Don't really need the doom dashboard commands
#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

And finally, gotta make sure we take care of when we open emacs in the terminal
#+begin_src emacs-lisp
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
          '(",---.,-.-.,---.,---.,---."
            "|---'| | |,---||    `---."
            "`---'` ' '`---^`---'`---'"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm
  (setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn))
#+end_src
*** Saveplace
Save my buffer positions duuude
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

* Packages
The "package.el" file shouldn't be byte compiled.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src
** General Packages
*** Shell
**** Eshell git prompt
Make my eshell dank, will likely write another package to make this look prettier whenever I have   time which is never. So yeah will stay like this for a while.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! eshell-git-prompt)
#+end_src

#+begin_src emacs-lisp
(after! eshell
          (eshell-git-prompt-use-theme 'powerline)
)
#+end_src
**** Vterm
Adding find file other window to the commands that you can execute in vterm, and my links clickable
#+begin_src emacs-lisp
(after! vterm
(push '("find-file-other-window" find-file-other-window) vterm-eval-cmds)
)
(add-hook 'vterm-mode-hook (lambda()
(goto-address-mode 1)))
#+end_src
*** Funzies
**** Spotify
I use this all the time dude
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! smudge)
#+end_src
Lolz should load the keys instead of exposing my filthy raw API keys
#+begin_src emacs-lisp
(use-package! smudge
  :config
  (setq smudge-oauth2-client-id "48e1012bfd264c129bf0c89966817aca"
    smudge-oauth2-client-secret "e6c298a6bf1343f1a3b05253c252af16")
)
#+end_src
**** Academic Phrases
We are particularly grateful to Dr. Nashamari for saving me the trouble of figuring how to make my academic writing sound "professional". Can't do science unless you write in the most boring tone possible because why have fun when you can conform to institutional dogma.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! academic-phrases)
#+end_src
*** UI
**** Treemacs
DON'T NEED IT
#+begin_src emacs-lisp
;; (add-hook! treemacs-mode
;;   (treemacs-load-theme "doom-colors")
;;   )
#+end_src
**** Command Log
So you want to see my...keystrokes ...;)
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! command-log-mode)
#+end_src
#+begin_src emacs-lisp
(use-package! command-log-mode)
#+end_src
**** Ewal
PY to the MFING WAL MOTHERFUCKER
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! ewal)
#+end_src

*** Window Management
For when you EXWM
**** EXWM
***** Core
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; (package! exwm)
#+end_src
#+begin_src emacs-lisp
;; (defun a3madkour/run-in-background (command)
;;   (let ((command-parts (split-string command "[ ]+")))
    ;; (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

;; (defun a3madkour/set-wallpaper ()
;;   (interactive)
;;   ;; NOTE: You will need to update this to a valid background path!
;;   (start-process-shell-command
;;    "feh" nil  "feh --bg-scale /usr/share/backgrounds/matt-mcnulty-nyc-2nd-ave.jpg"))

;; (defun a3madkour/exwm-init-hook ()
  ;; Make workspace 1 be the one where we land at startup
  ;; (exwm-workspace-switch-create 0)

  ;; Open eshell by default
  ;;(eshell)

  ;; Show battery status in the mode line
  ;; (display-battery-mode 1)

  ;; Show the time and date in modeline
  ;; (setq display-time-day-and-date t)
  ;; (display-time-mode 1)
  ;; Also take a look at display-time-format and format-time-string

  ;; (a3madkour/start-panel)
  ;; Launch apps that will run in the background
  ;; (a3madkour/run-in-background "dunst")
  ;; (a3madkour/run-in-background "nm-applet")
  ;; (a3madkour/run-in-background "pasystray")
  ;; (a3madkour/run-in-background "blueman-applet"))

;; (defun a3madkour/exwm-update-class ()
;;   (exwm-workspace-rename-buffer exwm-class-name))

;; (defun a3madkour/exwm-update-title ()
;;   (pcase exwm-class-name
;;     ("Brave-browser" (exwm-workspace-rename-buffer (format "Brave-browser: %s" exwm-title)))))

;; This function should be used only after configuring autorandr!
;; (defun a3madkour/update-displays ()
;;   (a3madkour/run-in-background "autorandr --change --force")
;;   (message "Display config: %s"
;;            (string-trim (shell-command-to-string "autorandr --current"))))

;; (use-package! exwm
  ;; :config
  ;; Set the default number of workspace
  ;; (setq exwm-workspace-number 5)

  ;; When window "class" updates, use it to set the buffer name
  ;; (add-hook! 'exwm-update-class-hook #'a3madkour/exwm-update-class)

  ;; When window title updates, use it to set the buffer name
  ;; (add-hook! 'exwm-update-title-hook #'a3madkour/exwm-update-title)

  ;; When EXWM starts up, do some extra configuration
  ;; (add-hook! 'exwm-init-hook #'a3madkour/exwm-init-hook )

  ;; (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

  ;; (require 'exwm-randr)
  ;; (exwm-randr-enable)

  ;; (setq exwm-randr-workspace-monitor-plist
  ;;       (pcase (system-name)
  ;;         ("labmachine" '(2 "HDMI-1" 3 "HDMI-1"))
  ;;         ("linuxmachine" '(2 "DP-1-2" 3 "DP-1-2"))))

  ;; ;; React to display connectivity changes, do initial display update
  ;; (add-hook 'exwm-randr-screen-change-hook #'a3madkour/update-displays)
  ;; (a3madkour/update-displays)

  ;; (require 'exwm-systemtray)
  ;; (exwm-systemtray-enable)

  ;; Automatically send the mouse cursor to the selected workspace's display
  ;; (setq exwm-workspace-warp-cursor t)

  ;; Window focus should follow the mouse pointer
  ;; (setq mouse-autoselect-window t
  ;;       focus-follows-mouse t)

  ;; (setq exwm-input-prefix-keys
  ;;       '(?\C-x
  ;;         ?\C-u
  ;;         ?\C-h
  ;;         ?\M-x
  ;;         ?\M-`
  ;;         ?\M-&
  ;;         ?\M-:
  ;;         ?\C-\M-j
  ;;         ?\C-\ ))

  ;; (define-key exwm-mode-map [?\C-q]   'exwm-input-send-next-key)


  ;; (setq exwm-input-global-keys
  ;;       `(
  ;;         Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
  ;;         ([?\s-r] . exwm-reset)

  ;;         ;; Move between windows
  ;;         ([?\s-h] . windmove-left)
  ;;         ([?\s-l] . windmove-right)
  ;;         ([?\s-k] . windmove-up)
  ;;         ([?\s-j] . windmove-down)

  ;;         ;; Launch applications via shell command
  ;;         ([?\s-&] . (lambda (command)
  ;;                      (interactive (list (read-shell-command "$ ")))
  ;;                      (start-process-shell-command command nil command)))

  ;;         ;; Switch workspace
  ;;         ([?\s-w] . exwm-workspace-switch)
  ;;         ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

  ;;         ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
  ;;         ,@(mapcar (lambda (i)
  ;;                     `(,(kbd (format "s-%d" i)) .
  ;;                       (lambda ()
  ;;                         (interactive)
  ;;                         (exwm-workspace-switch-create ,i))))
  ;;                   (number-sequence 0 9))))

  ;; (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

  ;; (exwm-enable)
  ;; )
#+end_src

**** Desktop Environment
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; (package! desktop-environment)
#+end_src
#+begin_src emacs-lisp
;; (use-package! desktop-environment
;;   :after exwm
;;   :config (desktop-environment-mode)
;;   :custom
;;   (desktop-environment-brightness-small-increment "2%+")
;;   (desktop-environment-brightness-small-decrement "2%-")
;;   (desktop-environment-brightness-normal-increment "5%+")
;;   (desktop-environment-brightness-normal-decrement "5%-"))
#+end_src
**** Polybar
#+begin_src emacs-lisp
;; Make sure the server is started (better to do this in your main Emacs config!)
;; (server-start)

;; (defvar a3madkour/polybar-process nil
;;   "Holds the process of the running Polybar instance, if any")

;; (defun a3madkour/kill-panel ()
;;   (interactive)
;;   (when a3madkour/polybar-process
;;     (ignore-errors
;;       (kill-process a3madkour/polybar-process)))
;;   (setq a3madkour/polybar-process nil))

;; (defun a3madkour/start-panel ()
;;   (interactive)
;;   (a3madkour/kill-panel)
;;   (setq a3madkour/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

;; (defun a3madkour/send-polybar-hook (module-name hook-index)
;;   (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

;; (defun a3madkour/send-polybar-exwm-workspace ()
;;   (a3madkour/send-polybar-hook "exwm-workspace" 1))

;; ;; Update panel indicator when workspace changes
;; (add-hook 'exwm-workspace-switch-hook #'a3madkour/send-polybar-exwm-workspace)
#+end_src
**** Dunst
#+begin_src emacs-lisp
;; (defun a3madkour/disable-desktop-notifications ()
;;   (interactive)
;;   (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_PAUSE\""))

;; (defun a3madkour/enable-desktop-notifications ()
;;   (interactive)
;;   (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_RESUME\""))

;; (defun a3madkour/toggle-desktop-notifications ()
;;   (interactive)
;;   (start-process-shell-command "notify-send" nil "notify-send \"DUNST_COMMAND_TOGGLE\""))
#+end_src
*** Email
EMACS MANGAGE MY EMAIL PLOX
**** Mu4e
#+begin_src emacs-lisp
(setq mu4e-context-policy 'ask-if-none
      mu4e-compose-context-policy 'always-ask)
(set-email-account! "Personal"
  '((mu4e-sent-folder       . "/gmail/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/gmail/[Gmail]/Drafts")
    (mu4e-trash-folder      . "/gmail/[Gmail]/Trash")
    (mu4e-refile-folder     . "/gmail/[Gmail]/All Mail")
    (smtpmail-smtp-user     . "a3madkour@gmail.com"))
  t)
(set-email-account! "Work"
  '((mu4e-sent-folder       . "/work/Sent")
    (mu4e-drafts-folder     . "/work/Drafts")
    (mu4e-trash-folder      . "/work/Trash")
    (mu4e-refile-folder     . "/work/Archive")
    (smtpmail-smtp-user     . "madkour.a@northeastern.edu"))
  t)
#+end_src
*** Screenwriting
**** Fountain
Need to make sure my script writing ability is in tip top shape.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! fountain-mode)
#+end_src
*** Messaging
*** Cooking
**** Org-chef
Managing my recipes and stealing them from the interwebs
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-chef)
#+end_src
*** Time management
**** Org clock csv
Export org-clock to csv
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-clock-csv)
#+end_src

*** Utils
**** Calendar
**** Ripgrep
Want ripgrep on everything
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! rg)
#+end_src
**** Dash docsets
Offline docs
#+begin_src emacs-lisp
(after! dash-docs
(setq dash-docs-docsets-path "~/.docsets")
(setq installed-langs (dash-docs-installed-docsets))
;;figure out to convert spaces into underscores when installing the docs
(setq docset-langs '("Rust" "Emacs_Lisp" "JavaScript" "Unity_3D" "C" "Bash" "Vim" "SQLite" "PostgreSQL" "OpenGL_4" "OCaml" "LaTeX" "Docker" "C++" "HTML" "SVG" "CSS"  "Haskell" "React" "D3JS"))
(dolist (lang docset-langs)
(when (null (member lang installed-langs))
  (dash-docs-install-docset lang)
))
)
#+end_src
**** Aggressive Auto-indenting
When I am feeling masochistic
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! aggressive-indent-mode)
#+end_src
#+begin_src emacs-lisp
;; (global-aggressive-indent-mode 1)
#+end_src
**** Super save
Save all the time, save when I am not typing, save when I leave the window, save when I am not paying attention. Save all the time.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! super-save)
#+end_src
#+begin_src emacs-lisp
(setq super-save-auto-save-when-idle t)
(setq super-save-auto-duration 10)
(setq super-save-triggers
      '(evil-window-next evil-window-prev balance-windows other-window)
)
(super-save-mode +1)
#+end_src
**** Avy
Ripped off from karthink's amazing [[https://karthinks.com/software/avy-can-do-anything/][article]] on avy
#+begin_src emacs-lisp
(after! avy
(setq avy-keys '(?q ?e ?r ?y ?u ?o ?p
                    ?a ?s ?d ?f ?g ?h ?j
                    ?k ?l ?' ?x ?c ?v ?b
                    ?n ?, ?/))
(defun avy-show-dispatch-help ()
  (let* ((len (length "avy-action-"))
         (fw (frame-width))
         (raw-strings (mapcar
                   (lambda (x)
                     (format "%2s: %-19s"
                             (propertize
                              (char-to-string (car x))
                              'face 'aw-key-face)
                             (substring (symbol-name (cdr x)) len)))
                   avy-dispatch-alist))
         (max-len (1+ (apply #'max (mapcar #'length raw-strings))))
         (strings-len (length raw-strings))
         (per-row (floor fw max-len))
         display-strings)
    (cl-loop for string in raw-strings
             for N from 1 to strings-len do
             (push (concat string " ") display-strings)
             (when (= (mod N per-row) 0) (push "\n" display-strings)))
    (message "%s" (apply #'concat (nreverse display-strings)))))

;; Kill text
(defun avy-action-kill-whole-line (pt)
  (save-excursion
    (goto-char pt)
    (kill-whole-line))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  t)

(setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
      (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line)

;; Copy text
(defun avy-action-copy-whole-line (pt)
  (save-excursion
    (goto-char pt)
    (cl-destructuring-bind (start . end)
        (bounds-of-thing-at-point 'line)
      (copy-region-as-kill start end)))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  t)

(setf (alist-get ?w avy-dispatch-alist) 'avy-action-copy
      (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line)

;; Yank text
(defun avy-action-yank-whole-line (pt)
  (avy-action-copy-whole-line pt)
  (save-excursion (yank))
  t)

(setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
      (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line)

;; Transpose/Move text
(defun avy-action-teleport-whole-line (pt)
  (avy-action-kill-whole-line pt)
  (save-excursion (yank)) t)

(setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
      (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)

;; Mark text
(defun avy-action-mark-to-char (pt)
  (activate-mark)
  (goto-char pt))

(setf (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char)

;; Flyspell words
(defun avy-action-flyspell (pt)
  (save-excursion
    (goto-char pt)
    (when (require 'flyspell nil t)
      (flyspell-auto-correct-word)))
  (select-window
   (cdr (ring-ref avy-ring 0)))
  t)

;; Bind to semicolon (flyspell uses C-;)
(setf (alist-get ?\; avy-dispatch-alist) 'avy-action-flyspell)
;; Avy + Isearch
(define-key isearch-mode-map (kbd "M-j") 'avy-isearch)

;; Isearch in other windows
(defun isearch-forward-other-window (prefix)
  "Function to isearch-forward in other-window."
  (interactive "P")
  (unless (one-window-p)
    (save-excursion
      (let ((next (if prefix -1 1)))
        (other-window next)
        (isearch-forward)
        (other-window (- next))))))

(defun isearch-backward-other-window (prefix)
  "Function to isearch-backward in other-window."
  (interactive "P")
  (unless (one-window-p)
    (save-excursion
      (let ((next (if prefix 1 -1)))
        (other-window next)
        (isearch-backward)
        (other-window (- next))))))


(defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
          (goto-char pt)
          (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)

(setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
)
#+end_src
**** MW-thesaurus
Webster's dictionary defines thesaurus as....
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! mw-thesaurus)
#+end_src
#+begin_src emacs-lisp
(add-hook 'mw-thesaurus-mode-hook (lambda () (define-key evil-normal-state-local-map (kbd "q") 'mw-thesaurus--quit)))
#+end_src

** Language Packages
*** Python
**** Debugger
Setting debug to debug with py
#+begin_src emacs-lisp
(add-hook 'python-mode-hook (lambda ()
                            (setq dap-python-debugger 'debugpy)))
#+end_src
**** Sphinx
Gotta get my sphinx on
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! sphinx-doc)
#+end_src
#+begin_src emacs-lisp
(add-hook 'python-mode-hook (lambda ()
                            (require 'sphinx-doc)
                            (sphinx-doc-mode t)))
(map!
 :mode python-mode
 :localleader
       "d" #'sphinx-doc
 )
#+end_src
**** IPython Notebook
Not sure y u no work but I don't have time right now
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! ein)
#+end_src
*** C/C++
Why is this not in the default keybindings?
#+begin_src emacs-lisp
(map! :map (c-mode-map c++-mode-map)
:localleader
:desc "Go to header file" "h" #'ff-find-other-file
)
(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"
                                "--header-insertion-decorators=0"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src
*** GDScript
Game engine supreme
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! gdscript-mode)
#+end_src
*** Org Mode
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src
***** Loading Org
#+begin_src emacs-lisp
(defun a3madkour/org-mode-setup ()
;; ;; (org-indent-mode)
;; ;; (org-superstar-mode 1)
;; ;; (variable-pitch-mode 1)
(org-appear-mode 1)
)
(add-hook 'org-mode-hook (a3madkour/org-mode-setup))
#+end_src

***** Font Setup
#+begin_src emacs-lisp
(defun a3madkour/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

***** After Org is loaded
#+begin_src emacs-lisp
(setq
 org_notes "~/org/notes"
 zot_bib  "~/org/notes/library.bib"
 deft-directory org_notes
 ;; deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
 org-cite-default-bibliography (list zot_bib)
 org-cite-csl-styles-dir "~/Zotero/styles"
 org-cite-global-bibliography (list zot_bib)
 ;; deft-use-filename-as-title 't
 ;; deft-recursive 't
 org-roam-directory org_notes
 )
(after! org
#+end_src
****** Basic Setup
#+begin_src emacs-lisp
(defun cm/deft-parse-title (file contents)
    "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
      (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
	(if begin
	    (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
	  (deft-base-filename file))))

(advice-add 'deft-parse-title :override #'cm/deft-parse-title)

(setq deft-strip-summary-regexp
(concat "\\("
    "[\n\t]" ;; blank
    "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
    "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
    "\\)"))

(setq
 org_notes "~/org/notes"
 zot_bib  "~/org/notes/library.bib"
 deft-directory org_notes
 ;; deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
 org-cite-default-bibliography (list zot_bib)
 org-cite-global-bibliography (list zot_bib)
 ;; deft-use-filename-as-title 't
 ;; deft-recursive 't
 org-roam-directory org_notes
 )
;adding minted (should be its own headline but whatevs)
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

****** Org Tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src
****** Org Capture
#+begin_src emacs-lisp
(defun org-get-habit-type ()
  (setq habit-type (read-string "Enter Habit Type: "))
  habit-type
)
  (setq org-capture-templates
        '(("t" "Todo" entry (file+datetree "~/org/tasks.org")
           "* TODO %?\n")
          ("u" "Unscheduled task" entry (file+headline "~/org/tasks.org" "Unscheduled tasks")
           "* TODO %?\n")
          ("c" "Cookbook" entry (file "~/org/cookbook.org")
           "%(org-chef-get-recipe-from-url)"
           :empty-lines 1)
          ("z" "Manual Cookbook" entry (file "~/org/cookbook.org")
           "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")
          ("b" "Manual Book" entry (file "~/org/reading-list.org")
           "* %^{TITLE}\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n:END:%^{AUTHOR}p\n%?" :empty-lines 1)
          ("r" "Research Journal" entry (file+datetree "~/org/research-journal.org")
           "* %T \n %?")
          ("m" "Meeting" entry (file"~/org/meetings.org")
           "* %t \n %?")
          ("g" "Game idea" entry (file+headline "~/org/ideas.org" "Game")
           "* %?\n")
          ("p" "Paper idea" entry (file+headline "~/org/ideas.org" "Paper")
           "* %?\n")
          ("a" "App idea" entry (file+headline "~/org/ideas.org" "App")
           "* %?\n")
          ("v" "Video idea" entry (file+headline "~/org/ideas.org" "Video")
           "* %?\n")
          ("w" "Vague idea" entry (file+headline "~/org/ideas.org" "Vague af")
           "* %?\n")
          ("h" "Habit" entry (file+function "~/org/habits.org" org-get-habit-type)
           "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")
          ))
#+end_src
****** Ox-pandoc
#+begin_src emacs-lisp
;; default options for all output formats
(setq org-pandoc-options '((standalone . t)))
;; cancel above settings only for 'docx' format
(setq org-pandoc-options-for-docx '((standalone . nil)))
;; special settings for beamer-pdf and latex-pdf exporters
(setq org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
(setq org-pandoc-options-for-latex-pdf '((pdf-engine . "pdflatex")))
;; special extensions for markdown_github output
(setq org-pandoc-format-extensions '(markdown_github+pipe_tables+raw_html))
#+end_src
****** Org Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files
    (quote
     ("~/org/gcal.org" "~/org/tasks.org" "~/org/habits.org")))
#+end_src

#+begin_src emacs-lisp
  (setq evil-org-key-theme '(textobjects navigation additional insert todo))
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "NEXT(n!)" "DOINGNOW(d!)" "BLOCKED(b!)" "FOLLOWUP(f!)" "TICKLE(T!)" "|" "CANCELLED(c!)" "DONE(F!)")))
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("DOINGNOW" . "#E35DBF")
          ("CANCELED" . (:foreground "white" :background "#4d4d4d" :weight bold))
          ("NEXT" . "#008080")
        	("DONE" . "PaleGreen"))
        )
#+end_src

#+begin_src emacs-lisp
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+end_src
******* Org-super-agenda
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-super-agenda)
#+end_src
;; (after! org-agenda
;; (org-super-agenda-mode)

;; (let ((org-agenda-span 'day)
;;       (org-super-agenda-groups
;;        '((:name "Time grid items in all-uppercase with RosyBrown1 foreground"
;;                 :time-grid t
;;                 :transformer (--> it
;;                                   (upcase it)
;;                                   (propertize it 'face '(:foreground "RosyBrown1"))))
;;          (:name "Priority >= C items underlined, on black background"
;;                 :face (:background "black" :underline t)
;;                 :not (:priority>= "C")
;;                 :order 100))))
;;   (org-agenda nil "a"))

;; )
#+begin_src emacs-lisp
#+end_src

****** Org Habit
#+begin_src emacs-lisp
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
#+end_src
****** Bibtex
#+begin_src emacs-lisp
;; (require 'oc-basic)
;; (require 'oc-csl)
;; (require 'oc-natbib)
(setq
 bibtex-completion-notes-path org_notes
 bibtex-completion-bibliography zot_bib
 bibtex-completion-pdf-field "file"
 bibtex-completion-notes-template-multiple-files
 (concat
  "#+title: ${title}\n"
  "* Org Noter\n"
  ":PROPERTIES:\n"
  ":Custom_ID: ${=key=}\n"
  ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
  ":AUTHOR: ${author-abbrev}\n"
  ":JOURNAL: ${journaltitle}\n"
  ":DATE: ${date}\n"
  ":YEAR: ${year}\n"
  ":DOI: ${doi}\n"
  ":URL: ${url}\n"
  ":END:\n\n"
  )
 )
#+end_src
****** Org appear
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t) ;; A default setting that needs to be t for org-appear
  (setq org-appear-autoemphasis t)  ;; Enable org-appear on emphasis (bold, italics, etc)
  (setq org-appear-autolinks t) ;; Enable on links
  (setq org-appear-autosubmarkers t) ;; Enable on subscript and superscript
#+end_src
****** Org Latex
Make sure you use bibtex as part of the export process
#+begin_src emacs-lisp
(setq org-latex-pdf-process
      '("latexmk -shell-escape -bibtex -pdf %f"))
#+end_src
****** Org transclusion
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-transclusion)
#+end_src

#+begin_src emacs-lisp

#+end_src
****** Load Font Setup
#+begin_src emacs-lisp
  ;; (a3madkour/org-font-setup)
)
#+end_src
***** Behaviour
****** Citeproc
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! citeproc)
#+end_src
****** Org Books
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-books
  :recipe (:host github :repo "lepisma/org-books"))
#+end_src

#+begin_src emacs-lisp
(after! org-books
  (setq org-books-file "~/org/reading-list.org")
)
#+end_src
****** Org Roam Bibtex
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-roam-bibtex)
#+end_src

#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq orb-preformat-keywords
        '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq org-roam-capture-templates
             '(("r" "ref" plain 
           "%?"
           :target
           (file+head "${slug}.org" "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

- tags ::
- keywords :: ${keywords}

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n")

           :unnarrowed t))))
#+end_src
****** Org Roam UI
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-roam-ui)
#+end_src
****** Org QL
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-ql)
#+end_src
****** Org Noter
Doom installs org-noter via the init.el file. This is just for configuration.
#+begin_src emacs-lisp
(use-package! org-noter
 :after (:any org pdf-view)
  :config
 (setq
   ;; Split the window horizontally
   org-noter-notes-window-location 'horizontal-split
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; Everything is relative to the main notes file
  org-noter-notes-search-path (list org_notes)
  )
 )
#+end_src

Make the evil state normal when looking at a pdf in org-noter
#+begin_src emacs-lisp
(add-hook! org-noter-doc-mode
 (evil-normal-state)
 )
#+end_src

****** Citar
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; (package! citar)
#+end_src
#+begin_src emacs-lisp
(use-package! citar
  :config
(setq
 citar-bibliography  '("~/org/notes/library.bib")
 citar-open-note-function 'orb-citar-edit-note
 ;; org-cite-insert-processor 'citar
 ;; org-cite-follow-processor 'citar
 ;; org-cite-activate-processor 'citar
 citar-at-point-function 'embark-act
  )
)
#+end_src
****** Org PDFTools
Doom installs org-pdftools via the init.el file. This is just for configuration.
#+begin_src emacs-lisp

(after! pdf-tools
(push 'pdf-view-midnight-minor-mode pdf-tools-enabled-modes)
)

(use-package! org-pdftools
 :hook (org-load . org-pdftools-setup-link )
)
#+end_src
****** Org Noter PDFTools
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-noter-pdftools)
#+end_src
****** Org Latex Impatient
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-latex-impatient)
#+end_src
* Keybindings
** Insert
#+begin_src emacs-lisp
(map! :leader
      (:prefix "i"
      "b" #'org-books-add-url
      "c" #'org-cite-insert
      )
)
;;adding a keymap for insert note in org-noter
;; (map!
;;  :ne "SPC i n" #'org-noter-insert-note
;; )
(map!
 :mode org-noter-doc-mode
 :ne "i" #'org-noter-insert-note
 )
#+end_src
** Projectile
#+begin_src emacs-lisp
(map! :leader
      (:prefix "p"
       "l" #'projectile-replace
       )
)
#+end_src
** Toggles
#+begin_src emacs-lisp
(map! :leader
      (:prefix "t"
       "C" #'centered-window-mode)
)
#+end_src
** Language stuff
#+begin_src emacs-lisp
(map! :leader
      (:prefix "l"
            ;mw thesaurus
            (:prefix ("w" . "Merriam Webster Thesauraus" )
            "w" #'mw-thesaurus-lookup
            "d" #'mw-thesaurus-lookup-dwim
            "p" #'mw-thesaurus-lookup-at-point)

            (:prefix ("p" . "Powerthesauraus")
            "w" #'powerthesaurus-lookup-word
            "d" #'powerthesaurus-lookup-dwim
            "p" #'powerthesaurus-lookup)

            (:prefix ("l" . "Language Tool")
            "b" #'langtool-check
            "c" #'langtool-corrct-buffer
            "m" #'langtool-show-message-at-point
            "d" #'langtool-check-done
            "n" #'langtool-goto-next-eror
            "p" #'langtool-goto-previous-error)))
#+end_src
** Bibtex actions
#+begin_src emacs-lisp
(map! :leader
      (:prefix "z"
      "n" #'citar-open-notes
      "o" #'citar-open
      "c" #'citar-insert-citation
      "i" #'org-cite-insert
      "b" #'citar-insert-bibtex
      )
)
#+end_src
** Search
#+begin_src emacs-lisp
(map! :map doom-leader-search-map
      (
       "m" #'consult-multi-occur
       )
)
#+end_src
** Hippie Expand
#+begin_src emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src
* Registers/Bookmarks
Setting the registers and bookmarks for important org files.
#+begin_src emacs-lisp
(set-register ?h '(file . "~/org/habits.org"))
(set-register ?t '(file . "~/org/tasks.org"))
(set-register ?i '(file . "~/org/ideas.org"))
(setq bookmark-default-file "~/.doom.d/bookmarks")
(bookmark-load bookmark-default-file t)
#+end_src
* Fix(es)?
** Org-mode error
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
#+end_src
