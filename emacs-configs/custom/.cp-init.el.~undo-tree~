(undo-tree-save-format-version . 1)
"72e30d3484c291e7ffa891e2746a1b7021f08c38"
[nil nil nil nil (25306 53200 979573 267000) 0 nil]
([nil nil ((#("(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name \"straight/repos/straight.el/bootstrap.el\" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         \"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el\"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 25 (fontified t face font-lock-variable-name-face) 25 28 (fontified t) 28 31 (fontified t face font-lock-keyword-face) 31 74 (fontified t) 74 115 (fontified t face font-lock-string-face) 115 171 (fontified t) 171 177 (fontified t face font-lock-keyword-face) 177 214 (fontified t) 214 233 (fontified t face font-lock-keyword-face) 233 279 (fontified t) 279 354 (fontified t face font-lock-string-face) 354 451 (fontified t)) . 726) (undo-tree-id545 . -27) (undo-tree-id546 . -27) (undo-tree-id547 . -27) (undo-tree-id548 . -27) (undo-tree-id549 . -27) (undo-tree-id550 . -49) (undo-tree-id551 . -49) (undo-tree-id552 . -49) (undo-tree-id553 . -49) (undo-tree-id554 . -49) (undo-tree-id555 . -139) (undo-tree-id556 . -139) (undo-tree-id557 . -139) (undo-tree-id558 . -139) (undo-tree-id559 . -139) (undo-tree-id560 . -168) (undo-tree-id561 . -168) (undo-tree-id562 . -168) (undo-tree-id563 . -168) (undo-tree-id564 . -168) (undo-tree-id565 . -209) (undo-tree-id566 . -209) (undo-tree-id567 . -209) (undo-tree-id568 . -209) (undo-tree-id569 . -209) (undo-tree-id570 . -234) (undo-tree-id571 . -234) (undo-tree-id572 . -234) (undo-tree-id573 . -234) (undo-tree-id574 . -234) (undo-tree-id575 . -270) (undo-tree-id576 . -270) (undo-tree-id577 . -270) (undo-tree-id578 . -270) (undo-tree-id579 . -270) (undo-tree-id580 . -355) (undo-tree-id581 . -355) (undo-tree-id582 . -355) (undo-tree-id583 . -355) (undo-tree-id584 . -355) (undo-tree-id585 . -390) (undo-tree-id586 . -390) (undo-tree-id587 . -390) (undo-tree-id588 . -390) (undo-tree-id589 . -390) (undo-tree-id590 . -420) (undo-tree-id591 . -420) (undo-tree-id592 . -420) (undo-tree-id593 . -420) (undo-tree-id594 . -420) (undo-tree-id595 . -451) (undo-tree-id596 . -451) (undo-tree-id597 . -451) (undo-tree-id598 . -451) (undo-tree-id599 . -451) (undo-tree-id600 . 451) (undo-tree-id601 . -451) (undo-tree-id602 . -451) (undo-tree-id603 . -451) (undo-tree-id604 . -451) (undo-tree-id605 . -451) (undo-tree-id606 . -420) (undo-tree-id607 . -420) (undo-tree-id608 . -420) (undo-tree-id609 . -420) (undo-tree-id610 . -420) (undo-tree-id611 . -390) (undo-tree-id612 . -390) (undo-tree-id613 . -390) (undo-tree-id614 . -390) (undo-tree-id615 . -390) (undo-tree-id616 . -355) (undo-tree-id617 . -355) (undo-tree-id618 . -355) (undo-tree-id619 . -355) (undo-tree-id620 . -355) (undo-tree-id621 . -270) (undo-tree-id622 . -270) (undo-tree-id623 . -270) (undo-tree-id624 . -270) (undo-tree-id625 . -270) (undo-tree-id626 . -234) (undo-tree-id627 . -234) (undo-tree-id628 . -234) (undo-tree-id629 . -234) (undo-tree-id630 . -234) (undo-tree-id631 . -209) (undo-tree-id632 . -209) (undo-tree-id633 . -209) (undo-tree-id634 . -209) (undo-tree-id635 . -209) (undo-tree-id636 . -168) (undo-tree-id637 . -168) (undo-tree-id638 . -168) (undo-tree-id639 . -168) (undo-tree-id640 . -168) (undo-tree-id641 . -139) (undo-tree-id642 . -139) (undo-tree-id643 . -139) (undo-tree-id644 . -139) (undo-tree-id645 . -139) (undo-tree-id646 . -49) (undo-tree-id647 . -49) (undo-tree-id648 . -49) (undo-tree-id649 . -49) (undo-tree-id650 . -49) (undo-tree-id651 . -27) (undo-tree-id652 . -27) (undo-tree-id653 . -27) (undo-tree-id654 . -27) (undo-tree-id655 . -27) (undo-tree-id656 . -27) (undo-tree-id657 . -27) (undo-tree-id658 . -27) (undo-tree-id659 . -27) (undo-tree-id660 . -27) (undo-tree-id661 . -27) (undo-tree-id662 . -27) (undo-tree-id663 . -27) (undo-tree-id664 . -27) (undo-tree-id665 . -27) (undo-tree-id666 . -49) (undo-tree-id667 . -49) (undo-tree-id668 . -49) (undo-tree-id669 . -49) (undo-tree-id670 . -49) (undo-tree-id671 . -49) (undo-tree-id672 . -49) (undo-tree-id673 . -49) (undo-tree-id674 . -49) (undo-tree-id675 . -49) (undo-tree-id676 . -49) (undo-tree-id677 . -49) (undo-tree-id678 . -49) (undo-tree-id679 . -49) (undo-tree-id680 . -49) (undo-tree-id681 . -27) (undo-tree-id682 . -27) (undo-tree-id683 . -27) (undo-tree-id684 . -27) (undo-tree-id685 . -27) (undo-tree-id686 . -27) (undo-tree-id687 . -27) (undo-tree-id688 . -27) (undo-tree-id689 . -27) (undo-tree-id690 . -27) (undo-tree-id691 . -27) (undo-tree-id692 . -27) (undo-tree-id693 . -27) (undo-tree-id694 . -27) (undo-tree-id695 . -27) (undo-tree-id696 . 451) (undo-tree-id697 . -1) (undo-tree-id698 . 426) (undo-tree-id699 . -26) (t 25306 53180 116661 584000)) nil (25306 53208 526259 996000) 0 nil] [nil nil ((#("
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name \"straight/repos/straight.el/bootstrap.el\" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         \"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el\"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

" 0 2 (fontified t) 2 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 26 (fontified t face font-lock-variable-name-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 75 (fontified t) 75 116 (fontified t face font-lock-string-face) 116 172 (fontified t) 172 178 (fontified t face font-lock-keyword-face) 178 215 (fontified t) 215 234 (fontified t face font-lock-keyword-face) 234 280 (fontified t) 280 355 (fontified t face font-lock-string-face) 355 530 (fontified t) 530 534 (fontified t face font-lock-keyword-face) 534 571 (fontified t)) . 725) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -28) (undo-tree-id6 . -28) (undo-tree-id7 . -28) (undo-tree-id8 . -28) (undo-tree-id9 . -28) (undo-tree-id10 . -50) (undo-tree-id11 . -50) (undo-tree-id12 . -50) (undo-tree-id13 . -50) (undo-tree-id14 . -50) (undo-tree-id15 . -140) (undo-tree-id16 . -140) (undo-tree-id17 . -140) (undo-tree-id18 . -140) (undo-tree-id19 . -140) (undo-tree-id20 . -169) (undo-tree-id21 . -169) (undo-tree-id22 . -169) (undo-tree-id23 . -169) (undo-tree-id24 . -169) (undo-tree-id25 . -210) (undo-tree-id26 . -210) (undo-tree-id27 . -210) (undo-tree-id28 . -210) (undo-tree-id29 . -210) (undo-tree-id30 . -235) (undo-tree-id31 . -235) (undo-tree-id32 . -235) (undo-tree-id33 . -235) (undo-tree-id34 . -235) (undo-tree-id35 . -271) (undo-tree-id36 . -271) (undo-tree-id37 . -271) (undo-tree-id38 . -271) (undo-tree-id39 . -271) (undo-tree-id40 . -356) (undo-tree-id41 . -356) (undo-tree-id42 . -356) (undo-tree-id43 . -356) (undo-tree-id44 . -356) (undo-tree-id45 . -391) (undo-tree-id46 . -391) (undo-tree-id47 . -391) (undo-tree-id48 . -391) (undo-tree-id49 . -391) (undo-tree-id50 . -421) (undo-tree-id51 . -421) (undo-tree-id52 . -421) (undo-tree-id53 . -421) (undo-tree-id54 . -421) (undo-tree-id55 . -452) (undo-tree-id56 . -452) (undo-tree-id57 . -452) (undo-tree-id58 . -452) (undo-tree-id59 . -452) (undo-tree-id60 . -492) (undo-tree-id61 . -492) (undo-tree-id62 . -492) (undo-tree-id63 . -492) (undo-tree-id64 . -492) (undo-tree-id65 . -493) (undo-tree-id66 . -493) (undo-tree-id67 . -493) (undo-tree-id68 . -493) (undo-tree-id69 . -493) (undo-tree-id70 . -529) (undo-tree-id71 . -529) (undo-tree-id72 . -529) (undo-tree-id73 . -529) (undo-tree-id74 . -529) (undo-tree-id75 . -570) (undo-tree-id76 . -570) (undo-tree-id77 . -570) (undo-tree-id78 . -570) (undo-tree-id79 . -570) (undo-tree-id80 . -571) (undo-tree-id81 . -571) (undo-tree-id82 . -571) (undo-tree-id83 . -571) (undo-tree-id84 . -571) (undo-tree-id85 . -571) (undo-tree-id86 . -571) (undo-tree-id87 . -571) (undo-tree-id88 . -571) (undo-tree-id89 . -571) (undo-tree-id90 . -570) (undo-tree-id91 . -570) (undo-tree-id92 . -570) (undo-tree-id93 . -570) (undo-tree-id94 . -570) (undo-tree-id95 . -529) (undo-tree-id96 . -529) (undo-tree-id97 . -529) (undo-tree-id98 . -529) (undo-tree-id99 . -529) (undo-tree-id100 . -529) (undo-tree-id101 . -529) (undo-tree-id102 . -529) (undo-tree-id103 . -529) (undo-tree-id104 . -529) (undo-tree-id105 . -529) (undo-tree-id106 . -529) (undo-tree-id107 . -529) (undo-tree-id108 . -529) (undo-tree-id109 . -529) (undo-tree-id110 . -529) (undo-tree-id111 . -529) (undo-tree-id112 . -529) (undo-tree-id113 . -529) (undo-tree-id114 . -529) (undo-tree-id115 . -493) (undo-tree-id116 . -493) (undo-tree-id117 . -493) (undo-tree-id118 . -493) (undo-tree-id119 . -493) (undo-tree-id120 . -493) (undo-tree-id121 . -493) (undo-tree-id122 . -493) (undo-tree-id123 . -493) (undo-tree-id124 . -493) (undo-tree-id125 . -493) (undo-tree-id126 . -493) (undo-tree-id127 . -493) (undo-tree-id128 . -493) (undo-tree-id129 . -493) (undo-tree-id130 . -529) (undo-tree-id131 . -529) (undo-tree-id132 . -529) (undo-tree-id133 . -529) (undo-tree-id134 . -529) (undo-tree-id135 . -529) (undo-tree-id136 . -529) (undo-tree-id137 . -529) (undo-tree-id138 . -529) (undo-tree-id139 . -529) (undo-tree-id140 . -529) (undo-tree-id141 . -529) (undo-tree-id142 . -529) (undo-tree-id143 . -529) (undo-tree-id144 . -529) (undo-tree-id145 . -570) (undo-tree-id146 . -570) (undo-tree-id147 . -529) (undo-tree-id148 . -529) (undo-tree-id149 . -529) (undo-tree-id150 . -529) (undo-tree-id151 . -529) (undo-tree-id152 . -529) (undo-tree-id153 . -529) (undo-tree-id154 . -529) (undo-tree-id155 . -529) (undo-tree-id156 . -529) (undo-tree-id157 . -529) (undo-tree-id158 . -529) (undo-tree-id159 . -529) (undo-tree-id160 . -529) (undo-tree-id161 . -529) (undo-tree-id162 . -529) (undo-tree-id163 . -529) (undo-tree-id164 . -529) (undo-tree-id165 . -529) (undo-tree-id166 . -529) (undo-tree-id167 . -493) (undo-tree-id168 . -493) (undo-tree-id169 . -493) (undo-tree-id170 . -493) (undo-tree-id171 . -493) (undo-tree-id172 . -493) (undo-tree-id173 . -493) (undo-tree-id174 . -493) (undo-tree-id175 . -493) (undo-tree-id176 . -493) (undo-tree-id177 . -493) (undo-tree-id178 . -493) (undo-tree-id179 . -493) (undo-tree-id180 . -493) (undo-tree-id181 . -493) (undo-tree-id182 . -493) (undo-tree-id183 . -493) (undo-tree-id184 . -493) (undo-tree-id185 . -493) (undo-tree-id186 . -493) (undo-tree-id187 . -493) (undo-tree-id188 . -493) (undo-tree-id189 . -493) (undo-tree-id190 . -493) (undo-tree-id191 . -493) (undo-tree-id192 . -493) (undo-tree-id193 . -493) (undo-tree-id194 . -493) (undo-tree-id195 . -493) (undo-tree-id196 . -493) (undo-tree-id197 . -493) (undo-tree-id198 . -493) (undo-tree-id199 . -493) (undo-tree-id200 . -493) (undo-tree-id201 . -493) (undo-tree-id202 . -529) (undo-tree-id203 . -529) (undo-tree-id204 . -529) (undo-tree-id205 . -529) (undo-tree-id206 . -529) (undo-tree-id207 . -529) (undo-tree-id208 . -529) (undo-tree-id209 . -529) (undo-tree-id210 . -529) (undo-tree-id211 . -529) (undo-tree-id212 . -570) (undo-tree-id213 . -570) (undo-tree-id214 . -570) (undo-tree-id215 . -570) (undo-tree-id216 . -570) (undo-tree-id217 . -570) (undo-tree-id218 . -570) (undo-tree-id219 . -570) (undo-tree-id220 . -570) (undo-tree-id221 . -570) (undo-tree-id222 . -570) (undo-tree-id223 . -570) (undo-tree-id224 . -570) (undo-tree-id225 . -570) (undo-tree-id226 . -570) (undo-tree-id227 . -571) (undo-tree-id228 . -570) (undo-tree-id229 . -570) (undo-tree-id230 . -570) (undo-tree-id231 . -570) (undo-tree-id232 . -570) (undo-tree-id233 . -570) (undo-tree-id234 . -570) (undo-tree-id235 . -570) (undo-tree-id236 . -570) (undo-tree-id237 . -570) (undo-tree-id238 . -570) (undo-tree-id239 . -529) (undo-tree-id240 . -529) (undo-tree-id241 . -529) (undo-tree-id242 . -529) (undo-tree-id243 . -529) (undo-tree-id244 . -529) (undo-tree-id245 . -529) (undo-tree-id246 . -529) (undo-tree-id247 . -529) (undo-tree-id248 . -529) (undo-tree-id249 . -529) (undo-tree-id250 . -529) (undo-tree-id251 . -529) (undo-tree-id252 . -529) (undo-tree-id253 . -529) (undo-tree-id254 . -529) (undo-tree-id255 . -529) (undo-tree-id256 . -529) (undo-tree-id257 . -529) (undo-tree-id258 . -529) (undo-tree-id259 . -529) (undo-tree-id260 . -529) (undo-tree-id261 . -529) (undo-tree-id262 . -529) (undo-tree-id263 . -529) (undo-tree-id264 . -493) (undo-tree-id265 . -493) (undo-tree-id266 . -493) (undo-tree-id267 . -493) (undo-tree-id268 . -493) (undo-tree-id269 . -492) (undo-tree-id270 . -492) (undo-tree-id271 . -492) (undo-tree-id272 . -492) (undo-tree-id273 . -492) (undo-tree-id274 . -452) (undo-tree-id275 . -452) (undo-tree-id276 . -452) (undo-tree-id277 . -452) (undo-tree-id278 . -452) (undo-tree-id279 . -421) (undo-tree-id280 . -421) (undo-tree-id281 . -421) (undo-tree-id282 . -421) (undo-tree-id283 . -421) (undo-tree-id284 . -391) (undo-tree-id285 . -391) (undo-tree-id286 . -391) (undo-tree-id287 . -391) (undo-tree-id288 . -391) (undo-tree-id289 . -356) (undo-tree-id290 . -356) (undo-tree-id291 . -356) (undo-tree-id292 . -356) (undo-tree-id293 . -356) (undo-tree-id294 . -271) (undo-tree-id295 . -271) (undo-tree-id296 . -271) (undo-tree-id297 . -271) (undo-tree-id298 . -271) (undo-tree-id299 . -235) (undo-tree-id300 . -235) (undo-tree-id301 . -235) (undo-tree-id302 . -235) (undo-tree-id303 . -235) (undo-tree-id304 . -210) (undo-tree-id305 . -210) (undo-tree-id306 . -210) (undo-tree-id307 . -210) (undo-tree-id308 . -210) (undo-tree-id309 . -169) (undo-tree-id310 . -169) (undo-tree-id311 . -169) (undo-tree-id312 . -169) (undo-tree-id313 . -169) (undo-tree-id314 . -140) (undo-tree-id315 . -140) (undo-tree-id316 . -140) (undo-tree-id317 . -140) (undo-tree-id318 . -140) (undo-tree-id319 . -50) (undo-tree-id320 . -50) (undo-tree-id321 . -50) (undo-tree-id322 . -50) (undo-tree-id323 . -50) (undo-tree-id324 . -28) (undo-tree-id325 . -28) (undo-tree-id326 . -28) (undo-tree-id327 . -28) (undo-tree-id328 . -28) (undo-tree-id329 . -28) (undo-tree-id330 . -28) (undo-tree-id331 . -28) (undo-tree-id332 . -28) (undo-tree-id333 . -28) (undo-tree-id334 . -28) (undo-tree-id335 . -28) (undo-tree-id336 . -28) (undo-tree-id337 . -28) (undo-tree-id338 . -28) (undo-tree-id339 . -50) (undo-tree-id340 . -50) (undo-tree-id341 . -50) (undo-tree-id342 . -50) (undo-tree-id343 . -50) (undo-tree-id344 . -50) (undo-tree-id345 . -50) (undo-tree-id346 . -50) (undo-tree-id347 . -50) (undo-tree-id348 . -50) (undo-tree-id349 . -50) (undo-tree-id350 . -50) (undo-tree-id351 . -50) (undo-tree-id352 . -50) (undo-tree-id353 . -50) (undo-tree-id354 . -28) (undo-tree-id355 . -28) (undo-tree-id356 . -28) (undo-tree-id357 . -28) (undo-tree-id358 . -28) (undo-tree-id359 . -28) (undo-tree-id360 . -28) (undo-tree-id361 . -28) (undo-tree-id362 . -28) (undo-tree-id363 . -28) (undo-tree-id364 . -28) (undo-tree-id365 . -28) (undo-tree-id366 . -28) (undo-tree-id367 . -28) (undo-tree-id368 . -28) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (t 25306 53180 116661 584000)) ((725 . 1296)) (25306 53200 979108 371000) 0 nil])
([nil nil ((#("  (load bootstrap-file nil 'nomessage))
" 0 39 (fontified t) 39 40 (fontified t)) . 726) (undo-tree-id533 . -40) (undo-tree-id534 . -40) (undo-tree-id535 . -40) (undo-tree-id536 . -40) (undo-tree-id537 . -40) (undo-tree-id538 . 40) (undo-tree-id539 . -40) (undo-tree-id540 . -40) (undo-tree-id541 . -40) (undo-tree-id542 . -40) (undo-tree-id543 . -40) (undo-tree-id544 . -39)) nil (25306 53208 526126 513000) 0 nil])
nil
([nil nil ((#("(straight-use-package 'use-package)
" 0 36 (fontified t)) . 727) (undo-tree-id434 . -36) (undo-tree-id435 . -36) (undo-tree-id436 . -36) (undo-tree-id437 . -36) (undo-tree-id438 . -36) (undo-tree-id439 . -36) (undo-tree-id440 . -36) (undo-tree-id441 . -36) (undo-tree-id442 . -36) (undo-tree-id443 . -36) (undo-tree-id444 . -36) (undo-tree-id445 . -36) (undo-tree-id446 . -36) (undo-tree-id447 . -36) (undo-tree-id448 . -36) (undo-tree-id449 . -36) (undo-tree-id450 . -36) (undo-tree-id451 . -36) (undo-tree-id452 . -36) (undo-tree-id453 . -36) (undo-tree-id454 . -36) (undo-tree-id455 . -36) (undo-tree-id456 . -36) (undo-tree-id457 . -36) (undo-tree-id458 . -36) (undo-tree-id459 . -36) (undo-tree-id460 . -36) (undo-tree-id461 . -36) (undo-tree-id462 . -36) (undo-tree-id463 . -36) (undo-tree-id464 . -36) (undo-tree-id465 . -36) (undo-tree-id466 . -36) (undo-tree-id467 . -36) (undo-tree-id468 . -36) (undo-tree-id469 . -36) (undo-tree-id470 . -36) (undo-tree-id471 . -36) (undo-tree-id472 . -36) (undo-tree-id473 . -36) (undo-tree-id474 . -36) (undo-tree-id475 . -36) (undo-tree-id476 . -36) (undo-tree-id477 . -36) (undo-tree-id478 . -36) (undo-tree-id479 . -36) (undo-tree-id480 . -36) (undo-tree-id481 . -36) (undo-tree-id482 . -36) (undo-tree-id483 . -36) (undo-tree-id484 . -36) (undo-tree-id485 . -36) (undo-tree-id486 . -36) (undo-tree-id487 . -36) (undo-tree-id488 . -36) (undo-tree-id489 . -36) (undo-tree-id490 . -36) (undo-tree-id491 . -36) (undo-tree-id492 . -36) (undo-tree-id493 . -36) (undo-tree-id494 . -36) (undo-tree-id495 . -36) (undo-tree-id496 . -36) (undo-tree-id497 . -36) (undo-tree-id498 . -36) (undo-tree-id499 . -36) (undo-tree-id500 . -36) (undo-tree-id501 . -36) (undo-tree-id502 . -36) (undo-tree-id503 . -36) (undo-tree-id504 . -36) (undo-tree-id505 . -36) (undo-tree-id506 . -36) (undo-tree-id507 . -36) (undo-tree-id508 . -36) (undo-tree-id509 . -36) (undo-tree-id510 . -36) (undo-tree-id511 . -36) (undo-tree-id512 . -36) (undo-tree-id513 . -36) (undo-tree-id514 . -36) (undo-tree-id515 . -36) (undo-tree-id516 . -36) (undo-tree-id517 . -36) (undo-tree-id518 . -36) (undo-tree-id519 . -36) (undo-tree-id520 . -36) (undo-tree-id521 . -36) (undo-tree-id522 . -36) (undo-tree-id523 . -36) (undo-tree-id524 . -36) (undo-tree-id525 . -36) (undo-tree-id526 . -36) (undo-tree-id527 . -36) (undo-tree-id528 . -36) (undo-tree-id529 . 36) (undo-tree-id530 . -1) (undo-tree-id531 . 2) (undo-tree-id532 . -35)) nil (25306 53208 526033 463000) 0 nil])
([nil nil ((#("(setq straight-use-package-by-default t)
" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 40 (fontified t) 40 41 (fontified t)) . 727) (undo-tree-id394 . -41) (undo-tree-id395 . -41) (undo-tree-id396 . -41) (undo-tree-id397 . -41) (undo-tree-id398 . -41) (undo-tree-id399 . -41) (undo-tree-id400 . -41) (undo-tree-id401 . -41) (undo-tree-id402 . -41) (undo-tree-id403 . -41) (undo-tree-id404 . -41) (undo-tree-id405 . -41) (undo-tree-id406 . -41) (undo-tree-id407 . -41) (undo-tree-id408 . -41) (undo-tree-id409 . -41) (undo-tree-id410 . -41) (undo-tree-id411 . -41) (undo-tree-id412 . -41) (undo-tree-id413 . -41) (undo-tree-id414 . -41) (undo-tree-id415 . -41) (undo-tree-id416 . -41) (undo-tree-id417 . -41) (undo-tree-id418 . -41) (undo-tree-id419 . -41) (undo-tree-id420 . -41) (undo-tree-id421 . -41) (undo-tree-id422 . -41) (undo-tree-id423 . -41) (undo-tree-id424 . -41) (undo-tree-id425 . -41) (undo-tree-id426 . -41) (undo-tree-id427 . -41) (undo-tree-id428 . -41) (undo-tree-id429 . 41) (undo-tree-id430 . -1) (undo-tree-id431 . 2) (undo-tree-id432 . -40) (undo-tree-id433 . -40)) nil (25306 53208 525982 451000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 727) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1)) nil (25306 53208 525958 430000) 0 nil])
([nil nil ((#("(use-package gcmh
  :diminish gcmh-mode
  :config
  (setq gcmh-idle-delay 5
        gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
  (gcmh-mode 1))

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-percentage 0.1))) ;; Default value for `gc-cons-percentage'

(add-hook 'emacs-startup-hook
          (lambda ()
            (message \"Emacs ready in %s with %d garbage collections.\"
                     (format \"%.2f seconds\"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 17 (fontified t face font-lock-constant-face) 17 18 (fontified t) 18 20 (fontified t) 20 29 (fontified t face font-lock-builtin-face) 29 42 (fontified t) 42 49 (fontified t face font-lock-builtin-face) 49 53 (fontified t) 53 57 (fontified t face font-lock-keyword-face) 57 128 (fontified t) 128 130 (fontified t face font-lock-comment-delimiter-face) 130 135 (fontified t face font-lock-comment-face) 135 194 (fontified t) 194 200 (fontified t face font-lock-keyword-face) 200 205 (fontified t) 205 217 (fontified t) 217 221 (fontified t face font-lock-keyword-face) 221 248 (fontified t) 248 251 (fontified t face font-lock-comment-delimiter-face) 251 270 (fontified t face font-lock-comment-face) 270 288 (fontified t face (font-lock-constant-face font-lock-comment-face)) 288 290 (fontified t face font-lock-comment-face) 290 332 (fontified t) 332 338 (fontified t face font-lock-keyword-face) 338 363 (fontified t) 363 411 (fontified t face font-lock-string-face) 411 441 (fontified t) 441 455 (fontified t face font-lock-string-face) 455 612 (fontified t)) . 727) (undo-tree-id700 . -611) (undo-tree-id701 . -611) (undo-tree-id702 . -611) (undo-tree-id703 . -612) (undo-tree-id704 . -611) (undo-tree-id705 . -18) (undo-tree-id706 . -18) (undo-tree-id707 . -18) (undo-tree-id708 . -18) (undo-tree-id709 . -18) (undo-tree-id710 . -18) (undo-tree-id711 . -18) (undo-tree-id712 . -18) (undo-tree-id713 . -18) (undo-tree-id714 . -18) (undo-tree-id715 . -18) (undo-tree-id716 . -18) (undo-tree-id717 . -18) (undo-tree-id718 . -18) (undo-tree-id719 . -18) (undo-tree-id720 . -18) (undo-tree-id721 . -18) (undo-tree-id722 . -18) (undo-tree-id723 . -18) (undo-tree-id724 . -18) (undo-tree-id725 . -18) (undo-tree-id726 . -18) (undo-tree-id727 . -18) (undo-tree-id728 . -18) (undo-tree-id729 . -18) (undo-tree-id730 . -40) (undo-tree-id731 . -40) (undo-tree-id732 . -40) (undo-tree-id733 . -40) (undo-tree-id734 . -40) (undo-tree-id735 . -50) (undo-tree-id736 . -50) (undo-tree-id737 . -50) (undo-tree-id738 . -50) (undo-tree-id739 . -50) (undo-tree-id740 . -76) (undo-tree-id741 . -76) (undo-tree-id742 . -76) (undo-tree-id743 . -76) (undo-tree-id744 . -76) (undo-tree-id745 . -135) (undo-tree-id746 . -135) (undo-tree-id747 . -135) (undo-tree-id748 . -135) (undo-tree-id749 . -135) (undo-tree-id750 . -152) (undo-tree-id751 . -152) (undo-tree-id752 . -152) (undo-tree-id753 . -152) (undo-tree-id754 . -152) (undo-tree-id755 . -153) (undo-tree-id756 . -153) (undo-tree-id757 . -153) (undo-tree-id758 . -153) (undo-tree-id759 . -153) (undo-tree-id760 . -183) (undo-tree-id761 . -183) (undo-tree-id762 . -183) (undo-tree-id763 . -183) (undo-tree-id764 . -183) (undo-tree-id765 . -204) (undo-tree-id766 . -204) (undo-tree-id767 . -204) (undo-tree-id768 . -204) (undo-tree-id769 . -204) (undo-tree-id770 . -290) (undo-tree-id771 . -290) (undo-tree-id772 . -290) (undo-tree-id773 . -290) (undo-tree-id774 . -290) (undo-tree-id775 . -291) (undo-tree-id776 . -291) (undo-tree-id777 . -291) (undo-tree-id778 . -291) (undo-tree-id779 . -291) (undo-tree-id780 . -291) (undo-tree-id781 . -291) (undo-tree-id782 . -291) (undo-tree-id783 . -291) (undo-tree-id784 . -291) (undo-tree-id785 . -291) (undo-tree-id786 . -291) (undo-tree-id787 . -291) (undo-tree-id788 . -291) (undo-tree-id789 . -291) (undo-tree-id790 . -321) (undo-tree-id791 . -321) (undo-tree-id792 . -321) (undo-tree-id793 . -321) (undo-tree-id794 . -321) (undo-tree-id795 . -321) (undo-tree-id796 . -321) (undo-tree-id797 . -321) (undo-tree-id798 . -321) (undo-tree-id799 . -321) (undo-tree-id800 . -321) (undo-tree-id801 . -321) (undo-tree-id802 . -321) (undo-tree-id803 . -321) (undo-tree-id804 . -321) (undo-tree-id805 . -321) (undo-tree-id806 . -321) (undo-tree-id807 . -321) (undo-tree-id808 . -321) (undo-tree-id809 . -321) (undo-tree-id810 . -342) (undo-tree-id811 . -342) (undo-tree-id812 . -342) (undo-tree-id813 . -342) (undo-tree-id814 . -342) (undo-tree-id815 . -342) (undo-tree-id816 . -342) (undo-tree-id817 . -342) (undo-tree-id818 . -342) (undo-tree-id819 . -342) (undo-tree-id820 . -342) (undo-tree-id821 . -342) (undo-tree-id822 . -342) (undo-tree-id823 . -342) (undo-tree-id824 . -342) (undo-tree-id825 . -412) (undo-tree-id826 . -412) (undo-tree-id827 . -412) (undo-tree-id828 . -412) (undo-tree-id829 . -412) (undo-tree-id830 . -412) (undo-tree-id831 . -412) (undo-tree-id832 . -412) (undo-tree-id833 . -412) (undo-tree-id834 . -412) (undo-tree-id835 . -412) (undo-tree-id836 . -412) (undo-tree-id837 . -412) (undo-tree-id838 . -412) (undo-tree-id839 . -412) (undo-tree-id840 . -456) (undo-tree-id841 . -456) (undo-tree-id842 . -456) (undo-tree-id843 . -456) (undo-tree-id844 . -456) (undo-tree-id845 . -456) (undo-tree-id846 . -456) (undo-tree-id847 . -456) (undo-tree-id848 . -456) (undo-tree-id849 . -456) (undo-tree-id850 . -456) (undo-tree-id851 . -456) (undo-tree-id852 . -456) (undo-tree-id853 . -456) (undo-tree-id854 . -456) (undo-tree-id855 . -497) (undo-tree-id856 . -497) (undo-tree-id857 . -497) (undo-tree-id858 . -497) (undo-tree-id859 . -497) (undo-tree-id860 . -497) (undo-tree-id861 . -497) (undo-tree-id862 . -497) (undo-tree-id863 . -497) (undo-tree-id864 . -497) (undo-tree-id865 . -497) (undo-tree-id866 . -497) (undo-tree-id867 . -497) (undo-tree-id868 . -497) (undo-tree-id869 . -497) (undo-tree-id870 . -578) (undo-tree-id871 . -578) (undo-tree-id872 . -578) (undo-tree-id873 . -578) (undo-tree-id874 . -578) (undo-tree-id875 . -578) (undo-tree-id876 . -578) (undo-tree-id877 . -578) (undo-tree-id878 . -578) (undo-tree-id879 . -578) (undo-tree-id880 . -578) (undo-tree-id881 . -578) (undo-tree-id882 . -578) (undo-tree-id883 . -578) (undo-tree-id884 . -578) (undo-tree-id885 . -611) (undo-tree-id886 . -611) (undo-tree-id887 . -611) (undo-tree-id888 . -611) (undo-tree-id889 . -611) (undo-tree-id890 . -611) (undo-tree-id891 . -611) (undo-tree-id892 . -611) (undo-tree-id893 . -611) (undo-tree-id894 . -611) (undo-tree-id895 . -611) (undo-tree-id896 . -611) (undo-tree-id897 . -611) (undo-tree-id898 . -611) (undo-tree-id899 . -611) (undo-tree-id900 . -611) (undo-tree-id901 . -611) 1338 (t 25306 53208 543327 241000)) nil (25306 53213 509243 274000) 0 nil])
([nil nil ((#("
;; When emacs asks for \"yes\" or \"no\", let \"y\" or \"n\" suffice
(setq use-short-answers t)

;; Confirm to quit
(setq confirm-kill-emacs 'yes-or-no-p)

;; Major mode of new buffers
(setq initial-major-mode 'org-mode)

;; WINDOW -----------

;; Don't resize the frames in steps; it looks weird, especially in tiling window
;; managers, where it can leave unseemly gaps.
(setq frame-resize-pixelwise t)

;; When opening a file (like double click) on Mac, use an existing frame
(setq ns-pop-up-frames nil)

;; But do not resize windows pixelwise, this can cause crashes in some cases
;; where we resize windows too quickly.
(setq window-resize-pixelwise nil)

;; LINES -----------
(setq-default truncate-lines t)

(setq-default tab-width 4)
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 62 (fontified t face font-lock-comment-face) 62 63 (fontified t) 63 67 (fontified t face font-lock-keyword-face) 67 90 (fontified t) 90 93 (fontified t face font-lock-comment-delimiter-face) 93 109 (fontified t face font-lock-comment-face) 109 110 (fontified t) 110 114 (fontified t face font-lock-keyword-face) 114 149 (fontified t) 149 152 (fontified t face font-lock-comment-delimiter-face) 152 178 (fontified t face font-lock-comment-face) 178 179 (fontified t) 179 183 (fontified t face font-lock-keyword-face) 183 215 (fontified t) 215 218 (fontified t face font-lock-comment-delimiter-face) 218 237 (fontified t face font-lock-comment-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-comment-delimiter-face) 241 319 (fontified t face font-lock-comment-face) 319 322 (fontified t face font-lock-comment-delimiter-face) 322 366 (fontified t face font-lock-comment-face) 366 367 (fontified t) 367 371 (fontified t face font-lock-keyword-face) 371 399 (fontified t) 399 402 (fontified t face font-lock-comment-delimiter-face) 402 472 (fontified t face font-lock-comment-face) 472 473 (fontified t) 473 477 (fontified t face font-lock-keyword-face) 477 501 (fontified t) 501 504 (fontified t face font-lock-comment-delimiter-face) 504 578 (fontified t face font-lock-comment-face) 578 581 (fontified t face font-lock-comment-delimiter-face) 581 618 (fontified t face font-lock-comment-face) 618 619 (fontified t) 619 623 (fontified t face font-lock-keyword-face) 623 654 (fontified t) 654 657 (fontified t face font-lock-comment-delimiter-face) 657 675 (fontified t face font-lock-comment-face) 675 676 (fontified t) 676 688 (fontified t face font-lock-keyword-face) 688 709 (fontified t) 709 721 (fontified t face font-lock-keyword-face) 721 735 (fontified t)) . 727) (undo-tree-id902 . -734) (undo-tree-id903 . -734) (undo-tree-id904 . -734) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -735) (undo-tree-id946 . -734) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -62) (undo-tree-id973 . -62) (undo-tree-id974 . -62) (undo-tree-id975 . -62) (undo-tree-id976 . -62) (undo-tree-id977 . -89) (undo-tree-id978 . -89) (undo-tree-id979 . -89) (undo-tree-id980 . -89) (undo-tree-id981 . -89) (undo-tree-id982 . -90) (undo-tree-id983 . -90) (undo-tree-id984 . -90) (undo-tree-id985 . -90) (undo-tree-id986 . -90) (undo-tree-id987 . -109) (undo-tree-id988 . -109) (undo-tree-id989 . -109) (undo-tree-id990 . -109) (undo-tree-id991 . -109) (undo-tree-id992 . -148) (undo-tree-id993 . -148) (undo-tree-id994 . -148) (undo-tree-id995 . -148) (undo-tree-id996 . -148) (undo-tree-id997 . -149) (undo-tree-id998 . -149) (undo-tree-id999 . -149) (undo-tree-id1000 . -149) (undo-tree-id1001 . -149) (undo-tree-id1002 . -178) (undo-tree-id1003 . -178) (undo-tree-id1004 . -178) (undo-tree-id1005 . -178) (undo-tree-id1006 . -178) (undo-tree-id1007 . -214) (undo-tree-id1008 . -214) (undo-tree-id1009 . -214) (undo-tree-id1010 . -214) (undo-tree-id1011 . -214) (undo-tree-id1012 . -215) (undo-tree-id1013 . -215) (undo-tree-id1014 . -215) (undo-tree-id1015 . -215) (undo-tree-id1016 . -215) (undo-tree-id1017 . -237) (undo-tree-id1018 . -237) (undo-tree-id1019 . -237) (undo-tree-id1020 . -237) (undo-tree-id1021 . -237) (undo-tree-id1022 . -238) (undo-tree-id1023 . -238) (undo-tree-id1024 . -238) (undo-tree-id1025 . -238) (undo-tree-id1026 . -238) (undo-tree-id1027 . -319) (undo-tree-id1028 . -319) (undo-tree-id1029 . -319) (undo-tree-id1030 . -319) (undo-tree-id1031 . -319) (undo-tree-id1032 . -366) (undo-tree-id1033 . -366) (undo-tree-id1034 . -366) (undo-tree-id1035 . -366) (undo-tree-id1036 . -366) (undo-tree-id1037 . -398) (undo-tree-id1038 . -398) (undo-tree-id1039 . -398) (undo-tree-id1040 . -398) (undo-tree-id1041 . -398) (undo-tree-id1042 . -399) (undo-tree-id1043 . -399) (undo-tree-id1044 . -399) (undo-tree-id1045 . -399) (undo-tree-id1046 . -399) (undo-tree-id1047 . -472) (undo-tree-id1048 . -472) (undo-tree-id1049 . -472) (undo-tree-id1050 . -472) (undo-tree-id1051 . -472) (undo-tree-id1052 . -500) (undo-tree-id1053 . -500) (undo-tree-id1054 . -500) (undo-tree-id1055 . -500) (undo-tree-id1056 . -500) (undo-tree-id1057 . -501) (undo-tree-id1058 . -501) (undo-tree-id1059 . -501) (undo-tree-id1060 . -501) (undo-tree-id1061 . -501) (undo-tree-id1062 . -578) (undo-tree-id1063 . -578) (undo-tree-id1064 . -578) (undo-tree-id1065 . -578) (undo-tree-id1066 . -578) (undo-tree-id1067 . -618) (undo-tree-id1068 . -618) (undo-tree-id1069 . -618) (undo-tree-id1070 . -618) (undo-tree-id1071 . -618) (undo-tree-id1072 . -653) (undo-tree-id1073 . -653) (undo-tree-id1074 . -653) (undo-tree-id1075 . -653) (undo-tree-id1076 . -653) (undo-tree-id1077 . -654) (undo-tree-id1078 . -654) (undo-tree-id1079 . -654) (undo-tree-id1080 . -654) (undo-tree-id1081 . -654) (undo-tree-id1082 . -675) (undo-tree-id1083 . -675) (undo-tree-id1084 . -675) (undo-tree-id1085 . -675) (undo-tree-id1086 . -675) (undo-tree-id1087 . -707) (undo-tree-id1088 . -707) (undo-tree-id1089 . -707) (undo-tree-id1090 . -707) (undo-tree-id1091 . -707) (undo-tree-id1092 . -707) (undo-tree-id1093 . -707) (undo-tree-id1094 . -707) (undo-tree-id1095 . -707) (undo-tree-id1096 . -707) (undo-tree-id1097 . -707) (undo-tree-id1098 . -707) (undo-tree-id1099 . -707) (undo-tree-id1100 . -707) (undo-tree-id1101 . -707) (undo-tree-id1102 . -708) (undo-tree-id1103 . -708) (undo-tree-id1104 . -708) (undo-tree-id1105 . -708) (undo-tree-id1106 . -708) (undo-tree-id1107 . -708) (undo-tree-id1108 . -708) (undo-tree-id1109 . -708) (undo-tree-id1110 . -708) (undo-tree-id1111 . -708) (undo-tree-id1112 . -708) (undo-tree-id1113 . -708) (undo-tree-id1114 . -708) (undo-tree-id1115 . -708) (undo-tree-id1116 . -708) (undo-tree-id1117 . -708) (undo-tree-id1118 . -708) (undo-tree-id1119 . -708) (undo-tree-id1120 . -708) (undo-tree-id1121 . -708) (undo-tree-id1122 . -708) (undo-tree-id1123 . -708) (undo-tree-id1124 . -708) (undo-tree-id1125 . -708) (undo-tree-id1126 . -708) (undo-tree-id1127 . -709) (undo-tree-id1128 . -709) (undo-tree-id1129 . -709) (undo-tree-id1130 . -709) (undo-tree-id1131 . -709) (undo-tree-id1132 . -709) (undo-tree-id1133 . -709) (undo-tree-id1134 . -709) (undo-tree-id1135 . -709) (undo-tree-id1136 . -709) (undo-tree-id1137 . -709) (undo-tree-id1138 . -709) (undo-tree-id1139 . -709) (undo-tree-id1140 . -709) (undo-tree-id1141 . -709) (undo-tree-id1142 . -709) (undo-tree-id1143 . -709) (undo-tree-id1144 . -709) (undo-tree-id1145 . -709) (undo-tree-id1146 . -709) (undo-tree-id1147 . -709) (undo-tree-id1148 . -709) (undo-tree-id1149 . -709) (undo-tree-id1150 . -709) (undo-tree-id1151 . -709) (undo-tree-id1152 . -708) (undo-tree-id1153 . -734) (undo-tree-id1154 . -734) (undo-tree-id1155 . -734) (undo-tree-id1156 . -734) (undo-tree-id1157 . -734) (undo-tree-id1158 . -734) (undo-tree-id1159 . -734) (undo-tree-id1160 . -734) (undo-tree-id1161 . -734) (undo-tree-id1162 . -734) (undo-tree-id1163 . -734) (undo-tree-id1164 . -734) (undo-tree-id1165 . -734) (undo-tree-id1166 . -734) (undo-tree-id1167 . -734) (undo-tree-id1168 . -734) (undo-tree-id1169 . -734) (undo-tree-id1170 . -734) (undo-tree-id1171 . -734) (undo-tree-id1172 . -734) (undo-tree-id1173 . -734) (undo-tree-id1174 . -734) (undo-tree-id1175 . -734) (undo-tree-id1176 . -734) (undo-tree-id1177 . -734) (undo-tree-id1178 . -734) 1461 (t 25306 53213 529993 730000)) nil (25306 53225 200358 451000) 0 nil])
([nil nil ((#("menu-bar-mode -1)
(scroll-bar-mode -1)
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
(" 0 18 (fontified t) 18 23 (fontified t) 23 40 (fontified t) 40 44 (fontified t face font-lock-keyword-face) 44 118 (fontified t)) . 16220) (undo-tree-id1379 . -19) (undo-tree-id1380 . -23) (undo-tree-id1381 . -23) (undo-tree-id1382 . -23) (undo-tree-id1383 . -23) (undo-tree-id1384 . -23) (undo-tree-id1385 . -18) (undo-tree-id1386 . -23) (undo-tree-id1387 . -23) (undo-tree-id1388 . -23) (undo-tree-id1389 . -23) (undo-tree-id1390 . -23) (undo-tree-id1391 . -23) (undo-tree-id1392 . -23) (undo-tree-id1393 . -23) (undo-tree-id1394 . -23) (undo-tree-id1395 . -23) (undo-tree-id1396 . -23) (undo-tree-id1397 . -23) (undo-tree-id1398 . -23) (undo-tree-id1399 . -23) (undo-tree-id1400 . -23) (undo-tree-id1401 . -23) (undo-tree-id1402 . -23) (undo-tree-id1403 . -23) (undo-tree-id1404 . -23) (undo-tree-id1405 . -23) (undo-tree-id1406 . -23) (undo-tree-id1407 . -24) (undo-tree-id1408 . -24) (undo-tree-id1409 . -24) (undo-tree-id1410 . -24) (undo-tree-id1411 . -24) (undo-tree-id1412 . -24) (undo-tree-id1413 . -24) (undo-tree-id1414 . -24) (undo-tree-id1415 . -24) (undo-tree-id1416 . -24) (undo-tree-id1417 . -24) (undo-tree-id1418 . -24) (undo-tree-id1419 . -24) (undo-tree-id1420 . -24) (undo-tree-id1421 . -24) (undo-tree-id1422 . -24) (undo-tree-id1423 . -24) (undo-tree-id1424 . -24) (undo-tree-id1425 . -24) (undo-tree-id1426 . -24) (undo-tree-id1427 . -24) (undo-tree-id1428 . -24) (undo-tree-id1429 . -24) (undo-tree-id1430 . -24) (undo-tree-id1431 . -24) (undo-tree-id1432 . -25) (undo-tree-id1433 . -25) (undo-tree-id1434 . -25) (undo-tree-id1435 . -25) (undo-tree-id1436 . -25) (undo-tree-id1437 . -25) (undo-tree-id1438 . -25) (undo-tree-id1439 . -25) (undo-tree-id1440 . -25) (undo-tree-id1441 . -25) (undo-tree-id1442 . -25) (undo-tree-id1443 . -25) (undo-tree-id1444 . -25) (undo-tree-id1445 . -25) (undo-tree-id1446 . -25) (undo-tree-id1447 . -25) (undo-tree-id1448 . -25) (undo-tree-id1449 . -25) (undo-tree-id1450 . -25) (undo-tree-id1451 . -25) (undo-tree-id1452 . -25) (undo-tree-id1453 . -25) (undo-tree-id1454 . -25) (undo-tree-id1455 . -25) (undo-tree-id1456 . -25) (undo-tree-id1457 . -19) (undo-tree-id1458 . -19) (undo-tree-id1459 . -19) (undo-tree-id1460 . -19) (undo-tree-id1461 . -19) (undo-tree-id1462 . -19) (undo-tree-id1463 . -19) (undo-tree-id1464 . -19) (undo-tree-id1465 . -19) (undo-tree-id1466 . -19) (undo-tree-id1467 . -19) (undo-tree-id1468 . -19) (undo-tree-id1469 . -19) (undo-tree-id1470 . -19) (undo-tree-id1471 . -19) (undo-tree-id1472 . -19) (undo-tree-id1473 . -19) (undo-tree-id1474 . -19) (undo-tree-id1475 . -19) (undo-tree-id1476 . -19) (undo-tree-id1477 . -19) (undo-tree-id1478 . -19) (undo-tree-id1479 . -19) (undo-tree-id1480 . -19) (undo-tree-id1481 . -19) (undo-tree-id1482 . -19) (undo-tree-id1483 . -19) (undo-tree-id1484 . -19) (undo-tree-id1485 . -19) (undo-tree-id1486 . -19) (t 25306 53225 219993 315000)) nil (25306 53236 238032 203000) 0 nil])
([nil nil ((#("(tool-bar-mode -1)
" 0 1 (fontified t) 1 19 (fontified t)) . 16219) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) 16220) nil (25306 53236 237966 685000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 16219)) nil (25306 53236 237734 54000) 0 nil])
([nil nil ((#("(frame-parameter nil 'left)
" 0 28 (fontified t)) . 16220) (undo-tree-id1798 . 28) (undo-tree-id1799 . -1) (undo-tree-id1800 . 2) (undo-tree-id1801 . -27) (t 25306 53236 256659 590000)) nil (25306 53238 831677 702000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 16219) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1)) nil (25306 53238 831673 389000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 16218) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1)) nil (25306 53272 867815 948000) 0 nil])
([nil nil ((#("
(use-package evil
  :init
  ;; (setq evil-want-keybinding t)
  (setq evil-want-fine-undo t)
  (setq evil-want-keybinding nil)
  (setq evil-want-Y-yank-to-eol t)
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config

  (evil-set-initial-state 'dashboard-mode 'motion)
  (evil-set-initial-state 'debugger-mode 'motion)
  (evil-set-initial-state 'pdf-view-mode 'motion)
  (evil-set-initial-state 'bufler-list-mode 'emacs)
  (evil-set-initial-state 'inferior-python-mode 'emacs)
  (evil-set-initial-state 'term-mode 'emacs)

  ;; ----- Keybindings
  ;; I tried using evil-define-key for these. Didn't work.
  ;; (define-key evil-motion-state-map \"/\" 'swiper)
  (define-key evil-window-map \"\\C-q\" 'evil-delete-buffer) ;; Maps C-w C-q to evil-delete-buffer (The first C-w puts you into evil-window-map)
  (define-key evil-window-map \"\\C-w\" 'kill-this-buffer)
  (define-key evil-motion-state-map \"\\C-u\" 'evil-scroll-up) 

  ;; ----- Setting cursor colors
  (setq evil-emacs-state-cursor    '(\"#649bce\" box))
  (setq evil-normal-state-cursor   '(\"#ebcb8b\" box))
  (setq evil-operator-state-cursor '(\"#ebcb8b\" hollow))
  (setq evil-visual-state-cursor   '(\"#677691\" box))
  (setq evil-insert-state-cursor   '(\"#eb998b\" (bar . 2)))
  (setq evil-replace-state-cursor  '(\"#eb998b\" hbar))
  (setq evil-motion-state-cursor   '(\"#ad8beb\" box))

  (evil-mode 1))
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 21 (fontified t) 21 26 (fontified t face font-lock-builtin-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-comment-delimiter-face) 32 62 (fontified t face font-lock-comment-face) 62 65 (fontified t) 65 69 (fontified t face font-lock-keyword-face) 69 75 (fontified t) 75 76 (fontified t) 76 93 (fontified t) 93 96 (fontified t) 96 100 (fontified t face font-lock-keyword-face) 100 130 (fontified t) 130 134 (fontified t face font-lock-keyword-face) 134 152 (fontified t) 152 162 (fontified t) 162 165 (fontified t) 165 169 (fontified t face font-lock-keyword-face) 169 171 (fontified t) 171 172 (fontified t) 172 195 (fontified t) 195 198 (fontified t face font-lock-comment-delimiter-face) 198 255 (fontified t face font-lock-comment-face) 255 258 (fontified t) 258 262 (fontified t face font-lock-keyword-face) 262 291 (fontified t) 291 298 (fontified t face font-lock-builtin-face) 298 444 (fontified t) 444 451 (fontified t) 451 607 (fontified t) 607 610 (fontified t face font-lock-comment-delimiter-face) 610 628 (fontified t face font-lock-comment-face) 628 630 (fontified t) 630 633 (fontified t face font-lock-comment-delimiter-face) 633 687 (fontified t face font-lock-comment-face) 687 689 (fontified t) 689 692 (fontified t face font-lock-comment-delimiter-face) 692 739 (fontified t face font-lock-comment-face) 739 766 (fontified t) 766 767 (fontified t) 767 769 (fontified t) 769 775 (fontified t face font-lock-string-face) 775 797 (fontified t) 797 800 (fontified t face font-lock-comment-delimiter-face) 800 881 (fontified t face font-lock-comment-face) 881 911 (fontified t) 911 917 (fontified t face font-lock-string-face) 917 973 (fontified t) 973 979 (fontified t face font-lock-string-face) 979 999 (fontified t) 999 1001 (fontified t) 1001 1004 (fontified t face font-lock-comment-delimiter-face) 1004 1031 (fontified t face font-lock-comment-face) 1031 1032 (fontified t face font-lock-comment-face) 1032 1035 (fontified t) 1035 1039 (fontified t face font-lock-keyword-face) 1039 1069 (fontified t) 1069 1078 (fontified t face font-lock-string-face) 1078 1088 (fontified t) 1088 1092 (fontified t face font-lock-keyword-face) 1092 1122 (fontified t) 1122 1131 (fontified t face font-lock-string-face) 1131 1141 (fontified t) 1141 1145 (fontified t face font-lock-keyword-face) 1145 1175 (fontified t) 1175 1184 (fontified t face font-lock-string-face) 1184 1197 (fontified t) 1197 1201 (fontified t face font-lock-keyword-face) 1201 1231 (fontified t) 1231 1240 (fontified t face font-lock-string-face) 1240 1250 (fontified t) 1250 1254 (fontified t face font-lock-keyword-face) 1254 1284 (fontified t) 1284 1293 (fontified t face font-lock-string-face) 1293 1309 (fontified t) 1309 1313 (fontified t face font-lock-keyword-face) 1313 1343 (fontified t) 1343 1352 (fontified t face font-lock-string-face) 1352 1363 (fontified t) 1363 1367 (fontified t face font-lock-keyword-face) 1367 1397 (fontified t) 1397 1406 (fontified t face font-lock-string-face) 1406 1431 (fontified t)) . 726) (undo-tree-id1967 . -93) (undo-tree-id1968 . -1) (undo-tree-id1969 . 1430) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (t 25306 53238 853326 164000)) nil (25306 53317 241024 514000) 0 nil] [nil nil ((#("
(use-package evil
  :init
  ;; (setq evil-want-keybinding t)
  (setq evil-want-fine-undo t)
  (setq evil-want-keybinding nil)
  (setq evil-want-Y-yank-to-eol t)
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config

  (evil-set-initial-state 'dashboard-mode 'motion)
  (evil-set-initial-state 'debugger-mode 'motion)
  (evil-set-initial-state 'pdf-view-mode 'motion)
  (evil-set-initial-state 'bufler-list-mode 'emacs)
  (evil-set-initial-state 'inferior-python-mode 'emacs)
  (evil-set-initial-state 'term-mode 'emacs)

  ;; ----- Keybindings
  ;; I tried using evil-define-key for these. Didn't work.
  ;; (define-key evil-motion-state-map \"/\" 'swiper)
  (define-key evil-window-map \"\\C-q\" 'evil-delete-buffer) ;; Maps C-w C-q to evil-delete-buffer (The first C-w puts you into evil-window-map)
  (define-key evil-window-map \"\\C-w\" 'kill-this-buffer)
  (define-key evil-motion-state-map \"\\C-u\" 'evil-scroll-up) 

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 21 (fontified t) 21 26 (fontified t face font-lock-builtin-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-comment-delimiter-face) 32 62 (fontified t face font-lock-comment-face) 62 65 (fontified t) 65 69 (fontified t face font-lock-keyword-face) 69 75 (fontified t) 75 76 (fontified t) 76 93 (fontified t) 93 96 (fontified t) 96 100 (fontified t face font-lock-keyword-face) 100 130 (fontified t) 130 134 (fontified t face font-lock-keyword-face) 134 152 (fontified t) 152 162 (fontified t) 162 165 (fontified t) 165 169 (fontified t face font-lock-keyword-face) 169 171 (fontified t) 171 172 (fontified t) 172 195 (fontified t) 195 198 (fontified t face font-lock-comment-delimiter-face) 198 255 (fontified t face font-lock-comment-face) 255 258 (fontified t) 258 262 (fontified t face font-lock-keyword-face) 262 291 (fontified t) 291 298 (fontified t face font-lock-builtin-face) 298 444 (fontified t) 444 451 (fontified t) 451 607 (fontified t) 607 610 (fontified t face font-lock-comment-delimiter-face) 610 628 (fontified t face font-lock-comment-face) 628 630 (fontified t) 630 633 (fontified t face font-lock-comment-delimiter-face) 633 687 (fontified t face font-lock-comment-face) 687 689 (fontified t) 689 692 (fontified t face font-lock-comment-delimiter-face) 692 739 (fontified t face font-lock-comment-face) 739 766 (fontified t) 766 767 (fontified t) 767 769 (fontified t) 769 775 (fontified t face font-lock-string-face) 775 797 (fontified t) 797 800 (fontified t face font-lock-comment-delimiter-face) 800 881 (fontified t face font-lock-comment-face) 881 911 (fontified t) 911 917 (fontified t face font-lock-string-face) 917 973 (fontified t) 973 979 (fontified t face font-lock-string-face) 979 999 (fontified t)) . 726) (undo-tree-id1802 . -93) (undo-tree-id1803 . -1) (undo-tree-id1804 . 998) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -93) (undo-tree-id1809 . -93) (undo-tree-id1810 . -93) (undo-tree-id1811 . -93) (undo-tree-id1812 . -93) (undo-tree-id1813 . -93) (undo-tree-id1814 . -93) (undo-tree-id1815 . -93) (undo-tree-id1816 . -93) (undo-tree-id1817 . -93) (undo-tree-id1818 . -93) (undo-tree-id1819 . -93) (undo-tree-id1820 . -93) (undo-tree-id1821 . -93) (undo-tree-id1822 . -93) (undo-tree-id1823 . -93) (undo-tree-id1824 . -93) (undo-tree-id1825 . -93) (undo-tree-id1826 . -93) (undo-tree-id1827 . -93) (undo-tree-id1828 . -93) (undo-tree-id1829 . -93) (undo-tree-id1830 . -93) (undo-tree-id1831 . -93) (undo-tree-id1832 . -93) (undo-tree-id1833 . -93) (undo-tree-id1834 . -93) (undo-tree-id1835 . -93) (undo-tree-id1836 . -93) (undo-tree-id1837 . -93) (undo-tree-id1838 . -93) (undo-tree-id1839 . -93) (undo-tree-id1840 . -93) (undo-tree-id1841 . -93) (undo-tree-id1842 . -93) (undo-tree-id1843 . -93) (undo-tree-id1844 . -93) (undo-tree-id1845 . -93) (undo-tree-id1846 . -93) (undo-tree-id1847 . -93) (undo-tree-id1848 . -93) (undo-tree-id1849 . -93) (undo-tree-id1850 . -93) (undo-tree-id1851 . -93) (undo-tree-id1852 . -93) (undo-tree-id1853 . -93) (undo-tree-id1854 . -93) (undo-tree-id1855 . -93) (undo-tree-id1856 . -93) (undo-tree-id1857 . -93) (undo-tree-id1858 . -93) (undo-tree-id1859 . -93) (undo-tree-id1860 . -93) (undo-tree-id1861 . -93) (undo-tree-id1862 . -93) (undo-tree-id1863 . -127) (undo-tree-id1864 . -127) (undo-tree-id1865 . -127) (undo-tree-id1866 . -127) (undo-tree-id1867 . -127) (undo-tree-id1868 . -127) (undo-tree-id1869 . -127) (undo-tree-id1870 . -127) (undo-tree-id1871 . -127) (undo-tree-id1872 . -127) (undo-tree-id1873 . -127) (undo-tree-id1874 . -127) (undo-tree-id1875 . -127) (undo-tree-id1876 . -127) (undo-tree-id1877 . -127) (undo-tree-id1878 . -127) (undo-tree-id1879 . -127) (undo-tree-id1880 . -127) (undo-tree-id1881 . -127) (undo-tree-id1882 . -127) (undo-tree-id1883 . -127) (undo-tree-id1884 . -127) (undo-tree-id1885 . -127) (undo-tree-id1886 . -127) (undo-tree-id1887 . -127) (undo-tree-id1888 . -127) (undo-tree-id1889 . -127) (undo-tree-id1890 . -127) (undo-tree-id1891 . -127) (undo-tree-id1892 . -127) (undo-tree-id1893 . -93) (undo-tree-id1894 . -93) (undo-tree-id1895 . -93) (undo-tree-id1896 . -93) (undo-tree-id1897 . -93) (undo-tree-id1898 . -93) (undo-tree-id1899 . -93) (undo-tree-id1900 . -93) (undo-tree-id1901 . -93) (undo-tree-id1902 . -93) (undo-tree-id1903 . -93) (undo-tree-id1904 . -93) (undo-tree-id1905 . -93) (undo-tree-id1906 . -93) (undo-tree-id1907 . -93) (undo-tree-id1908 . -62) (undo-tree-id1909 . -62) (undo-tree-id1910 . -62) (undo-tree-id1911 . -62) (undo-tree-id1912 . -62) (undo-tree-id1913 . -62) (undo-tree-id1914 . -62) (undo-tree-id1915 . -62) (undo-tree-id1916 . -62) (undo-tree-id1917 . -62) (undo-tree-id1918 . -27) (undo-tree-id1919 . -27) (undo-tree-id1920 . -27) (undo-tree-id1921 . -27) (undo-tree-id1922 . -27) (undo-tree-id1923 . -27) (undo-tree-id1924 . -27) (undo-tree-id1925 . -27) (undo-tree-id1926 . -27) (undo-tree-id1927 . -27) (undo-tree-id1928 . -19) (undo-tree-id1929 . -19) (undo-tree-id1930 . -19) (undo-tree-id1931 . -19) (undo-tree-id1932 . -19) (undo-tree-id1933 . -19) (undo-tree-id1934 . -19) (undo-tree-id1935 . -19) (undo-tree-id1936 . -19) (undo-tree-id1937 . -19) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (t 25306 53238 853326 164000)) ((726 . 1725)) (25306 53272 867493 360000) 0 nil])
([nil nil ((#("
(use-package evil-nerd-commenter
  :after evil
  :config
  )

(use-package evil-surround
  :after evil
  :defer 2
  :config
  (global-evil-surround-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package evil-easymotion)
(use-package evil-args)
(use-package evil-visualstar)
(use-package evil-quick-diff
  :straight (evil-quick-diff
  :type git
  :host github
  :repo \"rgrinberg/evil-quick-diff\"
  )
  :init
 (setq evil-quick-diff-key (kbd \"zx\"))
 (evil-quick-diff-install))
;;(use-package evil-quick-diff
 ;;:init
 ;;(setq evil-quick-diff-key (kbd \"zx\"))
 ;;(evil-quick-diff-install))
(use-package exato :ensure t)
(use-package evil-vimish-fold)
(use-package evil-escape)
(use-package evil-numbers)
(use-package evil-exchange)
(use-package evil-lion
  :ensure t
  :config
  (evil-lion-mode))
(use-package evil-indent-plus)
(use-package evil-embrace)

(use-package evil-snipe
  :diminish evil-snipe-mode
  :diminish evil-snipe-local-mode
  :after evil
  :config
  (evil-snipe-mode +1))

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 33 (fontified t face font-lock-constant-face) 33 36 (fontified t) 36 42 (fontified t face font-lock-builtin-face) 42 50 (fontified t) 50 57 (fontified t face font-lock-builtin-face) 57 63 (fontified t) 63 64 (fontified t) 64 70 (fontified t face font-lock-keyword-face) 70 75 (fontified t face font-lock-keyword-face) 75 76 (fontified t) 76 88 (fontified t face font-lock-constant-face) 88 89 (fontified t face font-lock-constant-face) 89 90 (fontified t) 90 92 (fontified t) 92 98 (fontified t face font-lock-builtin-face) 98 104 (fontified t) 104 106 (fontified t) 106 112 (fontified t face font-lock-builtin-face) 112 117 (fontified t) 117 124 (fontified t face font-lock-builtin-face) 124 160 (fontified t) 160 171 (fontified t face font-lock-keyword-face) 171 172 (fontified t) 172 187 (fontified t face font-lock-constant-face) 187 190 (fontified t) 190 196 (fontified t face font-lock-builtin-face) 196 204 (fontified t) 204 211 (fontified t face font-lock-builtin-face) 211 216 (fontified t) 216 223 (fontified t face font-lock-builtin-face) 223 252 (fontified t) 252 263 (fontified t face font-lock-keyword-face) 263 264 (fontified t) 264 279 (fontified t face font-lock-constant-face) 279 282 (fontified t) 282 293 (fontified t face font-lock-keyword-face) 293 294 (fontified t) 294 303 (fontified t face font-lock-constant-face) 303 306 (fontified t) 306 317 (fontified t face font-lock-keyword-face) 317 318 (fontified t) 318 324 (fontified t face font-lock-constant-face) 324 333 (fontified t face font-lock-constant-face) 333 335 (fontified t) 335 336 (fontified t) 336 347 (fontified t face font-lock-keyword-face) 347 348 (fontified t) 348 363 (fontified t face font-lock-constant-face) 363 366 (fontified t) 366 375 (fontified t face font-lock-builtin-face) 375 395 (fontified t) 395 400 (fontified t face font-lock-builtin-face) 400 407 (fontified t) 407 412 (fontified t face font-lock-builtin-face) 412 422 (fontified t) 422 427 (fontified t face font-lock-builtin-face) 427 428 (fontified t) 428 455 (fontified t face font-lock-string-face) 455 462 (fontified t) 462 467 (fontified t face font-lock-builtin-face) 467 470 (fontified t) 470 474 (fontified t face font-lock-keyword-face) 474 500 (fontified t) 500 504 (fontified t face font-lock-string-face) 504 535 (fontified t) 535 537 (fontified t face font-lock-comment-delimiter-face) 537 566 (fontified t face font-lock-comment-face) 566 567 (fontified t) 567 569 (fontified t face font-lock-comment-delimiter-face) 569 575 (fontified t face font-lock-comment-face) 575 576 (fontified t) 576 578 (fontified t face font-lock-comment-delimiter-face) 578 616 (fontified t face font-lock-comment-face) 616 617 (fontified t) 617 619 (fontified t face font-lock-comment-delimiter-face) 619 646 (fontified t face font-lock-comment-face) 646 647 (fontified t) 647 658 (fontified t face font-lock-keyword-face) 658 659 (fontified t) 659 664 (fontified t face font-lock-constant-face) 664 665 (fontified t) 665 672 (fontified t face font-lock-builtin-face) 672 677 (fontified t) 677 688 (fontified t face font-lock-keyword-face) 688 689 (fontified t) 689 705 (fontified t face font-lock-constant-face) 705 708 (fontified t) 708 719 (fontified t face font-lock-keyword-face) 719 720 (fontified t) 720 731 (fontified t face font-lock-constant-face) 731 734 (fontified t) 734 745 (fontified t face font-lock-keyword-face) 745 746 (fontified t) 746 758 (fontified t face font-lock-constant-face) 758 761 (fontified t) 761 772 (fontified t face font-lock-keyword-face) 772 773 (fontified t) 773 786 (fontified t face font-lock-constant-face) 786 789 (fontified t) 789 800 (fontified t face font-lock-keyword-face) 800 801 (fontified t) 801 810 (fontified t face font-lock-constant-face) 810 813 (fontified t) 813 820 (fontified t face font-lock-builtin-face) 820 825 (fontified t) 825 832 (fontified t face font-lock-builtin-face) 832 854 (fontified t) 854 865 (fontified t face font-lock-keyword-face) 865 866 (fontified t) 866 882 (fontified t face font-lock-constant-face) 882 885 (fontified t) 885 896 (fontified t face font-lock-keyword-face) 896 897 (fontified t) 897 909 (fontified t face font-lock-constant-face) 909 913 (fontified t) 913 924 (fontified t face font-lock-keyword-face) 924 925 (fontified t) 925 935 (fontified t face font-lock-constant-face) 935 938 (fontified t) 938 947 (fontified t face font-lock-builtin-face) 947 966 (fontified t) 966 975 (fontified t face font-lock-builtin-face) 975 1000 (fontified t) 1000 1006 (fontified t face font-lock-builtin-face) 1006 1014 (fontified t) 1014 1021 (fontified t face font-lock-builtin-face) 1021 1047 (fontified t)) . 726) (undo-tree-id1986 . -1046) (undo-tree-id1987 . -1046) (undo-tree-id1988 . -104) (undo-tree-id1989 . -104) (undo-tree-id1990 . -104) (undo-tree-id1991 . -104) (undo-tree-id1992 . -1046)) nil (25306 53396 41601 446000) 0 nil] [nil nil ((#("
(use-package evil-nerd-commenter
  :after evil
  :config
  )

(use-package evil-surround
  :after evil
  :defer 2
  :config
  (global-evil-surround-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package evil-easymotion)
(use-package evil-args)
(use-package evil-visualstar)
(use-package evil-quick-diff
  :straight (evil-quick-diff
  :type git
  :host github
  :repo \"rgrinberg/evil-quick-diff\"
  )
  :init
 (setq evil-quick-diff-key (kbd \"zx\"))
 (evil-quick-diff-install))
;;(use-package evil-quick-diff
 ;;:init
 ;;(setq evil-quick-diff-key (kbd \"zx\"))
 ;;(evil-quick-diff-install))
(use-package exato :ensure t)
(use-package evil-vimish-fold)
(use-package evil-escape)
(use-package evil-numbers)
(use-package evil-exchange)
(use-package evil-lion
  :ensure t
  :config
  (evil-lion-mode))
(use-package evil-indent-plus)
(use-package evil-embrace)

(use-package evil-snipe
  :diminish evil-snipe-mode
  :diminish evil-snipe-local-mode
  :after evil
  :config
  (evil-snipe-mode +1))

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 33 (fontified t face font-lock-constant-face) 33 36 (fontified t) 36 42 (fontified t face font-lock-builtin-face) 42 50 (fontified t) 50 57 (fontified t face font-lock-builtin-face) 57 64 (fontified t) 64 70 (fontified t face font-lock-keyword-face) 70 75 (fontified t face font-lock-keyword-face) 75 76 (fontified t) 76 88 (fontified t face font-lock-constant-face) 88 89 (fontified t face font-lock-constant-face) 89 90 (fontified t) 90 92 (fontified t) 92 98 (fontified t face font-lock-builtin-face) 98 106 (fontified t) 106 112 (fontified t face font-lock-builtin-face) 112 117 (fontified t) 117 124 (fontified t face font-lock-builtin-face) 124 160 (fontified t) 160 171 (fontified t face font-lock-keyword-face) 171 172 (fontified t) 172 187 (fontified t face font-lock-constant-face) 187 190 (fontified t) 190 196 (fontified t face font-lock-builtin-face) 196 204 (fontified t) 204 211 (fontified t face font-lock-builtin-face) 211 216 (fontified t) 216 223 (fontified t face font-lock-builtin-face) 223 252 (fontified t) 252 263 (fontified t face font-lock-keyword-face) 263 264 (fontified t) 264 279 (fontified t face font-lock-constant-face) 279 282 (fontified t) 282 293 (fontified t face font-lock-keyword-face) 293 294 (fontified t) 294 303 (fontified t face font-lock-constant-face) 303 306 (fontified t) 306 317 (fontified t face font-lock-keyword-face) 317 318 (fontified t) 318 324 (fontified t face font-lock-constant-face) 324 333 (fontified t face font-lock-constant-face) 333 335 (fontified t) 335 336 (fontified t) 336 347 (fontified t face font-lock-keyword-face) 347 348 (fontified t) 348 363 (fontified t face font-lock-constant-face) 363 366 (fontified t) 366 375 (fontified t face font-lock-builtin-face) 375 395 (fontified t) 395 400 (fontified t face font-lock-builtin-face) 400 407 (fontified t) 407 412 (fontified t face font-lock-builtin-face) 412 422 (fontified t) 422 427 (fontified t face font-lock-builtin-face) 427 428 (fontified t) 428 455 (fontified t face font-lock-string-face) 455 462 (fontified t) 462 467 (fontified t face font-lock-builtin-face) 467 470 (fontified t) 470 474 (fontified t face font-lock-keyword-face) 474 500 (fontified t) 500 504 (fontified t face font-lock-string-face) 504 535 (fontified t) 535 537 (fontified t face font-lock-comment-delimiter-face) 537 566 (fontified t face font-lock-comment-face) 566 567 (fontified t) 567 569 (fontified t face font-lock-comment-delimiter-face) 569 575 (fontified t face font-lock-comment-face) 575 576 (fontified t) 576 578 (fontified t face font-lock-comment-delimiter-face) 578 616 (fontified t face font-lock-comment-face) 616 617 (fontified t) 617 619 (fontified t face font-lock-comment-delimiter-face) 619 646 (fontified t face font-lock-comment-face) 646 647 (fontified t) 647 658 (fontified t face font-lock-keyword-face) 658 659 (fontified t) 659 664 (fontified t face font-lock-constant-face) 664 665 (fontified t) 665 672 (fontified t face font-lock-builtin-face) 672 677 (fontified t) 677 688 (fontified t face font-lock-keyword-face) 688 689 (fontified t) 689 705 (fontified t face font-lock-constant-face) 705 708 (fontified t) 708 719 (fontified t face font-lock-keyword-face) 719 720 (fontified t) 720 731 (fontified t face font-lock-constant-face) 731 734 (fontified t) 734 745 (fontified t face font-lock-keyword-face) 745 746 (fontified t) 746 758 (fontified t face font-lock-constant-face) 758 761 (fontified t) 761 772 (fontified t face font-lock-keyword-face) 772 773 (fontified t) 773 786 (fontified t face font-lock-constant-face) 786 789 (fontified t) 789 800 (fontified t face font-lock-keyword-face) 800 801 (fontified t) 801 810 (fontified t face font-lock-constant-face) 810 813 (fontified t) 813 820 (fontified t face font-lock-builtin-face) 820 825 (fontified t) 825 832 (fontified t face font-lock-builtin-face) 832 854 (fontified t) 854 865 (fontified t face font-lock-keyword-face) 865 866 (fontified t) 866 882 (fontified t face font-lock-constant-face) 882 885 (fontified t) 885 896 (fontified t face font-lock-keyword-face) 896 897 (fontified t) 897 909 (fontified t face font-lock-constant-face) 909 913 (fontified t) 913 924 (fontified t face font-lock-keyword-face) 924 925 (fontified t) 925 935 (fontified t face font-lock-constant-face) 935 938 (fontified t) 938 947 (fontified t face font-lock-builtin-face) 947 966 (fontified t) 966 975 (fontified t face font-lock-builtin-face) 975 1000 (fontified t) 1000 1006 (fontified t face font-lock-builtin-face) 1006 1014 (fontified t) 1014 1021 (fontified t face font-lock-builtin-face) 1021 1047 (fontified t)) . 726) (undo-tree-id1958 . -104) (undo-tree-id1959 . -1046) (undo-tree-id1960 . -1046) (undo-tree-id1961 . -1046) (undo-tree-id1962 . -104) (undo-tree-id1963 . -104) (undo-tree-id1964 . -104) (undo-tree-id1965 . -104) (undo-tree-id1966 . -1046) 1772) ((726 . 1773)) (25306 53317 240818 560000) 0 nil])
nil
([nil nil ((#("
(use-package vterm
  :ensure t
  :config
(push '(\"find-file-other-window\" find-file-other-window) vterm-eval-cmds)
)

(add-hook 'vterm-mode-hook (lambda()
(goto-address-mode 1)))
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 22 (fontified t) 22 29 (fontified t face font-lock-builtin-face) 29 34 (fontified t) 34 41 (fontified t face font-lock-builtin-face) 41 43 (fontified t) 43 47 (fontified t face font-lock-keyword-face) 47 50 (fontified t) 50 55 (fontified t face font-lock-string-face) 55 74 (fontified t face font-lock-string-face) 74 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 147 (fontified t) 147 153 (fontified t face font-lock-keyword-face) 153 180 (fontified t)) . 725) (undo-tree-id1993 . -116) (undo-tree-id1994 . -180) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . 179) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) 905) nil (25306 53518 770769 116000) 0 nil] [nil nil ((#("
(use-package vterm
  :ensure t
  :config
(push '(\"find-file-other-window\" find-file-other-window) vterm-eval-cmds)
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 22 (fontified t) 22 29 (fontified t face font-lock-builtin-face) 29 34 (fontified t) 34 41 (fontified t face font-lock-builtin-face) 41 43 (fontified t) 43 47 (fontified t face font-lock-keyword-face) 47 50 (fontified t) 50 55 (fontified t face font-lock-string-face) 55 74 (fontified t face font-lock-string-face) 74 116 (fontified t)) . 725) (undo-tree-id1973 . -116) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . 115) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . 115) (undo-tree-id1985 . -2) 841) ((725 . 841)) (25306 53396 41485 317000) 0 nil])
nil
([nil nil ((#("
(use-package evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

(setq org-modules '(org-habit))

(eval-after-load 'org
  '(org-load-modules-maybe t))

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 22 (fontified t face font-lock-constant-face) 22 25 (fontified t) 25 34 (fontified t face font-lock-builtin-face) 34 51 (fontified t) 51 57 (fontified t face font-lock-builtin-face) 57 64 (fontified t) 64 71 (fontified t face font-lock-builtin-face) 71 160 (fontified t) 160 166 (fontified t face font-lock-keyword-face) 166 200 (fontified t) 200 207 (fontified t face font-lock-keyword-face) 207 209 (fontified t) 209 224 (fontified t face font-lock-constant-face) 224 255 (fontified t) 255 259 (fontified t face font-lock-keyword-face) 259 322 (fontified t) 322 335 (fontified t) 335 340 (fontified t) 340 341 (fontified t)) . 26929) (undo-tree-id2009 . -14) (undo-tree-id2010 . -340) (undo-tree-id2011 . -340) (undo-tree-id2012 . -340) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -14) (undo-tree-id2017 . -14) (undo-tree-id2018 . -14) (undo-tree-id2019 . -14) (undo-tree-id2020 . -14) (undo-tree-id2021 . -14) (undo-tree-id2022 . -14) (undo-tree-id2023 . -14) (undo-tree-id2024 . -14) (undo-tree-id2025 . -14) (undo-tree-id2026 . -14) (undo-tree-id2027 . -14) (undo-tree-id2028 . -14) (undo-tree-id2029 . -14) (undo-tree-id2030 . -14) (undo-tree-id2031 . -14) (undo-tree-id2032 . -14) (undo-tree-id2033 . -14) (undo-tree-id2034 . -14) (undo-tree-id2035 . -14) (undo-tree-id2036 . -14) (undo-tree-id2037 . -14) (undo-tree-id2038 . -14) (undo-tree-id2039 . -14) (undo-tree-id2040 . -14) (undo-tree-id2041 . -14) (undo-tree-id2042 . -14) (undo-tree-id2043 . -14) (undo-tree-id2044 . -14) (undo-tree-id2045 . -14) (undo-tree-id2046 . -14) (undo-tree-id2047 . -14) (undo-tree-id2048 . -14) (undo-tree-id2049 . -14) (undo-tree-id2050 . -14) (undo-tree-id2051 . -14) (undo-tree-id2052 . -14) (undo-tree-id2053 . -14) (undo-tree-id2054 . -14) (undo-tree-id2055 . -14) (undo-tree-id2056 . -14) (undo-tree-id2057 . -14) (undo-tree-id2058 . -14) (undo-tree-id2059 . -14) (undo-tree-id2060 . -14) (undo-tree-id2061 . -14) (undo-tree-id2062 . -14) (undo-tree-id2063 . -14) (undo-tree-id2064 . -14) (undo-tree-id2065 . -14) (undo-tree-id2066 . -14) (undo-tree-id2067 . -14) (undo-tree-id2068 . -14) (undo-tree-id2069 . -14) (undo-tree-id2070 . -14) (undo-tree-id2071 . -14) (undo-tree-id2072 . -14) (undo-tree-id2073 . -14) (undo-tree-id2074 . -14) (undo-tree-id2075 . -14) (undo-tree-id2076 . -341) (undo-tree-id2077 . -340) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -23) (undo-tree-id2104 . -23) (undo-tree-id2105 . -23) (undo-tree-id2106 . -23) (undo-tree-id2107 . -23) (undo-tree-id2108 . -49) (undo-tree-id2109 . -49) (undo-tree-id2110 . -49) (undo-tree-id2111 . -49) (undo-tree-id2112 . -49) (undo-tree-id2113 . -62) (undo-tree-id2114 . -62) (undo-tree-id2115 . -62) (undo-tree-id2116 . -62) (undo-tree-id2117 . -62) (undo-tree-id2118 . -72) (undo-tree-id2119 . -72) (undo-tree-id2120 . -72) (undo-tree-id2121 . -72) (undo-tree-id2122 . -72) (undo-tree-id2123 . -115) (undo-tree-id2124 . -115) (undo-tree-id2125 . -115) (undo-tree-id2126 . -115) (undo-tree-id2127 . -115) (undo-tree-id2128 . -147) (undo-tree-id2129 . -147) (undo-tree-id2130 . -147) (undo-tree-id2131 . -147) (undo-tree-id2132 . -147) (undo-tree-id2133 . -198) (undo-tree-id2134 . -198) (undo-tree-id2135 . -198) (undo-tree-id2136 . -198) (undo-tree-id2137 . -198) (undo-tree-id2138 . -199) (undo-tree-id2139 . -199) (undo-tree-id2140 . -199) (undo-tree-id2141 . -199) (undo-tree-id2142 . -199) (undo-tree-id2143 . -226) (undo-tree-id2144 . -226) (undo-tree-id2145 . -226) (undo-tree-id2146 . -226) (undo-tree-id2147 . -226) (undo-tree-id2148 . -253) (undo-tree-id2149 . -253) (undo-tree-id2150 . -253) (undo-tree-id2151 . -253) (undo-tree-id2152 . -253) (undo-tree-id2153 . -254) (undo-tree-id2154 . -254) (undo-tree-id2155 . -254) (undo-tree-id2156 . -254) (undo-tree-id2157 . -254) (undo-tree-id2158 . -286) (undo-tree-id2159 . -286) (undo-tree-id2160 . -286) (undo-tree-id2161 . -286) (undo-tree-id2162 . -286) (undo-tree-id2163 . -287) (undo-tree-id2164 . -287) (undo-tree-id2165 . -287) (undo-tree-id2166 . -287) (undo-tree-id2167 . -287) (undo-tree-id2168 . -287) (undo-tree-id2169 . -287) (undo-tree-id2170 . -287) (undo-tree-id2171 . -287) (undo-tree-id2172 . -287) (undo-tree-id2173 . -287) (undo-tree-id2174 . -287) (undo-tree-id2175 . -287) (undo-tree-id2176 . -287) (undo-tree-id2177 . -287) (undo-tree-id2178 . -309) (undo-tree-id2179 . -309) (undo-tree-id2180 . -309) (undo-tree-id2181 . -309) (undo-tree-id2182 . -309) (undo-tree-id2183 . -309) (undo-tree-id2184 . -309) (undo-tree-id2185 . -309) (undo-tree-id2186 . -309) (undo-tree-id2187 . -309) (undo-tree-id2188 . -309) (undo-tree-id2189 . -309) (undo-tree-id2190 . -309) (undo-tree-id2191 . -309) (undo-tree-id2192 . -309) (undo-tree-id2193 . -340) (undo-tree-id2194 . -340) (undo-tree-id2195 . -340) (undo-tree-id2196 . -340) (undo-tree-id2197 . -340) (undo-tree-id2198 . -340) (undo-tree-id2199 . -340) (undo-tree-id2200 . -340) (undo-tree-id2201 . -340) (undo-tree-id2202 . -340) (undo-tree-id2203 . -340) (undo-tree-id2204 . -340) (undo-tree-id2205 . -340) (undo-tree-id2206 . -340) (undo-tree-id2207 . -340) (undo-tree-id2208 . -340) (undo-tree-id2209 . -340) (undo-tree-id2210 . -340) (undo-tree-id2211 . -340) (undo-tree-id2212 . -340) (undo-tree-id2213 . -340) (undo-tree-id2214 . -340) 27269) nil (25306 53524 494568 349000) 0 nil] [nil nil ((#("evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

(setq org-modules '(org-habit))

(eval-after-load 'org
  '(org-load-" 0 8 (fontified t face font-lock-constant-face) 8 11 (fontified t) 11 20 (fontified t face font-lock-builtin-face) 20 37 (fontified t) 37 43 (fontified t face font-lock-builtin-face) 43 50 (fontified t) 50 57 (fontified t face font-lock-builtin-face) 57 146 (fontified t) 146 152 (fontified t face font-lock-keyword-face) 152 186 (fontified t) 186 193 (fontified t face font-lock-keyword-face) 193 195 (fontified t) 195 210 (fontified t face font-lock-constant-face) 210 241 (fontified t) 241 245 (fontified t face font-lock-keyword-face) 245 308 (fontified t)) . 26943) (t 25306 53454 463318 506000)) ((26943 . 27251) (t 25306 53518 49982 914000)) (25306 53518 29056 864000) 0 nil] [nil nil ((#("(use-package evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

(setq org-modules '(org-habit))

(eval-after-load 'org
  '(org-load-modules-maybe t))
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 21 (fontified t face font-lock-constant-face) 21 24 (fontified t) 24 33 (fontified t face font-lock-builtin-face) 33 50 (fontified t) 50 56 (fontified t face font-lock-builtin-face) 56 63 (fontified t) 63 70 (fontified t face font-lock-builtin-face) 70 159 (fontified t) 159 165 (fontified t face font-lock-keyword-face) 165 199 (fontified t) 199 206 (fontified t face font-lock-keyword-face) 206 208 (fontified t) 208 223 (fontified t face font-lock-constant-face) 223 254 (fontified t) 254 258 (fontified t face font-lock-keyword-face) 258 339 (fontified t)) . 26930) (undo-tree-id2005 . 339) (undo-tree-id2006 . -1) (undo-tree-id2007 . 144) (undo-tree-id2008 . -196) (t 25306 53454 463318 506000)) ((26930 . 27269)) (25306 53485 647562 373000) 0 nil])
nil
([nil nil ((#("(use-package evil-anzu :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-constant-face) 22 23 (fontified t) 23 29 (fontified t face font-lock-builtin-face) 29 33 (fontified t)) . 25796) (undo-tree-id2215 . -28) (undo-tree-id2216 . -33) (undo-tree-id2217 . -33) (undo-tree-id2218 . -33) (undo-tree-id2219 . -33) (undo-tree-id2220 . -33) (undo-tree-id2221 . -33) (undo-tree-id2222 . -33) (undo-tree-id2223 . -33) (undo-tree-id2224 . -33) (undo-tree-id2225 . -33) (undo-tree-id2226 . -28) (undo-tree-id2227 . -28) (undo-tree-id2228 . -28) (undo-tree-id2229 . -28) (undo-tree-id2230 . -28) (undo-tree-id2231 . -28) (undo-tree-id2232 . -28) (undo-tree-id2233 . -28) (undo-tree-id2234 . -28) (undo-tree-id2235 . -28) (undo-tree-id2236 . -33) (undo-tree-id2237 . -33) (undo-tree-id2238 . -33) (undo-tree-id2239 . -33) (undo-tree-id2240 . -33) (undo-tree-id2241 . -33) (undo-tree-id2242 . -33) (undo-tree-id2243 . -33) (undo-tree-id2244 . -33) (undo-tree-id2245 . -33) (undo-tree-id2246 . -28) (undo-tree-id2247 . -28) (undo-tree-id2248 . -28) (undo-tree-id2249 . -28) (undo-tree-id2250 . -28) (undo-tree-id2251 . -28) (undo-tree-id2252 . -28) (undo-tree-id2253 . -28) (undo-tree-id2254 . -28) (undo-tree-id2255 . -28) (undo-tree-id2256 . -28) (undo-tree-id2257 . -28) (undo-tree-id2258 . -28) (undo-tree-id2259 . -28) (undo-tree-id2260 . -28) (undo-tree-id2261 . -28) (undo-tree-id2262 . -28) (undo-tree-id2263 . -28) (undo-tree-id2264 . -28) (undo-tree-id2265 . -28) (undo-tree-id2266 . -28) 25824 (t 25306 53524 503316 19000)) nil (25306 57659 347186 298000) 0 nil])
nil
nil
([nil nil ((#("
(use-package undo-tree)
(global-undo-tree-mode)
(evil-set-undo-system 'undo-tree)
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 23 (fontified t face font-lock-constant-face) 23 49 (fontified t) 49 82 (fontified t) 82 83 (fontified t)) . 728) (undo-tree-id2311 . -1) (t 25306 57599 926504 934000)) nil (25306 58044 951552 230000) 0 nil] [nil nil ((#("(use-package undo-tree)
(global-undo-tree-mode)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-constant-face) 22 48 (fontified t)) . 729) (undo-tree-id2267 . 48) (undo-tree-id2268 . -1) (undo-tree-id2269 . 26) (undo-tree-id2270 . -23) (t 25306 57599 926504 934000)) ((729 . 777)) (25306 57659 346853 746000) 0 nil])
([nil nil ((#("
(use-package recentf
  :ensure nil
  :config
  (setq ;;recentf-auto-cleanup 'never
   ;; recentf-max-menu-items 0
   recentf-max-saved-items 200)
  ;; Show home folder path as a ~
  (setq recentf-filename-handlers  
        (append '(abbreviate-file-name) recentf-filename-handlers))
  (recentf-mode))
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 21 (fontified t face font-lock-constant-face) 21 24 (fontified t) 24 31 (fontified t face font-lock-builtin-face) 31 38 (fontified t) 38 45 (fontified t face font-lock-builtin-face) 45 49 (fontified t) 49 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 56 (fontified t face font-lock-comment-delimiter-face) 56 84 (fontified t face font-lock-comment-face) 84 87 (fontified t) 87 90 (fontified t face font-lock-comment-delimiter-face) 90 115 (fontified t face font-lock-comment-face) 115 149 (fontified t) 149 152 (fontified t face font-lock-comment-delimiter-face) 152 181 (fontified t face font-lock-comment-face) 181 184 (fontified t) 184 188 (fontified t face font-lock-keyword-face) 188 189 (fontified t) 189 217 (fontified t) 217 278 (fontified t) 278 285 (fontified t) 285 292 (fontified t) 292 303 (fontified t)) . 728) (undo-tree-id2310 . -1)) nil (25306 58044 951664 266000) 0 nil])
nil
([nil nil ((#("
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
" 0 1 (fontified t) 1 2 (fontified t) 2 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t) 11 19 (fontified t face font-lock-constant-face) 19 21 (fontified t) 21 22 (fontified t) 22 26 (fontified t face font-lock-keyword-face) 26 63 (fontified t) 63 64 (fontified t)) . 728) (t 25306 58050 659822 290000)) nil (25306 58141 919510 636000) 0 nil] [nil nil ((#("(require 'uniquify)
" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 18 (fontified t face font-lock-constant-face) 18 20 (fontified t)) . 729) (undo-tree-id2271 . 20) (undo-tree-id2272 . -1) (undo-tree-id2273 . 2) (undo-tree-id2274 . -19) (undo-tree-id2275 . -20) (undo-tree-id2276 . -20) (undo-tree-id2277 . -20) (undo-tree-id2278 . -20) (undo-tree-id2279 . -20) (undo-tree-id2280 . -20) (undo-tree-id2281 . -20) (undo-tree-id2282 . -20) (undo-tree-id2283 . -20) (undo-tree-id2284 . -20) (undo-tree-id2285 . -20) (undo-tree-id2286 . -20) (undo-tree-id2287 . -20) (undo-tree-id2288 . -20) (undo-tree-id2289 . -20) (undo-tree-id2290 . -20) (undo-tree-id2291 . -20) (undo-tree-id2292 . -20) (undo-tree-id2293 . -20) (undo-tree-id2294 . -20) (undo-tree-id2295 . -20) (undo-tree-id2296 . -20) (undo-tree-id2297 . -20) (undo-tree-id2298 . -20) (undo-tree-id2299 . -20) (undo-tree-id2300 . -20) (undo-tree-id2301 . -20) (undo-tree-id2302 . -20) (undo-tree-id2303 . -20) (undo-tree-id2304 . -20) (undo-tree-id2305 . -20) (undo-tree-id2306 . -20) (undo-tree-id2307 . -20) (undo-tree-id2308 . -20) (undo-tree-id2309 . -20)) ((729 . 749)) (25306 58044 951547 259000) 0 nil])
([nil nil ((#("(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  (which-key-setup-minibuffer)
  :config
  (setq which-key-idle-delay 0.3)
  (setq which-key-prefix-prefix \"◉ \")
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-min-display-lines 6
        which-key-max-display-columns nil))
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-constant-face) 22 25 (fontified t) 25 34 (fontified t face font-lock-builtin-face) 34 52 (fontified t) 52 57 (fontified t face font-lock-builtin-face) 57 110 (fontified t) 110 117 (fontified t face font-lock-builtin-face) 117 121 (fontified t) 121 125 (fontified t face font-lock-keyword-face) 125 155 (fontified t) 155 159 (fontified t face font-lock-keyword-face) 159 184 (fontified t) 184 188 (fontified t face font-lock-string-face) 188 190 (fontified t) 190 193 (fontified t) 193 197 (fontified t face font-lock-keyword-face) 197 246 (fontified t) 246 328 (fontified t)) . 729) (undo-tree-id2312 . 328) (undo-tree-id2313 . -1) (undo-tree-id2314 . 2) (undo-tree-id2315 . -327)) nil (25306 58141 919507 108000) 0 nil])
nil
([nil nil ((#("(use-package general)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 20 (fontified t face font-lock-constant-face) 20 22 (fontified t)) . 731) (undo-tree-id2316 . 22) (undo-tree-id2317 . -1) (undo-tree-id2318 . 2) (undo-tree-id2319 . -21) (t 25306 58141 939819 47000)) nil (25306 58186 964891 216000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 729) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (t 25306 58186 983150 785000)) nil (25306 58259 305116 161000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 729) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1)) nil (25306 58259 305082 946000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 728) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) 729) nil (25306 58259 305042 113000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 728) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1)) nil (25306 58259 304707 878000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 728)) nil (25306 58259 304674 778000) 0 nil])
([nil nil ((#("(general-define-key
 :states '(normal motion visual)
 :keymaps 'override
 :prefix \"SPC\"

 ;; Top level functions
 ;; \"/\" '(jib/rg :which-key \"ripgrep\")
 ;; \";\" '(spacemacs/deft :which-key \"deft\")
 \":\" '(project-find-file :which-key \"p-find file\")
 \".\" '(find-file :which-key \"find file\")
 \",\" '(consult-recent-file :which-key \"recent files\")
 \"TAB\" '(switch-to-prev-buffer :which-key \"previous buffer\")
;; \"SPC\" '(consult-M-x :which-key \"M-x\")
 \"q\" '(save-buffers-kill-terminal :which-key \"quit emacs\")
 \"r\" '(jump-to-register :which-key \"registers\")
 \"c\" 'org-capture

;; Buffers
\"b\" '(nil :which-key \"buffer\")
\"bb\" '(consult-buffer :which-key \"switch buffers\")
\"bd\" '(evil-delete-buffer :which-key \"delete buffer\")
\"bs\" '(switch-to-scratch-buffer :which-key \"scratch buffer\")
\"bm\" '(kill-other-buffers :which-key \"kill other buffers\")
\"bi\" '(ibuffer  :which-key \"ibuffer\")
\"br\" '(revert-buffer :which-key \"revert buffer\")

;; Files
\"f\" '(nil :which-key \"files\")
\"fb\" '(consult-bookmark :which-key \"bookmarks\")
\"ff\" '(find-file :which-key \"find file\")
;; \"fn\" '(spacemacs/new-empty-buffer :which-key \"new file\")
\"fr\" '(recentf :which-key \"recent files\")
\"fR\" '(rename-file :which-key \"rename file\")
\"fs\" '(save-buffer :which-key \"save buffer\")
\"fS\" '(evil-write-all :which-key \"save all buffers\")
\"fo\" '(reveal-in-osx-finder :which-key \"reveal in finder\")

;; Help/emacs
\"h\" '(nil :which-key \"help/emacs\")

\"hv\" '(describe-variable :which-key \"des. variable\")
\"hb\" '(descbinds :which-key \"des. bindings\")
\"hM\" '(describe-mode :which-key \"des. mode\")
\"hf\" '(describe-function :which-key \"des. func\")
\"hF\" '(describe-face :which-key \"des. face\")
\"hk\" '(describe-key :which-key \"des. key\")

\"hed\" '((lambda () (interactive) (jump-to-register 67)) :which-key \"edit dotfile\")

\"hm\" '(nil :which-key \"switch mode\")
\"hme\" '(emacs-lisp-mode :which-key \"elisp mode\")
\"hmo\" '(org-mode :which-key \"org mode\")
\"hmt\" '(text-mode :which-key \"text mode\")

;; Git
\"gg\" '(magit-status :which-key \"magit status\")

;; Open
\"ot\" '(vterm-other-window :which-key \"Open vterm in another window\")
\"oT\" '(vterm :which-key \"Open vterm in the same window\")

;; Toggles
\"t\" '(nil :which-key \"toggles\")
\"tt\" '(toggle-truncate-lines :which-key \"truncate lines\")
\"tv\" '(visual-line-mode :which-key \"visual line mode\")
\"tn\" '(display-line-numbers-mode :which-key \"display line numbers\")
\"ta\" '(mixed-pitch-mode :which-key \"variable pitch mode\")
\"tc\" '(visual-fill-column-mode :which-key \"visual fill column mode\")
\"ty\" '(consult-load-theme :which-key \"load theme\")
\"tw\" '(writeroom-mode :which-key \"writeroom-mode\")
\"tR\" '(read-only-mode :which-key \"read only mode\")
\"tI\" '(toggle-input-method :which-key \"toggle input method\")
\"tr\" '(display-fill-column-indicator-mode :which-key \"fill column indicator\")
\"tm\" '(hide-mode-line-mode :which-key \"hide modeline mode\")

;;Search
\"sb\" '(consult-line :which-key \"search buffer\")
;; Windows
\"w\" '(nil :which-key \"window\")
;; \"wm\" '(jib/toggle-maximize-buffer :which-key \"maximize buffer\")
\"wN\" '(make-frame :which-key \"make frame\")
\"wd\" '(evil-window-delete :which-key \"delete window\")
\"ws\" '(split-window-vertically :which-key \"split below\")
\"wv\" '(split-window-horizontally :which-key \"split right\")
\"wl\" '(evil-window-right :which-key \"evil-window-right\")
\"wh\" '(evil-window-left :which-key \"evil-window-left\")
\"wj\" '(evil-window-down :which-key \"evil-window-down\")
\"wk\" '(evil-window-up :which-key \"evil-window-up\")
\"wz\" '(text-scale-adjust :which-key \"text zoom\")


;;g commandsc-comment-operator :which-key \"comment operator\")
) ;; End SPC prefix block

" 0 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 28 (fontified t face font-lock-builtin-face) 28 54 (fontified t) 54 62 (fontified t face font-lock-builtin-face) 62 74 (fontified t) 74 81 (fontified t face font-lock-builtin-face) 81 82 (fontified t) 82 87 (fontified t face font-lock-string-face) 87 90 (fontified t) 90 93 (fontified t face font-lock-comment-delimiter-face) 93 113 (fontified t face font-lock-comment-face) 113 114 (fontified t) 114 117 (fontified t face font-lock-comment-delimiter-face) 117 152 (fontified t face font-lock-comment-face) 152 153 (fontified t) 153 156 (fontified t face font-lock-comment-delimiter-face) 156 196 (fontified t face font-lock-comment-face) 196 197 (fontified t) 197 200 (fontified t face font-lock-string-face) 200 221 (fontified t) 221 231 (fontified t face font-lock-builtin-face) 231 232 (fontified t) 232 245 (fontified t face font-lock-string-face) 245 248 (fontified t) 248 251 (fontified t face font-lock-string-face) 251 264 (fontified t) 264 274 (fontified t face font-lock-builtin-face) 274 275 (fontified t) 275 286 (fontified t face font-lock-string-face) 286 289 (fontified t) 289 292 (fontified t face font-lock-string-face) 292 315 (fontified t) 315 325 (fontified t face font-lock-builtin-face) 325 326 (fontified t) 326 340 (fontified t face font-lock-string-face) 340 343 (fontified t) 343 348 (fontified t face font-lock-string-face) 348 373 (fontified t) 373 383 (fontified t face font-lock-builtin-face) 383 384 (fontified t) 384 401 (fontified t face font-lock-string-face) 401 403 (fontified t) 403 406 (fontified t face font-lock-comment-delimiter-face) 406 444 (fontified t face font-lock-comment-face) 444 445 (fontified t) 445 448 (fontified t face font-lock-string-face) 448 478 (fontified t) 478 488 (fontified t face font-lock-builtin-face) 488 489 (fontified t) 489 501 (fontified t face font-lock-string-face) 501 504 (fontified t) 504 507 (fontified t face font-lock-string-face) 507 513 (fontified t) 513 527 (fontified t) 527 532 (fontified t face font-lock-builtin-face) 532 537 (fontified t face font-lock-builtin-face) 537 538 (fontified t) 538 549 (fontified t face font-lock-string-face) 549 551 (fontified t) 551 552 (fontified t) 552 555 (fontified t face font-lock-string-face) 555 570 (fontified t) 570 573 (fontified t face font-lock-comment-delimiter-face) 573 581 (fontified t face font-lock-comment-face) 581 584 (fontified t face font-lock-string-face) 584 591 (fontified t) 591 601 (fontified t face font-lock-builtin-face) 601 602 (fontified t) 602 610 (fontified t face font-lock-string-face) 610 612 (fontified t) 612 616 (fontified t face font-lock-string-face) 616 629 (fontified t) 629 630 (fontified t) 630 634 (fontified t) 634 644 (fontified t face font-lock-builtin-face) 644 645 (fontified t) 645 661 (fontified t face font-lock-string-face) 661 663 (fontified t) 663 667 (fontified t face font-lock-string-face) 667 689 (fontified t) 689 694 (fontified t face font-lock-builtin-face) 694 695 (fontified t face font-lock-builtin-face) 695 699 (fontified t face font-lock-builtin-face) 699 700 (fontified t) 700 715 (fontified t face font-lock-string-face) 715 717 (fontified t) 717 721 (fontified t face font-lock-string-face) 721 737 (fontified t) 737 746 (fontified t) 746 749 (fontified t) 749 759 (fontified t face font-lock-builtin-face) 759 760 (fontified t) 760 776 (fontified t face font-lock-string-face) 776 778 (fontified t) 778 779 (fontified t face font-lock-string-face) 779 782 (fontified t face font-lock-string-face) 782 804 (fontified t) 804 814 (fontified t face font-lock-builtin-face) 814 815 (fontified t) 815 835 (fontified t face font-lock-string-face) 835 837 (fontified t) 837 841 (fontified t face font-lock-string-face) 841 853 (fontified t) 853 863 (fontified t face font-lock-builtin-face) 863 864 (fontified t) 864 873 (fontified t face font-lock-string-face) 873 875 (fontified t) 875 879 (fontified t face font-lock-string-face) 879 896 (fontified t) 896 906 (fontified t face font-lock-builtin-face) 906 907 (fontified t) 907 922 (fontified t face font-lock-string-face) 922 925 (fontified t) 925 928 (fontified t face font-lock-comment-delimiter-face) 928 934 (fontified t face font-lock-comment-face) 934 937 (fontified t face font-lock-string-face) 937 944 (fontified t) 944 954 (fontified t face font-lock-builtin-face) 954 955 (fontified t) 955 962 (fontified t face font-lock-string-face) 962 964 (fontified t) 964 968 (fontified t face font-lock-string-face) 968 988 (fontified t) 988 998 (fontified t face font-lock-builtin-face) 998 999 (fontified t) 999 1010 (fontified t face font-lock-string-face) 1010 1012 (fontified t) 1012 1016 (fontified t face font-lock-string-face) 1016 1029 (fontified t) 1029 1039 (fontified t face font-lock-builtin-face) 1039 1040 (fontified t) 1040 1051 (fontified t face font-lock-string-face) 1051 1053 (fontified t) 1053 1056 (fontified t face font-lock-comment-delimiter-face) 1056 1081 (fontified t face font-lock-comment-face) 1081 1082 (fontified t face font-lock-comment-face) 1082 1113 (fontified t face font-lock-comment-face) 1113 1117 (fontified t face font-lock-string-face) 1117 1128 (fontified t) 1128 1138 (fontified t face font-lock-builtin-face) 1138 1139 (fontified t) 1139 1144 (fontified t face font-lock-string-face) 1144 1145 (fontified t face font-lock-string-face) 1145 1146 (fontified t face font-lock-string-face) 1146 1153 (fontified t face font-lock-string-face) 1153 1155 (fontified t) 1155 1159 (fontified t face font-lock-string-face) 1159 1174 (fontified t) 1174 1184 (fontified t face font-lock-builtin-face) 1184 1185 (fontified t) 1185 1198 (fontified t face font-lock-string-face) 1198 1200 (fontified t) 1200 1204 (fontified t face font-lock-string-face) 1204 1219 (fontified t) 1219 1229 (fontified t face font-lock-builtin-face) 1229 1230 (fontified t) 1230 1243 (fontified t face font-lock-string-face) 1243 1245 (fontified t) 1245 1249 (fontified t face font-lock-string-face) 1249 1267 (fontified t) 1267 1277 (fontified t face font-lock-builtin-face) 1277 1278 (fontified t) 1278 1296 (fontified t face font-lock-string-face) 1296 1298 (fontified t) 1298 1302 (fontified t face font-lock-string-face) 1302 1326 (fontified t) 1326 1336 (fontified t face font-lock-builtin-face) 1336 1337 (fontified t) 1337 1355 (fontified t face font-lock-string-face) 1355 1358 (fontified t) 1358 1361 (fontified t face font-lock-comment-delimiter-face) 1361 1372 (fontified t face font-lock-comment-face) 1372 1375 (fontified t face font-lock-string-face) 1375 1382 (fontified t) 1382 1392 (fontified t face font-lock-builtin-face) 1392 1393 (fontified t) 1393 1405 (fontified t face font-lock-string-face) 1405 1408 (fontified t) 1408 1412 (fontified t face font-lock-string-face) 1412 1433 (fontified t) 1433 1443 (fontified t face font-lock-builtin-face) 1443 1444 (fontified t) 1444 1459 (fontified t face font-lock-string-face) 1459 1461 (fontified t) 1461 1465 (fontified t face font-lock-string-face) 1465 1474 (fontified t) 1474 1475 (fontified t) 1475 1478 (fontified t) 1478 1488 (fontified t face font-lock-builtin-face) 1488 1489 (fontified t) 1489 1499 (fontified t face font-lock-string-face) 1499 1504 (fontified t face font-lock-string-face) 1504 1506 (fontified t) 1506 1510 (fontified t face font-lock-string-face) 1510 1519 (fontified t) 1519 1520 (fontified t) 1520 1527 (fontified t) 1527 1537 (face font-lock-builtin-face fontified t) 1537 1538 (fontified t) 1538 1549 (face font-lock-string-face fontified t) 1549 1551 (fontified t) 1551 1555 (fontified t face font-lock-string-face) 1555 1576 (fontified t) 1576 1586 (fontified t face font-lock-builtin-face) 1586 1587 (fontified t) 1587 1598 (fontified t face font-lock-string-face) 1598 1600 (fontified t) 1600 1604 (fontified t face font-lock-string-face) 1604 1621 (fontified t) 1621 1631 (fontified t face font-lock-builtin-face) 1631 1632 (fontified t) 1632 1643 (fontified t face font-lock-string-face) 1643 1645 (fontified t) 1645 1649 (fontified t face font-lock-string-face) 1649 1665 (fontified t) 1665 1675 (fontified t face font-lock-builtin-face) 1675 1676 (fontified t) 1676 1686 (fontified t face font-lock-string-face) 1686 1689 (fontified t) 1689 1694 (fontified t face font-lock-string-face) 1694 1698 (fontified t) 1698 1704 (fontified t face font-lock-keyword-face) 1704 1709 (fontified t) 1709 1720 (fontified t face font-lock-keyword-face) 1720 1745 (fontified t) 1745 1755 (fontified t face font-lock-builtin-face) 1755 1756 (fontified t) 1756 1770 (fontified t face font-lock-string-face) 1770 1773 (fontified t) 1773 1777 (fontified t face font-lock-string-face) 1777 1784 (fontified t) 1784 1794 (fontified t face font-lock-builtin-face) 1794 1795 (fontified t) 1795 1808 (fontified t face font-lock-string-face) 1808 1810 (fontified t) 1810 1815 (fontified t face font-lock-string-face) 1815 1834 (fontified t) 1834 1844 (fontified t face font-lock-builtin-face) 1844 1845 (fontified t) 1845 1857 (fontified t face font-lock-string-face) 1857 1859 (fontified t) 1859 1864 (fontified t face font-lock-string-face) 1864 1876 (fontified t) 1876 1886 (fontified t face font-lock-builtin-face) 1886 1887 (fontified t) 1887 1897 (fontified t face font-lock-string-face) 1897 1899 (fontified t) 1899 1904 (fontified t face font-lock-string-face) 1904 1917 (fontified t) 1917 1927 (fontified t face font-lock-builtin-face) 1927 1928 (fontified t) 1928 1939 (fontified t face font-lock-string-face) 1939 1942 (fontified t) 1942 1945 (fontified t face font-lock-comment-delimiter-face) 1945 1949 (fontified t face font-lock-comment-face) 1949 1953 (fontified t face font-lock-string-face) 1953 1969 (fontified t) 1969 1979 (fontified t face font-lock-builtin-face) 1979 1980 (fontified t) 1980 1994 (fontified t face font-lock-string-face) 1994 1997 (fontified t) 1997 2000 (fontified t face font-lock-comment-delimiter-face) 2000 2005 (fontified t face font-lock-comment-face) 2005 2009 (fontified t face font-lock-string-face) 2009 2031 (fontified t) 2031 2041 (fontified t face font-lock-builtin-face) 2041 2042 (fontified t) 2042 2072 (fontified t face font-lock-string-face) 2072 2074 (fontified t) 2074 2078 (fontified t face font-lock-string-face) 2078 2087 (fontified t) 2087 2097 (fontified t face font-lock-builtin-face) 2097 2098 (fontified t) 2098 2129 (fontified t face font-lock-string-face) 2129 2132 (fontified t) 2132 2135 (fontified t face font-lock-comment-delimiter-face) 2135 2143 (fontified t face font-lock-comment-face) 2143 2146 (fontified t face font-lock-string-face) 2146 2153 (fontified t) 2153 2163 (fontified t face font-lock-builtin-face) 2163 2164 (fontified t) 2164 2173 (fontified t face font-lock-string-face) 2173 2175 (fontified t) 2175 2179 (fontified t face font-lock-string-face) 2179 2204 (fontified t) 2204 2214 (fontified t face font-lock-builtin-face) 2214 2215 (fontified t) 2215 2217 (fontified t face font-lock-string-face) 2217 2231 (fontified t face font-lock-string-face) 2231 2233 (fontified t) 2233 2237 (fontified t face font-lock-string-face) 2237 2257 (fontified t) 2257 2267 (fontified t face font-lock-builtin-face) 2267 2268 (fontified t) 2268 2278 (fontified t face font-lock-string-face) 2278 2286 (fontified t face font-lock-string-face) 2286 2288 (fontified t) 2288 2292 (fontified t face font-lock-string-face) 2292 2321 (fontified t) 2321 2331 (fontified t face font-lock-builtin-face) 2331 2332 (fontified t) 2332 2354 (fontified t face font-lock-string-face) 2354 2356 (fontified t) 2356 2360 (fontified t face font-lock-string-face) 2360 2380 (fontified t) 2380 2390 (fontified t face font-lock-builtin-face) 2390 2391 (fontified t) 2391 2412 (fontified t face font-lock-string-face) 2412 2414 (fontified t) 2414 2418 (fontified t face font-lock-string-face) 2418 2445 (fontified t) 2445 2455 (fontified t face font-lock-builtin-face) 2455 2456 (fontified t) 2456 2481 (fontified t face font-lock-string-face) 2481 2483 (fontified t) 2483 2487 (fontified t face font-lock-string-face) 2487 2509 (fontified t) 2509 2519 (fontified t face font-lock-builtin-face) 2519 2520 (fontified t) 2520 2532 (fontified t face font-lock-string-face) 2532 2534 (fontified t) 2534 2538 (fontified t face font-lock-string-face) 2538 2556 (fontified t) 2556 2566 (fontified t face font-lock-builtin-face) 2566 2567 (fontified t) 2567 2583 (fontified t face font-lock-string-face) 2583 2585 (fontified t) 2585 2589 (fontified t face font-lock-string-face) 2589 2607 (fontified t) 2607 2617 (fontified t face font-lock-builtin-face) 2617 2618 (fontified t) 2618 2634 (fontified t face font-lock-string-face) 2634 2636 (fontified t) 2636 2640 (fontified t face font-lock-string-face) 2640 2663 (fontified t) 2663 2673 (fontified t face font-lock-builtin-face) 2673 2674 (fontified t) 2674 2695 (fontified t face font-lock-string-face) 2695 2697 (fontified t) 2697 2701 (fontified t face font-lock-string-face) 2701 2739 (fontified t) 2739 2749 (fontified t face font-lock-builtin-face) 2749 2750 (fontified t) 2750 2773 (fontified t face font-lock-string-face) 2773 2775 (fontified t) 2775 2779 (fontified t face font-lock-string-face) 2779 2802 (fontified t) 2802 2812 (fontified t face font-lock-builtin-face) 2812 2813 (fontified t) 2813 2833 (fontified t face font-lock-string-face) 2833 2836 (fontified t) 2836 2838 (fontified t face font-lock-comment-delimiter-face) 2838 2845 (fontified t face font-lock-comment-face) 2845 2849 (fontified t face font-lock-string-face) 2849 2865 (fontified t) 2865 2875 (fontified t face font-lock-builtin-face) 2875 2876 (fontified t) 2876 2891 (fontified t face font-lock-string-face) 2891 2893 (fontified t) 2893 2896 (fontified t face font-lock-comment-delimiter-face) 2896 2904 (fontified t face font-lock-comment-face) 2904 2907 (fontified t face font-lock-string-face) 2907 2914 (fontified t) 2914 2924 (fontified t face font-lock-builtin-face) 2924 2925 (fontified t) 2925 2933 (fontified t face font-lock-string-face) 2933 2935 (fontified t) 2935 2938 (fontified t face font-lock-comment-delimiter-face) 2938 3002 (fontified t face font-lock-comment-face) 3002 3006 (fontified t face font-lock-string-face) 3006 3020 (fontified t) 3020 3030 (fontified t face font-lock-builtin-face) 3030 3031 (fontified t) 3031 3043 (fontified t face font-lock-string-face) 3043 3045 (fontified t) 3045 3049 (fontified t face font-lock-string-face) 3049 3051 (fontified t) 3051 3071 (fontified t) 3071 3081 (face font-lock-builtin-face fontified t) 3081 3082 (fontified t) 3082 3097 (face font-lock-string-face fontified t) 3097 3099 (fontified t) 3099 3103 (fontified t face font-lock-string-face) 3103 3130 (fontified t) 3130 3140 (fontified t face font-lock-builtin-face) 3140 3141 (fontified t) 3141 3154 (fontified t face font-lock-string-face) 3154 3156 (fontified t) 3156 3160 (fontified t face font-lock-string-face) 3160 3189 (fontified t) 3189 3199 (fontified t face font-lock-builtin-face) 3199 3200 (fontified t) 3200 3213 (fontified t face font-lock-string-face) 3213 3215 (fontified t) 3215 3219 (fontified t face font-lock-string-face) 3219 3240 (fontified t) 3240 3250 (fontified t face font-lock-builtin-face) 3250 3251 (fontified t) 3251 3270 (fontified t face font-lock-string-face) 3270 3272 (fontified t) 3272 3276 (fontified t face font-lock-string-face) 3276 3296 (fontified t) 3296 3306 (fontified t face font-lock-builtin-face) 3306 3307 (fontified t) 3307 3325 (fontified t face font-lock-string-face) 3325 3327 (fontified t) 3327 3331 (fontified t face font-lock-string-face) 3331 3351 (fontified t) 3351 3361 (fontified t face font-lock-builtin-face) 3361 3362 (fontified t) 3362 3380 (fontified t face font-lock-string-face) 3380 3382 (fontified t) 3382 3386 (fontified t face font-lock-string-face) 3386 3404 (fontified t) 3404 3414 (fontified t face font-lock-builtin-face) 3414 3415 (fontified t) 3415 3431 (fontified t face font-lock-string-face) 3431 3433 (fontified t) 3433 3437 (fontified t face font-lock-string-face) 3437 3458 (fontified t) 3458 3468 (fontified t face font-lock-builtin-face) 3468 3469 (fontified t) 3469 3480 (fontified t face font-lock-string-face) 3480 3484 (fontified t) 3484 3486 (fontified t face font-lock-comment-delimiter-face) 3486 3546 (fontified t face font-lock-comment-face) 3546 3548 (fontified t) 3548 3551 (fontified t face font-lock-comment-delimiter-face) 3551 3572 (fontified t face font-lock-comment-face) 3572 3573 (fontified t)) . 728) (undo-tree-id2541 . -3572) (undo-tree-id2542 . -3572) (undo-tree-id2543 . -3572) (undo-tree-id2544 . 3573) (undo-tree-id2545 . -1) (undo-tree-id2546 . 27) (undo-tree-id2547 . -3547) (t 25306 58259 323148 216000)) nil (25306 58346 293376 591000) 0 nil])
([nil nil ((#("  
;; All-mode keymaps
(general-def
  :keymaps 'override

  ;; Emacs --------
  ;;\"M-x\" 'consult-M-x
  \"ß\" 'evil-window-next ;; option-s
  \"Í\" 'other-frame ;; option-shift-s
  \"C-S-B\" 'consult-switch-buffer
  \"∫\" 'consult-switch-buffer ;; option-b

  ;; Remapping normal help features to use Consult version
  \"C-h v\" 'consult-describe-variable
  \"C-h o\" 'consult-describe-symbol
  \"C-h f\" 'consult-describe-function
  \"C-h F\" 'consult-describe-face

  ;; Editing ------
  \"M-v\" 'simpleclip-paste
  \"M-V\" 'evil-paste-after ;; shift-paste uses the internal clipboard
  \"M-c\" 'simpleclip-copy
  \"M-u\" 'capitalize-dwim ;; Default is upcase-dwim
  \"M-U\" 'upcase-dwim ;; M-S-u (switch upcase and capitalize)
  ;;\"M-z\" 'undo-fu-only-undo				
  ;;\"M-S\" 'undo-fu-only-redo

  ;; Utility ------
  \"C-c c\" 'org-capture
  \"C-c a\" 'org-agenda
  \"C-s\" 'swiper ;; Large files will use grep (faster)
  \"s-\\\"\" 'ispell-word ;; that's super-shift-'
  ;; \"M-+\" 'jib/calc-speaking-time
  \"C-'\" 'avy-goto-char-2

  \"C-x C-b\" 'bufler-list

  ;; super-number functions
  \"s-1\" 'mw-thesaurus-lookup-dwim
  \"s-!\" 'mw-thesaurus-lookup
  \"s-2\" 'ispell-buffer
  \"s-3\" 'revert-buffer
  ;; \"s-4\" '(lambda () (interactive) (consult-file-jump nil jib/dropbox))
  ;; \"s-5\" '(lambda () (interactive) (consult-rg nil jib/dropbox))
  \"s-6\" 'org-capture
  )

(general-def
 :keymaps 'emacs
  \"C-w C-q\" 'kill-this-buffer
 )


;; Non-insert mode keymaps
(general-def
  :states '(normal visual motion)
  \"u\" 'undo
  \"j\" 'evil-next-visual-line ;; I prefer visual line navigation
  \"k\" 'evil-previous-visual-line ;; \"\"
  \"|\" '(lambda () (interactive) (org-agenda nil \"k\")) ;; Opens my n custom org-super-agenda view
  \"C-|\" '(lambda () (interactive) (org-agenda nil \"j\")) ;; Opens my m custom org-super-agenda view
 \"gc\" '(evilnc-comment-operator :which-key \"commentator\")
  )

;; Insert keymaps
;; Many of these are emulating standard Emacs bindings in Evil insert mode, such as C-a, or C-e.
(general-def
  :states '(insert)
  \"C-a\" 'evil-beginning-of-visual-line
  \"C-e\" 'evil-end-of-visual-line
  \"C-S-a\" 'evil-beginning-of-line
  \"C-S-e\" 'evil-end-of-line
  \"C-n\" 'evil-next-visual-line
  \"C-p\" 'evil-previous-visual-line
  )

" 0 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t face font-lock-comment-delimiter-face) 6 23 (fontified t face font-lock-comment-face) 23 24 (fontified t) 24 35 (fontified t face font-lock-keyword-face) 35 38 (fontified t) 38 46 (fontified t face font-lock-builtin-face) 46 60 (fontified t) 60 63 (fontified t face font-lock-comment-delimiter-face) 63 78 (fontified t face font-lock-comment-face) 78 80 (fontified t) 80 82 (fontified t face font-lock-comment-delimiter-face) 82 101 (fontified t face font-lock-comment-face) 101 103 (fontified t) 103 106 (fontified t face font-lock-string-face) 106 125 (fontified t) 125 128 (fontified t face font-lock-comment-delimiter-face) 128 137 (fontified t face font-lock-comment-face) 137 139 (fontified t) 139 142 (fontified t face font-lock-string-face) 142 156 (fontified t) 156 159 (fontified t face font-lock-comment-delimiter-face) 159 163 (fontified t face font-lock-comment-face) 163 174 (fontified t face font-lock-comment-face) 174 176 (fontified t) 176 183 (fontified t face font-lock-string-face) 183 209 (fontified t) 209 212 (fontified t face font-lock-string-face) 212 236 (fontified t) 236 239 (fontified t face font-lock-comment-delimiter-face) 239 248 (fontified t face font-lock-comment-face) 248 251 (fontified t) 251 254 (fontified t face font-lock-comment-delimiter-face) 254 308 (fontified t face font-lock-comment-face) 308 310 (fontified t) 310 317 (fontified t face font-lock-string-face) 317 347 (fontified t) 347 354 (fontified t face font-lock-string-face) 354 382 (fontified t) 382 389 (fontified t face font-lock-string-face) 389 419 (fontified t) 419 426 (fontified t face font-lock-string-face) 426 453 (fontified t) 453 456 (fontified t face font-lock-comment-delimiter-face) 456 471 (fontified t face font-lock-comment-face) 471 473 (fontified t) 473 478 (fontified t face font-lock-string-face) 478 499 (fontified t) 499 504 (fontified t face font-lock-string-face) 504 523 (fontified t) 523 526 (fontified t face font-lock-comment-delimiter-face) 526 566 (fontified t face font-lock-comment-face) 566 568 (fontified t) 568 573 (fontified t face font-lock-string-face) 573 593 (fontified t) 593 598 (fontified t face font-lock-string-face) 598 616 (fontified t) 616 619 (fontified t face font-lock-comment-delimiter-face) 619 642 (fontified t face font-lock-comment-face) 642 644 (fontified t) 644 649 (fontified t face font-lock-string-face) 649 663 (fontified t) 663 666 (fontified t face font-lock-comment-delimiter-face) 666 703 (fontified t face font-lock-comment-face) 703 705 (fontified t) 705 707 (fontified t face font-lock-comment-delimiter-face) 707 736 (fontified t face font-lock-comment-face) 736 738 (fontified t) 738 740 (fontified t face font-lock-comment-delimiter-face) 740 765 (fontified t face font-lock-comment-face) 765 768 (fontified t) 768 771 (fontified t face font-lock-comment-delimiter-face) 771 786 (fontified t face font-lock-comment-face) 786 788 (fontified t) 788 795 (fontified t face font-lock-string-face) 795 811 (fontified t) 811 818 (fontified t face font-lock-string-face) 818 833 (fontified t) 833 838 (fontified t face font-lock-string-face) 838 847 (fontified t) 847 850 (fontified t face font-lock-comment-delimiter-face) 850 885 (fontified t face font-lock-comment-face) 885 887 (fontified t) 887 893 (fontified t face font-lock-string-face) 893 907 (fontified t) 907 910 (fontified t face font-lock-comment-delimiter-face) 910 931 (fontified t face font-lock-comment-face) 931 933 (fontified t) 933 936 (fontified t face font-lock-comment-delimiter-face) 936 966 (fontified t face font-lock-comment-face) 966 968 (fontified t) 968 973 (fontified t face font-lock-string-face) 973 994 (fontified t) 994 1003 (fontified t face font-lock-string-face) 1003 1020 (fontified t) 1020 1023 (fontified t face font-lock-comment-delimiter-face) 1023 1029 (fontified t face font-lock-comment-face) 1029 1046 (fontified t face font-lock-comment-face) 1046 1048 (fontified t) 1048 1053 (fontified t face font-lock-string-face) 1053 1082 (fontified t) 1082 1087 (fontified t face font-lock-string-face) 1087 1111 (fontified t) 1111 1116 (fontified t face font-lock-string-face) 1116 1134 (fontified t) 1134 1139 (fontified t face font-lock-string-face) 1139 1157 (fontified t) 1157 1160 (fontified t face font-lock-comment-delimiter-face) 1160 1229 (fontified t face font-lock-comment-face) 1229 1231 (fontified t) 1231 1234 (fontified t face font-lock-comment-delimiter-face) 1234 1296 (fontified t face font-lock-comment-face) 1296 1298 (fontified t) 1298 1303 (fontified t face font-lock-string-face) 1303 1323 (fontified t) 1323 1334 (fontified t face font-lock-keyword-face) 1334 1336 (fontified t) 1336 1344 (fontified t face font-lock-builtin-face) 1344 1354 (fontified t) 1354 1363 (fontified t face font-lock-string-face) 1363 1387 (fontified t) 1387 1390 (fontified t face font-lock-comment-delimiter-face) 1390 1414 (fontified t face font-lock-comment-face) 1414 1415 (fontified t) 1415 1426 (fontified t face font-lock-keyword-face) 1426 1429 (fontified t) 1429 1436 (fontified t face font-lock-builtin-face) 1436 1463 (fontified t) 1463 1466 (fontified t face font-lock-string-face) 1466 1475 (fontified t) 1475 1478 (fontified t face font-lock-string-face) 1478 1502 (fontified t) 1502 1503 (fontified t face font-lock-comment-delimiter-face) 1503 1505 (fontified t face font-lock-comment-delimiter-face) 1505 1523 (fontified t face font-lock-comment-face) 1523 1537 (face font-lock-comment-face fontified t) 1537 1539 (fontified t) 1539 1542 (fontified t face font-lock-string-face) 1542 1570 (fontified t) 1570 1573 (fontified t face font-lock-comment-delimiter-face) 1573 1576 (fontified t face font-lock-comment-face) 1576 1578 (fontified t) 1578 1581 (fontified t face font-lock-string-face) 1581 1595 (fontified t) 1595 1606 (fontified t face font-lock-keyword-face) 1606 1624 (fontified t) 1624 1627 (fontified t face font-lock-string-face) 1627 1630 (fontified t) 1630 1633 (fontified t face font-lock-comment-delimiter-face) 1633 1673 (fontified t face font-lock-comment-face) 1673 1674 (fontified t) 1674 1675 (fontified t) 1675 1680 (fontified t face font-lock-string-face) 1680 1694 (fontified t) 1694 1705 (fontified t face font-lock-keyword-face) 1705 1723 (fontified t) 1723 1726 (fontified t face font-lock-string-face) 1726 1729 (fontified t) 1729 1732 (fontified t face font-lock-comment-delimiter-face) 1732 1772 (fontified t face font-lock-comment-face) 1772 1773 (fontified t) 1773 1777 (fontified t face font-lock-string-face) 1777 1804 (fontified t) 1804 1814 (fontified t face font-lock-builtin-face) 1814 1815 (fontified t) 1815 1828 (fontified t face font-lock-string-face) 1828 1835 (fontified t) 1835 1838 (fontified t face font-lock-comment-delimiter-face) 1838 1853 (fontified t face font-lock-comment-face) 1853 1856 (fontified t face font-lock-comment-delimiter-face) 1856 1950 (fontified t face font-lock-comment-face) 1950 1951 (fontified t) 1951 1962 (fontified t face font-lock-keyword-face) 1962 1965 (fontified t) 1965 1972 (fontified t face font-lock-builtin-face) 1972 1985 (fontified t) 1985 1990 (fontified t face font-lock-string-face) 1990 2024 (fontified t) 2024 2029 (fontified t face font-lock-string-face) 2029 2057 (fontified t) 2057 2064 (fontified t face font-lock-string-face) 2064 2091 (fontified t) 2091 2098 (fontified t face font-lock-string-face) 2098 2119 (fontified t) 2119 2124 (fontified t face font-lock-string-face) 2124 2150 (fontified t) 2150 2155 (fontified t face font-lock-string-face) 2155 2188 (fontified t)) . 725) (undo-tree-id2534 . -2187) (undo-tree-id2535 . -2187) (undo-tree-id2536 . -992) (undo-tree-id2537 . -3) (undo-tree-id2538 . -2187) (undo-tree-id2539 . -2187) (undo-tree-id2540 . -831) 2912) nil (25306 58346 293436 405000) 0 nil])
([nil nil ((724 . 725) 723) nil (25306 58357 101062 732000) 0 nil] [nil nil ((#("a
  :defer t)" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t) 2 4 (fontified t) 4 10 (fontified t face font-lock-builtin-face) 10 13 (fontified t)) . 742) (undo-tree-id2529 . -12) (undo-tree-id2530 . -12) (undo-tree-id2531 . -12) (undo-tree-id2532 . -12) (undo-tree-id2533 . -12)) ((742 . 755)) (25306 58346 293362 838000) 0 nil])
([nil nil ((#("
(use-package hydra
  :defer t)

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 18 (fontified t face font-lock-constant-face) 18 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 22 (fontified t) 22 28 (fontified t face font-lock-builtin-face) 28 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t)) . 725) (undo-tree-id2805 . -32) (undo-tree-id2806 . -32) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -32) (undo-tree-id2814 . -1) (undo-tree-id2815 . 33) (undo-tree-id2816 . -32) 757) nil (25306 58357 101061 539000) 0 nil])
nil
([nil nil ((#(";; WIP
(defhydra jb-hydra-variable-fonts (:pre (mixed-pitch-mode 0)
                                     :post (mixed-pitch-mode 1))
  (\"t\" (set-face-attribute 'variable-pitch nil :family \"Times New Roman\" :height 160) \"Times New Roman\")
  (\"g\" (set-face-attribute 'variable-pitch nil :family \"EB Garamond\" :height 160 :weight 'normal) \"EB Garamond\")
  ;; (\"r\" (set-face-attribute 'variable-pitch nil :font \"Roboto\" :weight 'medium :height 160) \"Roboto\")
  (\"n\" (set-face-attribute 'variable-pitch nil :slant 'normal :weight 'normal :height 160 :width 'normal :foundry \"nil\" :family \"Nunito\") \"Nunito\")
  )
;; I think I need to initialize windresize to use its commands
;;(windresize)
;;(windresize-exit)

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face ((:inherit hl-todo :foreground "#1E90FF") font-lock-comment-face)) 6 7 (fontified t face font-lock-comment-face) 7 8 (fontified t) 8 16 (fontified t face font-lock-keyword-face) 16 42 (fontified t) 42 46 (fontified t face font-lock-builtin-face) 46 105 (fontified t) 105 110 (fontified t face font-lock-builtin-face) 110 136 (fontified t) 136 139 (fontified t face font-lock-string-face) 139 180 (fontified t) 180 187 (fontified t face font-lock-builtin-face) 187 188 (fontified t) 188 205 (fontified t face font-lock-string-face) 205 206 (fontified t) 206 213 (fontified t face font-lock-builtin-face) 213 219 (fontified t) 219 236 (fontified t face font-lock-string-face) 236 241 (fontified t) 241 244 (fontified t face font-lock-string-face) 244 285 (fontified t) 285 292 (fontified t face font-lock-builtin-face) 292 293 (fontified t) 293 306 (fontified t face font-lock-string-face) 306 307 (fontified t) 307 314 (fontified t face font-lock-builtin-face) 314 319 (fontified t) 319 326 (fontified t face font-lock-builtin-face) 326 336 (fontified t) 336 349 (fontified t face font-lock-string-face) 349 353 (fontified t) 353 356 (fontified t face font-lock-comment-delimiter-face) 356 455 (fontified t face font-lock-comment-face) 455 458 (fontified t) 458 461 (fontified t face font-lock-string-face) 461 502 (fontified t) 502 508 (fontified t face font-lock-builtin-face) 508 517 (fontified t) 517 524 (fontified t face font-lock-builtin-face) 524 533 (fontified t) 533 540 (fontified t face font-lock-builtin-face) 540 545 (fontified t) 545 551 (fontified t face font-lock-builtin-face) 551 560 (fontified t) 560 568 (fontified t face font-lock-builtin-face) 568 569 (fontified t) 569 574 (fontified t face font-lock-string-face) 574 575 (fontified t) 575 582 (fontified t face font-lock-builtin-face) 582 583 (fontified t) 583 591 (fontified t face font-lock-string-face) 591 593 (fontified t) 593 601 (fontified t face font-lock-string-face) 601 607 (fontified t) 607 610 (fontified t face font-lock-comment-delimiter-face) 610 670 (fontified t face font-lock-comment-face) 670 672 (fontified t face font-lock-comment-delimiter-face) 672 685 (fontified t face font-lock-comment-face) 685 687 (fontified t face font-lock-comment-delimiter-face) 687 705 (fontified t face font-lock-comment-face) 705 706 (fontified t)) . 809) (undo-tree-id2548 . -705) (undo-tree-id2549 . -705) (undo-tree-id2550 . -705) (undo-tree-id2551 . -7) (undo-tree-id2552 . -7) (undo-tree-id2553 . -7) (undo-tree-id2554 . -7) (undo-tree-id2555 . -7) (undo-tree-id2556 . -7) (undo-tree-id2557 . -7) (undo-tree-id2558 . -7) (undo-tree-id2559 . -7) (undo-tree-id2560 . -7) (undo-tree-id2561 . -7) (undo-tree-id2562 . -7) (undo-tree-id2563 . -7) (undo-tree-id2564 . -7) (undo-tree-id2565 . -7) (undo-tree-id2566 . -7) (undo-tree-id2567 . -7) (undo-tree-id2568 . -7) (undo-tree-id2569 . -7) (undo-tree-id2570 . -7) (undo-tree-id2571 . -7) (undo-tree-id2572 . -7) (undo-tree-id2573 . -7) (undo-tree-id2574 . -7) (undo-tree-id2575 . -7) (undo-tree-id2576 . -7) (undo-tree-id2577 . -7) (undo-tree-id2578 . -7) (undo-tree-id2579 . -7) (undo-tree-id2580 . -7) (undo-tree-id2581 . -68) (undo-tree-id2582 . -68) (undo-tree-id2583 . -68) (undo-tree-id2584 . -68) (undo-tree-id2585 . -68) (undo-tree-id2586 . -68) (undo-tree-id2587 . -68) (undo-tree-id2588 . -68) (undo-tree-id2589 . -68) (undo-tree-id2590 . -68) (undo-tree-id2591 . -133) (undo-tree-id2592 . -133) (undo-tree-id2593 . -133) (undo-tree-id2594 . -133) (undo-tree-id2595 . -133) (undo-tree-id2596 . -133) (undo-tree-id2597 . -133) (undo-tree-id2598 . -133) (undo-tree-id2599 . -133) (undo-tree-id2600 . -133) (undo-tree-id2601 . -238) (undo-tree-id2602 . -238) (undo-tree-id2603 . -238) (undo-tree-id2604 . -238) (undo-tree-id2605 . -238) (undo-tree-id2606 . -238) (undo-tree-id2607 . -238) (undo-tree-id2608 . -238) (undo-tree-id2609 . -238) (undo-tree-id2610 . -238) (undo-tree-id2611 . -351) (undo-tree-id2612 . -351) (undo-tree-id2613 . -351) (undo-tree-id2614 . -351) (undo-tree-id2615 . -351) (undo-tree-id2616 . -238) (undo-tree-id2617 . -238) (undo-tree-id2618 . -238) (undo-tree-id2619 . -238) (undo-tree-id2620 . -238) (undo-tree-id2621 . -238) (undo-tree-id2622 . -238) (undo-tree-id2623 . -238) (undo-tree-id2624 . -238) (undo-tree-id2625 . -238) (undo-tree-id2626 . -133) (undo-tree-id2627 . -133) (undo-tree-id2628 . -133) (undo-tree-id2629 . -133) (undo-tree-id2630 . -133) (undo-tree-id2631 . -133) (undo-tree-id2632 . -133) (undo-tree-id2633 . -133) (undo-tree-id2634 . -133) (undo-tree-id2635 . -133) (undo-tree-id2636 . -68) (undo-tree-id2637 . -68) (undo-tree-id2638 . -68) (undo-tree-id2639 . -68) (undo-tree-id2640 . -68) (undo-tree-id2641 . -68) (undo-tree-id2642 . -68) (undo-tree-id2643 . -68) (undo-tree-id2644 . -68) (undo-tree-id2645 . -68) (undo-tree-id2646 . -7) (undo-tree-id2647 . -7) (undo-tree-id2648 . -7) (undo-tree-id2649 . -7) (undo-tree-id2650 . -7) (undo-tree-id2651 . -7) (undo-tree-id2652 . -7) (undo-tree-id2653 . -7) (undo-tree-id2654 . -7) (undo-tree-id2655 . -7) (undo-tree-id2656 . -706) (undo-tree-id2657 . -705) (undo-tree-id2658 . -7) (undo-tree-id2659 . -7) (undo-tree-id2660 . -7) (undo-tree-id2661 . -7) (undo-tree-id2662 . -7) (undo-tree-id2663 . -7) (undo-tree-id2664 . -7) (undo-tree-id2665 . -7) (undo-tree-id2666 . -7) (undo-tree-id2667 . -7) (undo-tree-id2668 . -7) (undo-tree-id2669 . -7) (undo-tree-id2670 . -7) (undo-tree-id2671 . -7) (undo-tree-id2672 . -7) (undo-tree-id2673 . -7) (undo-tree-id2674 . -7) (undo-tree-id2675 . -7) (undo-tree-id2676 . -7) (undo-tree-id2677 . -7) (undo-tree-id2678 . -7) (undo-tree-id2679 . -7) (undo-tree-id2680 . -7) (undo-tree-id2681 . -7) (undo-tree-id2682 . -7) (undo-tree-id2683 . -7) (undo-tree-id2684 . -7) (undo-tree-id2685 . -7) (undo-tree-id2686 . -7) (undo-tree-id2687 . -7) (undo-tree-id2688 . -68) (undo-tree-id2689 . -68) (undo-tree-id2690 . -68) (undo-tree-id2691 . -68) (undo-tree-id2692 . -68) (undo-tree-id2693 . -133) (undo-tree-id2694 . -133) (undo-tree-id2695 . -133) (undo-tree-id2696 . -133) (undo-tree-id2697 . -133) (undo-tree-id2698 . -238) (undo-tree-id2699 . -238) (undo-tree-id2700 . -238) (undo-tree-id2701 . -238) (undo-tree-id2702 . -238) (undo-tree-id2703 . -351) (undo-tree-id2704 . -351) (undo-tree-id2705 . -351) (undo-tree-id2706 . -351) (undo-tree-id2707 . -351) (undo-tree-id2708 . -455) (undo-tree-id2709 . -455) (undo-tree-id2710 . -455) (undo-tree-id2711 . -455) (undo-tree-id2712 . -455) (undo-tree-id2713 . -603) (undo-tree-id2714 . -603) (undo-tree-id2715 . -603) (undo-tree-id2716 . -603) (undo-tree-id2717 . -603) (undo-tree-id2718 . -607) (undo-tree-id2719 . -607) (undo-tree-id2720 . -607) (undo-tree-id2721 . -607) (undo-tree-id2722 . -607) (undo-tree-id2723 . -670) (undo-tree-id2724 . -670) (undo-tree-id2725 . -670) (undo-tree-id2726 . -670) (undo-tree-id2727 . -670) (undo-tree-id2728 . -685) (undo-tree-id2729 . -685) (undo-tree-id2730 . -685) (undo-tree-id2731 . -685) (undo-tree-id2732 . -685) (undo-tree-id2733 . -705) (undo-tree-id2734 . -705) (undo-tree-id2735 . -705) (undo-tree-id2736 . -705) (undo-tree-id2737 . -705) (undo-tree-id2738 . -706) (undo-tree-id2739 . -706) (undo-tree-id2740 . -706) (undo-tree-id2741 . -706) (undo-tree-id2742 . -706) (undo-tree-id2743 . -706) (undo-tree-id2744 . -706) (undo-tree-id2745 . -706) (undo-tree-id2746 . -706) (undo-tree-id2747 . -706) (undo-tree-id2748 . -706) (undo-tree-id2749 . -706) (undo-tree-id2750 . -706) (undo-tree-id2751 . -706) (undo-tree-id2752 . -706) (undo-tree-id2753 . -705) (undo-tree-id2754 . -705) (undo-tree-id2755 . -705) (undo-tree-id2756 . -705) (undo-tree-id2757 . -705) (undo-tree-id2758 . -705) (undo-tree-id2759 . -705) (undo-tree-id2760 . -705) (undo-tree-id2761 . -705) (undo-tree-id2762 . -705) (undo-tree-id2763 . -705) (undo-tree-id2764 . -705) (undo-tree-id2765 . -705) (undo-tree-id2766 . -705) (undo-tree-id2767 . -705) (undo-tree-id2768 . -685) (undo-tree-id2769 . -685) (undo-tree-id2770 . -685) (undo-tree-id2771 . -685) (undo-tree-id2772 . -685) (undo-tree-id2773 . -685) (undo-tree-id2774 . -685) (undo-tree-id2775 . -685) (undo-tree-id2776 . -685) (undo-tree-id2777 . -685) (undo-tree-id2778 . -685) (undo-tree-id2779 . -685) (undo-tree-id2780 . -685) (undo-tree-id2781 . -685) (undo-tree-id2782 . -685) (undo-tree-id2783 . -685) (undo-tree-id2784 . -685) (undo-tree-id2785 . -685) (undo-tree-id2786 . -685) (undo-tree-id2787 . -685) (undo-tree-id2788 . -705) (undo-tree-id2789 . -705) (undo-tree-id2790 . -705) (undo-tree-id2791 . -705) (undo-tree-id2792 . -705) (undo-tree-id2793 . -705) (undo-tree-id2794 . -705) (undo-tree-id2795 . -705) (undo-tree-id2796 . -705) (undo-tree-id2797 . -705) (undo-tree-id2798 . -705) (undo-tree-id2799 . -705) (undo-tree-id2800 . -705) (undo-tree-id2801 . -705) (undo-tree-id2802 . -705) (undo-tree-id2803 . -705) (undo-tree-id2804 . -705) 1514) nil (25306 58357 101046 139000) 0 nil])
([nil nil ((#("(use-package windresize)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 23 (fontified t face font-lock-constant-face) 23 25 (fontified t)) . 809) (undo-tree-id2817 . 25) (undo-tree-id2818 . -25) (undo-tree-id2819 . -25) (undo-tree-id2820 . -25) (undo-tree-id2821 . -25) (undo-tree-id2822 . -25) (undo-tree-id2823 . -25) (undo-tree-id2824 . -25) (undo-tree-id2825 . -25) (undo-tree-id2826 . -25) (undo-tree-id2827 . -25) (undo-tree-id2828 . -25) (undo-tree-id2829 . -25) (undo-tree-id2830 . -25) (undo-tree-id2831 . -25) (undo-tree-id2832 . -25) (undo-tree-id2833 . 25) (undo-tree-id2834 . -1) (undo-tree-id2835 . 2) (undo-tree-id2836 . -24) (t 25306 58357 119811 413000)) nil (25306 58360 172401 410000) 0 nil])
([nil nil ((#(";;; Code:
;; This Hydra lets me swich between variable pitch fonts. It turns off mixed-pitch 
;;stolen from jakebox
;; All-in-one window managment. Makes use of some custom functions,
;; `ace-window' (for swapping), `windmove' (could probably be replaced
;; by evil?) and `windresize'.
;; inspired by https://github.com/jmercouris/configuration/blob/master/.emacs.d/hydra.el#L86
(defhydra a3madkour-hydra-window (:hint nil)
   \"
Movement      ^Split^            ^Switch^        ^Resize^
----------------------------------------------------------------
_M-<left>_  <   _/_ vertical      _b_uffer        _<left>_  <
_M-<right>_ >   _-_ horizontal    _f_ind file     _<down>_  ↓
_M-<up>_    ↑   _m_aximize        _s_wap          _<up>_    ↑
_M-<down>_  ↓   _c_lose           _[_backward     _<right>_ >
_q_uit          _e_qualize        _]_forward     ^
^               ^               _K_ill         ^
^               ^                  ^             ^
\"
   ;; Movement
   (\"M-<left>\" windmove-left)
   (\"M-<down>\" windmove-down)
   (\"M-<up>\" windmove-up)
   (\"M-<right>\" windmove-right)

   ;; Split/manage
   (\"-\" split-window-vertically)
   (\"/\" split-window-horizontally)
   (\"c\" evil-window-delete)

   (\"m\" delete-other-windows)
   (\"e\" balance-windows)

   ;; Switch
   (\"b\" consult-switch-buffer)
   (\"f\" consult-find-file)
   (\"P\" project-find-file)
   (\"s\" ace-swap-window)
   (\"[\" previous-buffer)
   (\"]\" next-buffer)
   (\"K\" kill-this-buffer)

   ;; Resize
   (\"<left>\" windresize-left)
   (\"<right>\" windresize-right)
   (\"<down>\" windresize-down)
   (\"<up>\" windresize-up)


   (\"q\" nil))

" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 9 (fontified t face font-lock-comment-face) 9 10 (fontified t face font-lock-comment-face) 10 13 (fontified t face font-lock-comment-delimiter-face) 13 94 (fontified t face font-lock-comment-face) 94 96 (fontified t face font-lock-comment-delimiter-face) 96 115 (fontified t face font-lock-comment-face) 115 116 (fontified t face font-lock-comment-face) 116 119 (fontified t face font-lock-comment-delimiter-face) 119 184 (fontified t face font-lock-comment-face) 184 187 (fontified t face font-lock-comment-delimiter-face) 187 188 (fontified t face font-lock-comment-face) 188 198 (fontified t face (font-lock-constant-face font-lock-comment-face)) 198 217 (fontified t face font-lock-comment-face) 217 225 (fontified t face (font-lock-constant-face font-lock-comment-face)) 225 255 (fontified t face font-lock-comment-face) 255 258 (fontified t face font-lock-comment-delimiter-face) 258 273 (fontified t face font-lock-comment-face) 273 283 (fontified t face (font-lock-constant-face font-lock-comment-face)) 283 286 (fontified t face font-lock-comment-face) 286 289 (fontified t face font-lock-comment-delimiter-face) 289 331 (fontified t face font-lock-comment-face) 331 379 (fontified t face font-lock-comment-face) 379 380 (fontified t) 380 388 (fontified t face font-lock-keyword-face) 388 413 (fontified t) 413 418 (fontified t face font-lock-builtin-face) 418 427 (fontified t) 427 766 (fontified t face font-lock-doc-face) 766 800 (fontified t face font-lock-doc-face) 800 863 (fontified t face font-lock-doc-face) 863 900 (fontified t face font-lock-doc-face) 900 952 (fontified t face font-lock-doc-face) 952 956 (fontified t) 956 959 (fontified t face font-lock-comment-delimiter-face) 959 968 (fontified t face font-lock-comment-face) 968 972 (fontified t) 972 982 (fontified t face font-lock-string-face) 982 1002 (fontified t) 1002 1012 (fontified t face font-lock-string-face) 1012 1032 (fontified t) 1032 1040 (fontified t face font-lock-string-face) 1040 1058 (fontified t) 1058 1069 (fontified t face font-lock-string-face) 1069 1090 (fontified t) 1090 1093 (fontified t face font-lock-comment-delimiter-face) 1093 1106 (fontified t face font-lock-comment-face) 1106 1110 (fontified t) 1110 1113 (fontified t face font-lock-string-face) 1113 1143 (fontified t) 1143 1146 (fontified t face font-lock-string-face) 1146 1178 (fontified t) 1178 1181 (fontified t face font-lock-string-face) 1181 1207 (fontified t) 1207 1210 (fontified t face font-lock-string-face) 1210 1237 (fontified t) 1237 1240 (fontified t face font-lock-string-face) 1240 1262 (fontified t) 1262 1265 (fontified t face font-lock-comment-delimiter-face) 1265 1272 (fontified t face font-lock-comment-face) 1272 1276 (fontified t) 1276 1279 (fontified t face font-lock-string-face) 1279 1307 (fontified t) 1307 1310 (fontified t face font-lock-string-face) 1310 1334 (fontified t) 1334 1337 (fontified t face font-lock-string-face) 1337 1361 (fontified t) 1361 1364 (fontified t face font-lock-string-face) 1364 1386 (fontified t) 1386 1389 (fontified t face font-lock-string-face) 1389 1411 (fontified t) 1411 1414 (fontified t face font-lock-string-face) 1414 1432 (fontified t) 1432 1435 (fontified t face font-lock-string-face) 1435 1458 (fontified t) 1458 1461 (fontified t face font-lock-comment-delimiter-face) 1461 1468 (fontified t face font-lock-comment-face) 1468 1472 (fontified t) 1472 1480 (fontified t face font-lock-string-face) 1480 1502 (fontified t) 1502 1511 (fontified t face font-lock-string-face) 1511 1534 (fontified t) 1534 1542 (fontified t face font-lock-string-face) 1542 1564 (fontified t) 1564 1570 (fontified t face font-lock-string-face) 1570 1592 (fontified t) 1592 1594 (fontified t face font-lock-string-face) 1594 1595 (fontified t face font-lock-string-face) 1595 1602 (fontified t) 1602 1603 (fontified t)) . 715) (undo-tree-id2837 . -1602) (undo-tree-id2838 . -1602) (undo-tree-id2839 . -10) (undo-tree-id2840 . -10) (undo-tree-id2841 . -10) (undo-tree-id2842 . -10) (undo-tree-id2843 . -10) (undo-tree-id2844 . -10) (undo-tree-id2845 . -379) (undo-tree-id2846 . -10) (undo-tree-id2847 . -1602) (undo-tree-id2848 . -10) (undo-tree-id2849 . 1593) (undo-tree-id2850 . -94) (undo-tree-id2851 . -94) (undo-tree-id2852 . -94) (undo-tree-id2853 . -94) (undo-tree-id2854 . -94) (undo-tree-id2855 . -94) (undo-tree-id2856 . -94) (undo-tree-id2857 . -94) (undo-tree-id2858 . -94) (undo-tree-id2859 . -94) (undo-tree-id2860 . -94) (undo-tree-id2861 . -94) (undo-tree-id2862 . -94) (undo-tree-id2863 . -94) (undo-tree-id2864 . -94) (undo-tree-id2865 . -94) (undo-tree-id2866 . -115) (undo-tree-id2867 . -10) (undo-tree-id2868 . -10) (undo-tree-id2869 . -10) (undo-tree-id2870 . -10) (undo-tree-id2871 . -10) (undo-tree-id2872 . -10) (undo-tree-id2873 . -10) (undo-tree-id2874 . -10) (undo-tree-id2875 . -10) (undo-tree-id2876 . -10) (undo-tree-id2877 . -94) (undo-tree-id2878 . -94) (undo-tree-id2879 . -94) (undo-tree-id2880 . -94) (undo-tree-id2881 . -94) (undo-tree-id2882 . -94) (undo-tree-id2883 . -94) (undo-tree-id2884 . -94) (undo-tree-id2885 . -94) (undo-tree-id2886 . -94) (undo-tree-id2887 . -116) (undo-tree-id2888 . -116) (undo-tree-id2889 . -116) (undo-tree-id2890 . -116) (undo-tree-id2891 . -116) (undo-tree-id2892 . -116) (undo-tree-id2893 . -116) (undo-tree-id2894 . -116) (undo-tree-id2895 . -116) (undo-tree-id2896 . -116) (undo-tree-id2897 . -184) (undo-tree-id2898 . -184) (undo-tree-id2899 . -184) (undo-tree-id2900 . -184) (undo-tree-id2901 . -184) (undo-tree-id2902 . -184) (undo-tree-id2903 . -184) (undo-tree-id2904 . -184) (undo-tree-id2905 . -184) (undo-tree-id2906 . -184) (undo-tree-id2907 . -184) (undo-tree-id2908 . -184) (undo-tree-id2909 . -184) (undo-tree-id2910 . -184) (undo-tree-id2911 . -184) (undo-tree-id2912 . -184) (undo-tree-id2913 . -184) (undo-tree-id2914 . -184) (undo-tree-id2915 . -184) (undo-tree-id2916 . -184) (undo-tree-id2917 . -255) (undo-tree-id2918 . -255) (undo-tree-id2919 . -255) (undo-tree-id2920 . -255) (undo-tree-id2921 . -255) (undo-tree-id2922 . -286) (undo-tree-id2923 . -286) (undo-tree-id2924 . -286) (undo-tree-id2925 . -286) (undo-tree-id2926 . -286) (undo-tree-id2927 . -379) (undo-tree-id2928 . -379) (undo-tree-id2929 . -379) (undo-tree-id2930 . -379) (undo-tree-id2931 . -379) (undo-tree-id2932 . -424) (undo-tree-id2933 . -424) (undo-tree-id2934 . -424) (undo-tree-id2935 . -424) (undo-tree-id2936 . -424) (undo-tree-id2937 . -379) (undo-tree-id2938 . -379) (undo-tree-id2939 . -379) (undo-tree-id2940 . -379) (undo-tree-id2941 . -379) (undo-tree-id2942 . -379) (undo-tree-id2943 . -379) (undo-tree-id2944 . -379) (undo-tree-id2945 . -379) (undo-tree-id2946 . -379) (undo-tree-id2947 . -286) (undo-tree-id2948 . -286) (undo-tree-id2949 . -286) (undo-tree-id2950 . -286) (undo-tree-id2951 . -286) (undo-tree-id2952 . -286) (undo-tree-id2953 . -286) (undo-tree-id2954 . -286) (undo-tree-id2955 . -286) (undo-tree-id2956 . -286) (undo-tree-id2957 . -255) (undo-tree-id2958 . -255) (undo-tree-id2959 . -255) (undo-tree-id2960 . -255) (undo-tree-id2961 . -255) (undo-tree-id2962 . -255) (undo-tree-id2963 . -255) (undo-tree-id2964 . -255) (undo-tree-id2965 . -255) (undo-tree-id2966 . -255) (undo-tree-id2967 . -184) (undo-tree-id2968 . -184) (undo-tree-id2969 . -184) (undo-tree-id2970 . -184) (undo-tree-id2971 . -184) (undo-tree-id2972 . -184) (undo-tree-id2973 . -184) (undo-tree-id2974 . -184) (undo-tree-id2975 . -184) (undo-tree-id2976 . -184) (undo-tree-id2977 . -116) (undo-tree-id2978 . -116) (undo-tree-id2979 . -116) (undo-tree-id2980 . -116) (undo-tree-id2981 . -116) (undo-tree-id2982 . -116) (undo-tree-id2983 . -116) (undo-tree-id2984 . -116) (undo-tree-id2985 . -116) (undo-tree-id2986 . -116) (undo-tree-id2987 . -94) (undo-tree-id2988 . -94) (undo-tree-id2989 . -94) (undo-tree-id2990 . -94) (undo-tree-id2991 . -94) (undo-tree-id2992 . -94) (undo-tree-id2993 . -94) (undo-tree-id2994 . -94) (undo-tree-id2995 . -94) (undo-tree-id2996 . -94) (undo-tree-id2997 . -10) (undo-tree-id2998 . -10) (undo-tree-id2999 . -10) (undo-tree-id3000 . -10) (undo-tree-id3001 . -10) (undo-tree-id3002 . -10) (undo-tree-id3003 . -10) (undo-tree-id3004 . -10) (undo-tree-id3005 . -10) (undo-tree-id3006 . -10) (undo-tree-id3007 . -1603) (undo-tree-id3008 . -1602) (undo-tree-id3009 . -10) (undo-tree-id3010 . -10) (undo-tree-id3011 . -10) (undo-tree-id3012 . -10) (undo-tree-id3013 . -10) (undo-tree-id3014 . -10) (undo-tree-id3015 . -10) (undo-tree-id3016 . -10) (undo-tree-id3017 . -10) (undo-tree-id3018 . -10) (undo-tree-id3019 . -10) (undo-tree-id3020 . -10) (undo-tree-id3021 . -10) (undo-tree-id3022 . -10) (undo-tree-id3023 . -10) (undo-tree-id3024 . -10) (undo-tree-id3025 . -10) (undo-tree-id3026 . -10) (undo-tree-id3027 . -10) (undo-tree-id3028 . -10) (undo-tree-id3029 . -10) (undo-tree-id3030 . -10) (undo-tree-id3031 . -10) (undo-tree-id3032 . -10) (undo-tree-id3033 . -10) (undo-tree-id3034 . -94) (undo-tree-id3035 . -94) (undo-tree-id3036 . -94) (undo-tree-id3037 . -94) (undo-tree-id3038 . -94) (undo-tree-id3039 . -116) (undo-tree-id3040 . -116) (undo-tree-id3041 . -116) (undo-tree-id3042 . -116) (undo-tree-id3043 . -116) (undo-tree-id3044 . -184) (undo-tree-id3045 . -184) (undo-tree-id3046 . -184) (undo-tree-id3047 . -184) (undo-tree-id3048 . -184) (undo-tree-id3049 . -255) (undo-tree-id3050 . -255) (undo-tree-id3051 . -255) (undo-tree-id3052 . -255) (undo-tree-id3053 . -255) (undo-tree-id3054 . -286) (undo-tree-id3055 . -286) (undo-tree-id3056 . -286) (undo-tree-id3057 . -286) (undo-tree-id3058 . -286) (undo-tree-id3059 . -379) (undo-tree-id3060 . -379) (undo-tree-id3061 . -379) (undo-tree-id3062 . -379) (undo-tree-id3063 . -379) (undo-tree-id3064 . -424) (undo-tree-id3065 . -424) (undo-tree-id3066 . -424) (undo-tree-id3067 . -424) (undo-tree-id3068 . -424) (undo-tree-id3069 . -429) (undo-tree-id3070 . -429) (undo-tree-id3071 . -429) (undo-tree-id3072 . -429) (undo-tree-id3073 . -429) (undo-tree-id3074 . -487) (undo-tree-id3075 . -487) (undo-tree-id3076 . -487) (undo-tree-id3077 . -487) (undo-tree-id3078 . -487) (undo-tree-id3079 . -552) (undo-tree-id3080 . -552) (undo-tree-id3081 . -552) (undo-tree-id3082 . -552) (undo-tree-id3083 . -552) (undo-tree-id3084 . -614) (undo-tree-id3085 . -614) (undo-tree-id3086 . -614) (undo-tree-id3087 . -614) (undo-tree-id3088 . -614) (undo-tree-id3089 . -676) (undo-tree-id3090 . -676) (undo-tree-id3091 . -676) (undo-tree-id3092 . -676) (undo-tree-id3093 . -676) (undo-tree-id3094 . -738) (undo-tree-id3095 . -738) (undo-tree-id3096 . -738) (undo-tree-id3097 . -738) (undo-tree-id3098 . -738) (undo-tree-id3099 . -800) (undo-tree-id3100 . -800) (undo-tree-id3101 . -800) (undo-tree-id3102 . -800) (undo-tree-id3103 . -800) (undo-tree-id3104 . -851) (undo-tree-id3105 . -851) (undo-tree-id3106 . -851) (undo-tree-id3107 . -851) (undo-tree-id3108 . -851) (undo-tree-id3109 . -851) (undo-tree-id3110 . -851) (undo-tree-id3111 . -851) (undo-tree-id3112 . -851) (undo-tree-id3113 . -851) (undo-tree-id3114 . -851) (undo-tree-id3115 . -851) (undo-tree-id3116 . -851) (undo-tree-id3117 . -851) (undo-tree-id3118 . -851) (undo-tree-id3119 . -851) (undo-tree-id3120 . -851) (undo-tree-id3121 . -851) (undo-tree-id3122 . -851) (undo-tree-id3123 . -851) (undo-tree-id3124 . -851) (undo-tree-id3125 . -851) (undo-tree-id3126 . -851) (undo-tree-id3127 . -851) (undo-tree-id3128 . -851) (undo-tree-id3129 . -1357) (undo-tree-id3130 . -1357) (undo-tree-id3131 . -1357) (undo-tree-id3132 . -1357) (undo-tree-id3133 . -1357) (undo-tree-id3134 . -1357) (undo-tree-id3135 . -1357) (undo-tree-id3136 . -1357) (undo-tree-id3137 . -1357) (undo-tree-id3138 . -1357) (undo-tree-id3139 . -1357) (undo-tree-id3140 . -1357) (undo-tree-id3141 . -1357) (undo-tree-id3142 . -1357) (undo-tree-id3143 . -1357) (undo-tree-id3144 . -1357) (undo-tree-id3145 . -1357) (undo-tree-id3146 . -1357) (undo-tree-id3147 . -1357) (undo-tree-id3148 . -1357) (undo-tree-id3149 . -1357) (undo-tree-id3150 . -1357) (undo-tree-id3151 . -1357) (undo-tree-id3152 . -1357) (undo-tree-id3153 . -1357) (undo-tree-id3154 . -1357) (undo-tree-id3155 . -1357) (undo-tree-id3156 . -1357) (undo-tree-id3157 . -1357) (undo-tree-id3158 . -1357) (undo-tree-id3159 . -1330) (undo-tree-id3160 . -1330) (undo-tree-id3161 . -1330) (undo-tree-id3162 . -1330) (undo-tree-id3163 . -1330) (undo-tree-id3164 . -1330) (undo-tree-id3165 . -1330) (undo-tree-id3166 . -1330) (undo-tree-id3167 . -1330) (undo-tree-id3168 . -1330) (undo-tree-id3169 . -1330) (undo-tree-id3170 . -1330) (undo-tree-id3171 . -1330) (undo-tree-id3172 . -1330) (undo-tree-id3173 . -1330) (undo-tree-id3174 . -1303) (undo-tree-id3175 . -1303) (undo-tree-id3176 . -1303) (undo-tree-id3177 . -1303) (undo-tree-id3178 . -1303) (undo-tree-id3179 . -1303) (undo-tree-id3180 . -1303) (undo-tree-id3181 . -1303) (undo-tree-id3182 . -1303) (undo-tree-id3183 . -1303) (undo-tree-id3184 . -1303) (undo-tree-id3185 . -1303) (undo-tree-id3186 . -1303) (undo-tree-id3187 . -1303) (undo-tree-id3188 . -1303) (undo-tree-id3189 . -1330) (undo-tree-id3190 . -1330) (undo-tree-id3191 . -1330) (undo-tree-id3192 . -1330) (undo-tree-id3193 . -1330) (undo-tree-id3194 . -1330) (undo-tree-id3195 . -1330) (undo-tree-id3196 . -1330) (undo-tree-id3197 . -1330) (undo-tree-id3198 . -1330) (undo-tree-id3199 . -1330) (undo-tree-id3200 . -1330) (undo-tree-id3201 . -1330) (undo-tree-id3202 . -1330) (undo-tree-id3203 . -1330) (undo-tree-id3204 . -1357) (undo-tree-id3205 . -1357) (undo-tree-id3206 . -1357) (undo-tree-id3207 . -1357) (undo-tree-id3208 . -1357) (undo-tree-id3209 . -1357) (undo-tree-id3210 . -1357) (undo-tree-id3211 . -1357) (undo-tree-id3212 . -1357) (undo-tree-id3213 . -1357) (undo-tree-id3214 . -1357) (undo-tree-id3215 . -1357) (undo-tree-id3216 . -1357) (undo-tree-id3217 . -1357) (undo-tree-id3218 . -1357) (undo-tree-id3219 . -1382) (undo-tree-id3220 . -1382) (undo-tree-id3221 . -1382) (undo-tree-id3222 . -1382) (undo-tree-id3223 . -1382) (undo-tree-id3224 . -1382) (undo-tree-id3225 . -1382) (undo-tree-id3226 . -1382) (undo-tree-id3227 . -1382) (undo-tree-id3228 . -1382) (undo-tree-id3229 . -1382) (undo-tree-id3230 . -1382) (undo-tree-id3231 . -1382) (undo-tree-id3232 . -1382) (undo-tree-id3233 . -1382) (undo-tree-id3234 . -1407) (undo-tree-id3235 . -1407) (undo-tree-id3236 . -1407) (undo-tree-id3237 . -1407) (undo-tree-id3238 . -1407) (undo-tree-id3239 . -1407) (undo-tree-id3240 . -1407) (undo-tree-id3241 . -1407) (undo-tree-id3242 . -1407) (undo-tree-id3243 . -1407) (undo-tree-id3244 . -1407) (undo-tree-id3245 . -1407) (undo-tree-id3246 . -1407) (undo-tree-id3247 . -1407) (undo-tree-id3248 . -1407) (undo-tree-id3249 . -1407) (undo-tree-id3250 . -1407) (undo-tree-id3251 . -1407) (undo-tree-id3252 . -1407) (undo-tree-id3253 . -1407) (undo-tree-id3254 . -1407) (undo-tree-id3255 . -1407) (undo-tree-id3256 . -1407) (undo-tree-id3257 . -1407) (undo-tree-id3258 . -1407) (undo-tree-id3259 . -1428) (undo-tree-id3260 . -1428) (undo-tree-id3261 . -1428) (undo-tree-id3262 . -1428) (undo-tree-id3263 . -1428) (undo-tree-id3264 . -1454) (undo-tree-id3265 . -1454) (undo-tree-id3266 . -1454) (undo-tree-id3267 . -1454) (undo-tree-id3268 . -1454) (undo-tree-id3269 . -1455) (undo-tree-id3270 . -1455) (undo-tree-id3271 . -1455) (undo-tree-id3272 . -1455) (undo-tree-id3273 . -1455) (undo-tree-id3274 . -1468) (undo-tree-id3275 . -1468) (undo-tree-id3276 . -1468) (undo-tree-id3277 . -1468) (undo-tree-id3278 . -1468) (undo-tree-id3279 . -1498) (undo-tree-id3280 . -1498) (undo-tree-id3281 . -1498) (undo-tree-id3282 . -1498) (undo-tree-id3283 . -1498) (undo-tree-id3284 . -1530) (undo-tree-id3285 . -1530) (undo-tree-id3286 . -1530) (undo-tree-id3287 . -1530) (undo-tree-id3288 . -1530) (undo-tree-id3289 . -1560) (undo-tree-id3290 . -1560) (undo-tree-id3291 . -1560) (undo-tree-id3292 . -1560) (undo-tree-id3293 . -1560) (undo-tree-id3294 . -1560) (undo-tree-id3295 . -1560) (undo-tree-id3296 . -1560) (undo-tree-id3297 . -1560) (undo-tree-id3298 . -1560) (undo-tree-id3299 . -1560) (undo-tree-id3300 . -1560) (undo-tree-id3301 . -1560) (undo-tree-id3302 . -1560) (undo-tree-id3303 . -1560) (undo-tree-id3304 . -1560) (undo-tree-id3305 . -1560) (undo-tree-id3306 . -1560) (undo-tree-id3307 . -1560) (undo-tree-id3308 . -1560) (undo-tree-id3309 . -1586) (undo-tree-id3310 . -1586) (undo-tree-id3311 . -1586) (undo-tree-id3312 . -1586) (undo-tree-id3313 . -1586) (undo-tree-id3314 . -1586) (undo-tree-id3315 . -1586) (undo-tree-id3316 . -1586) (undo-tree-id3317 . -1586) (undo-tree-id3318 . -1586) (undo-tree-id3319 . -1586) (undo-tree-id3320 . -1586) (undo-tree-id3321 . -1586) (undo-tree-id3322 . -1586) (undo-tree-id3323 . -1586) (undo-tree-id3324 . -1587) (undo-tree-id3325 . -1587) (undo-tree-id3326 . -1587) (undo-tree-id3327 . -1587) (undo-tree-id3328 . -1587) (undo-tree-id3329 . -1587) (undo-tree-id3330 . -1587) (undo-tree-id3331 . -1587) (undo-tree-id3332 . -1587) (undo-tree-id3333 . -1587) (undo-tree-id3334 . -1587) (undo-tree-id3335 . -1587) (undo-tree-id3336 . -1587) (undo-tree-id3337 . -1587) (undo-tree-id3338 . -1587) (undo-tree-id3339 . -1588) (undo-tree-id3340 . -1588) (undo-tree-id3341 . -1588) (undo-tree-id3342 . -1588) (undo-tree-id3343 . -1588) (undo-tree-id3344 . -1588) (undo-tree-id3345 . -1588) (undo-tree-id3346 . -1588) (undo-tree-id3347 . -1588) (undo-tree-id3348 . -1588) (undo-tree-id3349 . -1588) (undo-tree-id3350 . -1588) (undo-tree-id3351 . -1588) (undo-tree-id3352 . -1588) (undo-tree-id3353 . -1588) (undo-tree-id3354 . -1602) (undo-tree-id3355 . -1602) (undo-tree-id3356 . -1602) (undo-tree-id3357 . -1602) (undo-tree-id3358 . -1602) (undo-tree-id3359 . -1602) (undo-tree-id3360 . -1602) (undo-tree-id3361 . -1602) (undo-tree-id3362 . -1602) (undo-tree-id3363 . -1602) (undo-tree-id3364 . -1602) (undo-tree-id3365 . -1602) (undo-tree-id3366 . -1602) (undo-tree-id3367 . -1602) (undo-tree-id3368 . -1602) (undo-tree-id3369 . -1602) (undo-tree-id3370 . -1602) (undo-tree-id3371 . -1602) (undo-tree-id3372 . -1602) (undo-tree-id3373 . -1602) (undo-tree-id3374 . -1602) (undo-tree-id3375 . -1602) 2317 (t 25306 58360 189811 304000)) nil (25306 58370 140388 215000) 0 nil])
([nil nil ((#(";;
(use-package company
  :diminish company-mode
  :general
  (general-define-key :keymaps 'company-active-map
                      \"C-j\" 'company-select-next
                      \"C-k\" 'company-select-previous)
  :init
  ;; These configurations come from Doom Emacs:
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-minimum-prefix-length 2
        company-tooltip-limit 14
        company-tooltip-align-annotations t
        company-require-match 'never
        company-global-modes '(not erc-mode message-mode help-mode gud-mode)
        company-frontends
        '(company-pseudo-tooltip-frontend  ; always show candidates in overlay tooltip
          company-echo-metadata-frontend)  ; show selected candidate docs in echo area
        company-backends '(company-capf company-files company-keywords)
        company-auto-complete nil
        company-auto-complete-chars nil
        company-dabbrev-other-buffers nil
        company-dabbrev-ignore-case nil
        company-dabbrev-downcase nil)

  :config
  (setq company-idle-delay 0.35)
  :custom-face
  (company-tooltip ((t (:family \"Roboto Mono\")))))

" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-face) 3 4 (fontified t) 4 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 23 (fontified t face font-lock-constant-face) 23 24 (fontified t) 24 26 (fontified t) 26 35 (fontified t face font-lock-builtin-face) 35 51 (fontified t) 51 59 (fontified t face font-lock-builtin-face) 59 82 (fontified t) 82 90 (fontified t face font-lock-builtin-face) 90 133 (fontified t) 133 138 (fontified t face font-lock-string-face) 138 182 (fontified t) 182 187 (fontified t face font-lock-string-face) 187 216 (fontified t) 216 221 (fontified t face font-lock-builtin-face) 221 224 (fontified t) 224 227 (fontified t face font-lock-comment-delimiter-face) 227 270 (fontified t face font-lock-comment-face) 270 279 (fontified t) 279 321 (fontified t) 321 324 (fontified t) 324 328 (fontified t face font-lock-keyword-face) 328 621 (fontified t) 621 623 (fontified t face font-lock-comment-delimiter-face) 623 665 (fontified t face font-lock-comment-face) 665 700 (fontified t) 700 708 (fontified t) 708 710 (fontified t face font-lock-comment-delimiter-face) 710 752 (fontified t face font-lock-comment-face) 752 800 (fontified t) 800 824 (fontified t) 824 1021 (fontified t) 1021 1028 (fontified t face font-lock-builtin-face) 1028 1032 (fontified t) 1032 1036 (fontified t face font-lock-keyword-face) 1036 1064 (fontified t) 1064 1076 (fontified t face font-lock-builtin-face) 1076 1101 (fontified t) 1101 1108 (fontified t face font-lock-builtin-face) 1108 1109 (fontified t) 1109 1122 (fontified t face font-lock-string-face) 1122 1129 (fontified t)) . 712) (undo-tree-id3392 . -1128) (undo-tree-id3393 . -1128) (undo-tree-id3394 . -3) (undo-tree-id3395 . -3) (undo-tree-id3396 . -3) (undo-tree-id3397 . -3) (undo-tree-id3398 . -3) (undo-tree-id3399 . -3) (undo-tree-id3400 . -1128) (undo-tree-id3401 . -3) (undo-tree-id3402 . 1126) (undo-tree-id3403 . -1128) 1840 (t 25306 58370 163144 281000)) nil (25306 58459 873788 929000) 0 nil])
([nil nil ((#("(use-package super-save
  :diminish super-save-mode
  :defer 2
  :config
  (setq super-save-auto-save-when-idle t
        super-save-idle-duration 5 ;; after 5 seconds of not typing autosave
        super-save-triggers ;; Functions after which buffers are saved (switching window, for example)
        '(evil-window-next evil-window-prev balance-windows other-window)
        super-save-max-buffer-size 10000000)
  (super-save-mode +1))

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 23 (fontified t face font-lock-constant-face) 23 26 (fontified t) 26 35 (fontified t face font-lock-builtin-face) 35 54 (fontified t) 54 60 (fontified t face font-lock-builtin-face) 60 65 (fontified t) 65 72 (fontified t face font-lock-builtin-face) 72 76 (fontified t) 76 80 (fontified t face font-lock-keyword-face) 80 149 (fontified t) 149 152 (fontified t face font-lock-comment-delimiter-face) 152 191 (fontified t face font-lock-comment-face) 191 219 (fontified t) 219 222 (fontified t face font-lock-comment-delimiter-face) 222 294 (fontified t face font-lock-comment-face) 294 394 (fontified t) 394 413 (fontified t) 413 438 (fontified t)) . 713) (undo-tree-id3388 . -437) (undo-tree-id3389 . -437) (undo-tree-id3390 . -437) (undo-tree-id3391 . -437) 1150) nil (25306 58459 873626 216000) 0 nil])
([nil nil ((#("(use-package saveplace
  :init (setq save-place-limit 100)
  :config (save-place-mode))
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-constant-face) 22 25 (fontified t) 25 30 (fontified t face font-lock-builtin-face) 30 32 (fontified t) 32 36 (fontified t face font-lock-keyword-face) 36 61 (fontified t) 61 68 (fontified t face font-lock-builtin-face) 68 88 (fontified t)) . 1020) (undo-tree-id3384 . 88) (undo-tree-id3385 . -1) (undo-tree-id3386 . 2) (undo-tree-id3387 . -87)) nil (25306 58459 873623 243000) 0 nil])
([nil nil ((#("(use-package yasnippet
  :diminish yas-minor-mode
  :defer 5
  :config
  ;; (setq yas-snippet-dirs (list (expand-file-name \"snippets\" jib/emacs-stuff)))
  (yas-global-mode 1)) ;; or M-x yas-reload-all if you've started YASnippet already.

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-constant-face) 22 25 (fontified t) 25 34 (fontified t face font-lock-builtin-face) 34 52 (fontified t) 52 58 (fontified t face font-lock-builtin-face) 58 63 (fontified t) 63 70 (fontified t face font-lock-builtin-face) 70 73 (fontified t) 73 76 (fontified t face font-lock-comment-delimiter-face) 76 153 (fontified t face font-lock-comment-face) 153 176 (fontified t) 176 179 (fontified t face font-lock-comment-delimiter-face) 179 238 (fontified t face font-lock-comment-face) 238 239 (fontified t)) . 1022) (undo-tree-id3380 . -238) (undo-tree-id3381 . -238) (undo-tree-id3382 . -238) (undo-tree-id3383 . -238) 1260) nil (25306 58459 873846 219000) 0 nil])
([nil nil ((#("(require 'warnings)
(add-to-list 'warning-suppress-types '(yasnippet backquote-change)) 
" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 18 (fontified t face font-lock-constant-face) 18 20 (fontified t) 20 88 (fontified t) 88 89 (fontified t)) . 1177) (undo-tree-id3672 . 89) (undo-tree-id3673 . -1) (undo-tree-id3674 . 71) (undo-tree-id3675 . -19)) nil (25306 58500 806291 599000) 0 nil] [nil nil ((#("(require 'warnings)
" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 18 (fontified t face font-lock-constant-face) 18 20 (fontified t)) . 1177) (undo-tree-id3376 . 20) (undo-tree-id3377 . -1) (undo-tree-id3378 . 2) (undo-tree-id3379 . -19)) ((1177 . 1197)) (25306 58459 873614 740000) 0 nil])
([nil nil ((#("(use-package mixed-pitch
  :defer t
  :config
  (setq mixed-pitch-set-height nil)
  (dolist (face '(org-date org-priority org-tag org-special-keyword)) ;; Some extra faces I like to be fixed-pitch
    (add-to-list 'mixed-pitch-fixed-pitch-faces face)))

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 24 (fontified t face font-lock-constant-face) 24 27 (fontified t) 27 33 (fontified t face font-lock-builtin-face) 33 38 (fontified t) 38 45 (fontified t face font-lock-builtin-face) 45 49 (fontified t) 49 53 (fontified t face font-lock-keyword-face) 53 85 (fontified t) 85 91 (fontified t face font-lock-keyword-face) 91 152 (fontified t) 152 155 (fontified t face font-lock-comment-delimiter-face) 155 180 (fontified t face font-lock-comment-face) 180 197 (fontified t face font-lock-comment-face) 197 254 (fontified t)) . 1179) (undo-tree-id3668 . -253) (undo-tree-id3669 . -253) (undo-tree-id3670 . -253) (undo-tree-id3671 . -253) 1432) nil (25306 58500 806287 926000) 0 nil])
nil
([nil nil ((#(";; Disables showing system load in modeline, useless anyway
(setq display-time-default-load-average nil)

(line-number-mode)
(column-number-mode)
(display-time-mode -1)
(size-indication-mode 1)

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 60 (fontified t face font-lock-comment-face) 60 61 (fontified t) 61 65 (fontified t face font-lock-keyword-face) 65 169 (fontified t) 169 194 (fontified t) 194 195 (fontified t)) . 1179) (undo-tree-id3404 . -194) (undo-tree-id3405 . -194) (undo-tree-id3406 . -60) (undo-tree-id3407 . -60) (undo-tree-id3408 . -60) (undo-tree-id3409 . -60) (undo-tree-id3410 . -60) (undo-tree-id3411 . -60) (undo-tree-id3412 . -60) (undo-tree-id3413 . -60) (undo-tree-id3414 . -60) (undo-tree-id3415 . -60) (undo-tree-id3416 . -60) (undo-tree-id3417 . -60) (undo-tree-id3418 . -60) (undo-tree-id3419 . -60) (undo-tree-id3420 . -60) (undo-tree-id3421 . -60) (undo-tree-id3422 . -60) (undo-tree-id3423 . -60) (undo-tree-id3424 . -60) (undo-tree-id3425 . -60) (undo-tree-id3426 . -60) (undo-tree-id3427 . -60) (undo-tree-id3428 . -60) (undo-tree-id3429 . -60) (undo-tree-id3430 . -60) (undo-tree-id3431 . -60) (undo-tree-id3432 . -60) (undo-tree-id3433 . -60) (undo-tree-id3434 . -60) (undo-tree-id3435 . -60) (undo-tree-id3436 . -60) (undo-tree-id3437 . -60) (undo-tree-id3438 . -60) (undo-tree-id3439 . -60) (undo-tree-id3440 . -60) (undo-tree-id3441 . -105) (undo-tree-id3442 . -105) (undo-tree-id3443 . -105) (undo-tree-id3444 . -105) (undo-tree-id3445 . -105) (undo-tree-id3446 . -105) (undo-tree-id3447 . -105) (undo-tree-id3448 . -105) (undo-tree-id3449 . -105) (undo-tree-id3450 . -105) (undo-tree-id3451 . -105) (undo-tree-id3452 . -105) (undo-tree-id3453 . -105) (undo-tree-id3454 . -105) (undo-tree-id3455 . -105) (undo-tree-id3456 . -105) (undo-tree-id3457 . -105) (undo-tree-id3458 . -105) (undo-tree-id3459 . -105) (undo-tree-id3460 . -105) (undo-tree-id3461 . -105) (undo-tree-id3462 . -105) (undo-tree-id3463 . -105) (undo-tree-id3464 . -105) (undo-tree-id3465 . -105) (undo-tree-id3466 . -106) (undo-tree-id3467 . -106) (undo-tree-id3468 . -106) (undo-tree-id3469 . -106) (undo-tree-id3470 . -106) (undo-tree-id3471 . -106) (undo-tree-id3472 . -106) (undo-tree-id3473 . -106) (undo-tree-id3474 . -106) (undo-tree-id3475 . -106) (undo-tree-id3476 . -125) (undo-tree-id3477 . -125) (undo-tree-id3478 . -125) (undo-tree-id3479 . -125) (undo-tree-id3480 . -125) (undo-tree-id3481 . -125) (undo-tree-id3482 . -125) (undo-tree-id3483 . -125) (undo-tree-id3484 . -125) (undo-tree-id3485 . -125) (undo-tree-id3486 . -146) (undo-tree-id3487 . -146) (undo-tree-id3488 . -146) (undo-tree-id3489 . -146) (undo-tree-id3490 . -146) (undo-tree-id3491 . -146) (undo-tree-id3492 . -146) (undo-tree-id3493 . -146) (undo-tree-id3494 . -146) (undo-tree-id3495 . -146) (undo-tree-id3496 . -169) (undo-tree-id3497 . -169) (undo-tree-id3498 . -169) (undo-tree-id3499 . -169) (undo-tree-id3500 . -169) (undo-tree-id3501 . -169) (undo-tree-id3502 . -169) (undo-tree-id3503 . -169) (undo-tree-id3504 . -169) (undo-tree-id3505 . -169) (undo-tree-id3506 . -169) (undo-tree-id3507 . -169) (undo-tree-id3508 . -169) (undo-tree-id3509 . -169) (undo-tree-id3510 . -169) (undo-tree-id3511 . -169) (undo-tree-id3512 . -169) (undo-tree-id3513 . -169) (undo-tree-id3514 . -169) (undo-tree-id3515 . -169) (undo-tree-id3516 . -169) (undo-tree-id3517 . -169) (undo-tree-id3518 . -169) (undo-tree-id3519 . -169) (undo-tree-id3520 . -169) (undo-tree-id3521 . -169) (undo-tree-id3522 . -169) (undo-tree-id3523 . -169) (undo-tree-id3524 . -169) (undo-tree-id3525 . -169) (undo-tree-id3526 . -169) (undo-tree-id3527 . -169) (undo-tree-id3528 . -169) (undo-tree-id3529 . -169) (undo-tree-id3530 . -169) (undo-tree-id3531 . -169) (undo-tree-id3532 . -169) (undo-tree-id3533 . -169) (undo-tree-id3534 . -169) (undo-tree-id3535 . -169) (undo-tree-id3536 . -194) (undo-tree-id3537 . -194) (undo-tree-id3538 . -194) (undo-tree-id3539 . -194) (undo-tree-id3540 . -194) (undo-tree-id3541 . -194) (undo-tree-id3542 . -194) (undo-tree-id3543 . -194) (undo-tree-id3544 . -194) (undo-tree-id3545 . -194) (undo-tree-id3546 . -169) (undo-tree-id3547 . -169) (undo-tree-id3548 . -169) (undo-tree-id3549 . -169) (undo-tree-id3550 . -169) (undo-tree-id3551 . -169) (undo-tree-id3552 . -169) (undo-tree-id3553 . -169) (undo-tree-id3554 . -169) (undo-tree-id3555 . -169) (undo-tree-id3556 . -194) (undo-tree-id3557 . -194) (undo-tree-id3558 . -194) (undo-tree-id3559 . -194) (undo-tree-id3560 . -194) (undo-tree-id3561 . -194) (undo-tree-id3562 . -194) (undo-tree-id3563 . -194) (undo-tree-id3564 . -194) (undo-tree-id3565 . -194) (undo-tree-id3566 . -195) (undo-tree-id3567 . -194) (undo-tree-id3568 . -194) (undo-tree-id3569 . -194) (undo-tree-id3570 . -194) (undo-tree-id3571 . -194) (undo-tree-id3572 . -194) (undo-tree-id3573 . -194) (undo-tree-id3574 . -194) (undo-tree-id3575 . -194) (undo-tree-id3576 . -194) (undo-tree-id3577 . -194) (undo-tree-id3578 . -169) (undo-tree-id3579 . -169) (undo-tree-id3580 . -169) (undo-tree-id3581 . -169) (undo-tree-id3582 . -169) (undo-tree-id3583 . -169) (undo-tree-id3584 . -169) (undo-tree-id3585 . -169) (undo-tree-id3586 . -169) (undo-tree-id3587 . -169) (undo-tree-id3588 . -169) (undo-tree-id3589 . -169) (undo-tree-id3590 . -169) (undo-tree-id3591 . -169) (undo-tree-id3592 . -169) (undo-tree-id3593 . -146) (undo-tree-id3594 . -146) (undo-tree-id3595 . -146) (undo-tree-id3596 . -146) (undo-tree-id3597 . -146) (undo-tree-id3598 . -146) (undo-tree-id3599 . -146) (undo-tree-id3600 . -146) (undo-tree-id3601 . -146) (undo-tree-id3602 . -146) (undo-tree-id3603 . -146) (undo-tree-id3604 . -146) (undo-tree-id3605 . -146) (undo-tree-id3606 . -146) (undo-tree-id3607 . -146) (undo-tree-id3608 . -125) (undo-tree-id3609 . -125) (undo-tree-id3610 . -125) (undo-tree-id3611 . -125) (undo-tree-id3612 . -125) (undo-tree-id3613 . -125) (undo-tree-id3614 . -125) (undo-tree-id3615 . -125) (undo-tree-id3616 . -125) (undo-tree-id3617 . -125) (undo-tree-id3618 . -125) (undo-tree-id3619 . -125) (undo-tree-id3620 . -125) (undo-tree-id3621 . -125) (undo-tree-id3622 . -125) (undo-tree-id3623 . -106) (undo-tree-id3624 . -106) (undo-tree-id3625 . -106) (undo-tree-id3626 . -106) (undo-tree-id3627 . -106) (undo-tree-id3628 . -106) (undo-tree-id3629 . -106) (undo-tree-id3630 . -106) (undo-tree-id3631 . -106) (undo-tree-id3632 . -106) (undo-tree-id3633 . -106) (undo-tree-id3634 . -106) (undo-tree-id3635 . -106) (undo-tree-id3636 . -106) (undo-tree-id3637 . -106) (undo-tree-id3638 . -105) (undo-tree-id3639 . -105) (undo-tree-id3640 . -105) (undo-tree-id3641 . -105) (undo-tree-id3642 . -105) (undo-tree-id3643 . -105) (undo-tree-id3644 . -105) (undo-tree-id3645 . -105) (undo-tree-id3646 . -105) (undo-tree-id3647 . -105) (undo-tree-id3648 . -105) (undo-tree-id3649 . -105) (undo-tree-id3650 . -105) (undo-tree-id3651 . -105) (undo-tree-id3652 . -105) (undo-tree-id3653 . -60) (undo-tree-id3654 . -60) (undo-tree-id3655 . -60) (undo-tree-id3656 . -60) (undo-tree-id3657 . -60) (undo-tree-id3658 . -60) (undo-tree-id3659 . -60) (undo-tree-id3660 . -60) (undo-tree-id3661 . -60) (undo-tree-id3662 . -60) (undo-tree-id3663 . -60) (undo-tree-id3664 . -60) (undo-tree-id3665 . -60) (undo-tree-id3666 . -60) (undo-tree-id3667 . -60)) nil (25306 58568 521657 733000) 0 nil])
([nil nil ((#("
(use-package hide-mode-line
  :commands (hide-mode-line-mode))
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 28 (fontified t face font-lock-constant-face) 28 29 (fontified t) 29 31 (fontified t) 31 40 (fontified t face font-lock-builtin-face) 40 63 (fontified t) 63 64 (fontified t)) . 1178) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . 63) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (t 25306 58500 826472 982000)) nil (25306 58631 830444 942000) 0 nil] [nil nil ((#("
(use-package hide-mode-line
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 28 (fontified t face font-lock-constant-face) 28 29 (fontified t)) . 1178) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . 28) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -29) (undo-tree-id3716 . -29) (undo-tree-id3717 . -29) (undo-tree-id3718 . -29) (undo-tree-id3719 . -29) (undo-tree-id3720 . -29) (undo-tree-id3721 . -29) (undo-tree-id3722 . -29) (undo-tree-id3723 . -29) (undo-tree-id3724 . -29) (undo-tree-id3725 . -29) (undo-tree-id3726 . -29) (undo-tree-id3727 . -29) (undo-tree-id3728 . -29) (undo-tree-id3729 . -29) (undo-tree-id3730 . -29) (undo-tree-id3731 . -29) (undo-tree-id3732 . -29) (undo-tree-id3733 . -29) (undo-tree-id3734 . -29) (undo-tree-id3735 . -29) (undo-tree-id3736 . -29) (undo-tree-id3737 . -29) (undo-tree-id3738 . -29) (undo-tree-id3739 . -29) (undo-tree-id3740 . -29) (undo-tree-id3741 . -29) (undo-tree-id3742 . -29) (undo-tree-id3743 . -29) (undo-tree-id3744 . -29) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (t 25306 58500 826472 982000)) ((1178 . 1207)) (25306 58568 521462 122000) 0 nil] [nil nil ((#("(use-package hide-mode-line
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 27 (fontified t face font-lock-constant-face) 27 28 (fontified t)) . 1179) (undo-tree-id3676 . 28) (undo-tree-id3677 . -28) (undo-tree-id3678 . -28) (undo-tree-id3679 . -28) (undo-tree-id3680 . -28) (undo-tree-id3681 . -28) (undo-tree-id3682 . -28) (undo-tree-id3683 . -28) (undo-tree-id3684 . -28) (undo-tree-id3685 . -28) (undo-tree-id3686 . -28) (undo-tree-id3687 . -28) (undo-tree-id3688 . -28) (undo-tree-id3689 . -28) (undo-tree-id3690 . -28) (undo-tree-id3691 . -28) (undo-tree-id3692 . -28) (undo-tree-id3693 . -28) (undo-tree-id3694 . -28) (undo-tree-id3695 . -28) (undo-tree-id3696 . -28) (undo-tree-id3697 . -28) (undo-tree-id3698 . -28) (undo-tree-id3699 . -28) (undo-tree-id3700 . -28) (undo-tree-id3701 . -28) (undo-tree-id3702 . -28) (undo-tree-id3703 . -28) (undo-tree-id3704 . -28) (undo-tree-id3705 . -28) (undo-tree-id3706 . -28) (undo-tree-id3707 . 28) (undo-tree-id3708 . -1) (t 25306 58500 826472 982000)) ((1179 . 1207)) (25306 58567 21238 26000) 0 nil])
([nil nil ((#("
(use-package doom-modeline
  :config
  (doom-modeline-mode)
  (setq doom-modeline-buffer-file-name-style 'auto ;; Just show file name (no path)
        doom-modeline-enable-word-count t
        doom-modeline-buffer-encoding nil
        doom-modeline-icon t ;; Enable/disable all icons
        doom-modeline-modal-icon nil ;; Icon for Evil mode
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon nil
        doom-modeline-bar-width 3))
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 27 (fontified t face font-lock-constant-face) 27 30 (fontified t) 30 37 (fontified t face font-lock-builtin-face) 37 64 (fontified t) 64 68 (fontified t face font-lock-keyword-face) 68 81 (fontified t) 81 106 (fontified t) 106 112 (fontified t) 112 115 (fontified t face font-lock-comment-delimiter-face) 115 145 (fontified t face font-lock-comment-face) 145 193 (fontified t) 193 229 (fontified t) 229 258 (fontified t) 258 261 (fontified t face font-lock-comment-delimiter-face) 261 286 (fontified t face font-lock-comment-face) 286 323 (fontified t) 323 326 (fontified t face font-lock-comment-delimiter-face) 326 345 (fontified t face font-lock-comment-face) 345 412 (fontified t) 412 433 (fontified t) 433 469 (fontified t)) . 1178) (undo-tree-id3875 . 469)) nil (25306 58631 830440 110000) 0 nil])
nil
nil
([nil nil ((#("
" 0 1 (fontified t)) . 1178) (undo-tree-id3874 . 1)) nil (25306 58631 830438 884000) 0 nil])
([nil nil ((#("
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 18 (fontified t face font-lock-comment-face) 18 19 (fontified t face font-lock-comment-face) 19 20 (fontified t) 20 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t) 32 33 (fontified t face font-lock-constant-face) 33 34 (fontified t face font-lock-constant-face) 34 39 (fontified t face font-lock-constant-face) 39 40 (fontified t) 40 42 (fontified t) 42 47 (fontified t face font-lock-builtin-face) 47 68 (fontified t) 68 71 (fontified t face font-lock-comment-delimiter-face) 71 95 (fontified t face font-lock-comment-face) 95 97 (fontified t) 97 100 (fontified t face font-lock-comment-delimiter-face) 100 131 (fontified t face font-lock-comment-face) 131 134 (fontified t) 134 137 (fontified t face font-lock-comment-delimiter-face) 137 158 (fontified t face font-lock-comment-face) 158 160 (fontified t) 160 163 (fontified t face font-lock-comment-delimiter-face) 163 187 (fontified t face font-lock-comment-face) 187 190 (fontified t) 190 193 (fontified t face font-lock-comment-delimiter-face) 193 232 (fontified t face font-lock-comment-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-comment-delimiter-face) 237 261 (fontified t face font-lock-comment-face) 261 264 (fontified t) 264 267 (fontified t face font-lock-comment-delimiter-face) 267 289 (fontified t face font-lock-comment-face) 289 298 (fontified t face font-lock-comment-face) 298 310 (fontified t face (font-lock-constant-face font-lock-comment-face)) 310 317 (fontified t face font-lock-comment-face) 317 333 (fontified t face (font-lock-constant-face font-lock-comment-face)) 333 336 (fontified t face font-lock-comment-face) 336 338 (fontified t) 338 341 (fontified t face font-lock-comment-delimiter-face) 341 349 (fontified t face font-lock-comment-face) 349 364 (fontified t face font-lock-comment-face) 364 369 (fontified t)) . 1661) (undo-tree-id3871 . -368) (undo-tree-id3872 . -368) (undo-tree-id3873 . -368)) nil (25306 58640 369974 206000) 0 nil])
([nil nil ((#("
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format \"[CRM%s] %s\"
                  (replace-regexp-in-string
                   \"\\\\`\\\\[.*?]\\\\*\\\\|\\\\[.*?]\\\\*\\\\'\" \"\"
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 76 (fontified t face font-lock-comment-face) 76 77 (fontified t) 77 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 97 (fontified t face font-lock-constant-face) 97 100 (fontified t) 100 105 (fontified t face font-lock-builtin-face) 105 116 (fontified t) 116 125 (fontified t) 125 126 (fontified t) 126 129 (fontified t face font-lock-comment-delimiter-face) 129 144 (fontified t face font-lock-comment-face) 144 165 (fontified t face font-lock-comment-face) 165 166 (fontified t) 166 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 180 (fontified t face font-lock-constant-face) 180 183 (fontified t face font-lock-constant-face) 183 184 (fontified t) 184 186 (fontified t) 186 191 (fontified t face font-lock-builtin-face) 191 194 (fontified t) 194 197 (fontified t face font-lock-comment-delimiter-face) 197 222 (fontified t face font-lock-comment-face) 222 246 (fontified t face (font-lock-constant-face font-lock-comment-face)) 246 249 (fontified t face font-lock-comment-face) 249 251 (fontified t) 251 254 (fontified t face font-lock-comment-delimiter-face) 254 325 (fontified t face font-lock-comment-face) 325 328 (fontified t) 328 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 347 (fontified t face font-lock-function-name-face) 347 373 (fontified t) 373 385 (fontified t face font-lock-string-face) 385 449 (fontified t) 449 456 (fontified t face font-lock-string-face) 456 459 (fontified t face (font-lock-constant-face font-lock-string-face)) 459 463 (fontified t face font-lock-string-face) 463 465 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 465 466 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 466 469 (fontified t face font-lock-string-face) 469 472 (fontified t face (font-lock-constant-face font-lock-string-face)) 472 480 (fontified t face font-lock-string-face) 480 481 (fontified t) 481 483 (fontified t face font-lock-string-face) 483 612 (fontified t) 612 624 (fontified t face font-lock-builtin-face) 624 642 (fontified t) 642 645 (fontified t) 645 648 (fontified t face font-lock-comment-delimiter-face) 648 649 (fontified t face font-lock-comment-face) 649 697 (fontified t face font-lock-comment-face) 697 700 (fontified t) 700 704 (fontified t face font-lock-keyword-face) 704 712 (fontified t) 712 713 (fontified t) 713 734 (fontified t) 734 800 (fontified t) 800 801 (fontified t) 801 865 (fontified t) 865 868 (fontified t face font-lock-comment-delimiter-face) 868 938 (fontified t face font-lock-comment-face) 938 940 (fontified t) 940 943 (fontified t face font-lock-comment-delimiter-face) 943 990 (fontified t face font-lock-comment-face) 990 992 (fontified t) 992 995 (fontified t face font-lock-comment-delimiter-face) 995 1033 (fontified t face font-lock-comment-face) 1033 1035 (fontified t) 1035 1044 (fontified t face font-lock-comment-delimiter-face) 1044 1084 (fontified t face font-lock-comment-face) 1084 1087 (fontified t) 1087 1090 (fontified t face font-lock-comment-delimiter-face) 1090 1103 (fontified t face font-lock-comment-face) 1103 1105 (fontified t face font-lock-comment-face) 1105 1119 (fontified t face font-lock-comment-face) 1119 1122 (fontified t) 1122 1126 (fontified t face font-lock-keyword-face) 1126 1150 (fontified t) 1150 1151 (fontified t) 1151 1160 (fontified t)) . 1660) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . 1159) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1)) nil (25306 58793 655266 534000) 0 nil] [nil nil ((#("
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format \"[CRM%s] %s\"
                  (replace-regexp-in-string
                   \"\\\\`\\\\[.*?]\\\\*\\\\|\\\\[.*?]\\\\*\\\\'\" \"\"
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 76 (fontified t face font-lock-comment-face) 76 77 (fontified t) 77 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 97 (fontified t face font-lock-constant-face) 97 100 (fontified t) 100 105 (fontified t face font-lock-builtin-face) 105 116 (fontified t) 116 125 (fontified t) 125 126 (fontified t) 126 129 (fontified t face font-lock-comment-delimiter-face) 129 144 (fontified t face font-lock-comment-face) 144 165 (fontified t face font-lock-comment-face) 165 166 (fontified t) 166 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 180 (fontified t face font-lock-constant-face) 180 183 (fontified t face font-lock-constant-face) 183 184 (fontified t) 184 186 (fontified t) 186 191 (fontified t face font-lock-builtin-face) 191 194 (fontified t) 194 197 (fontified t face font-lock-comment-delimiter-face) 197 222 (fontified t face font-lock-comment-face) 222 246 (fontified t face (font-lock-constant-face font-lock-comment-face)) 246 249 (fontified t face font-lock-comment-face) 249 251 (fontified t) 251 254 (fontified t face font-lock-comment-delimiter-face) 254 325 (fontified t face font-lock-comment-face) 325 328 (fontified t) 328 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 347 (fontified t face font-lock-function-name-face) 347 373 (fontified t) 373 385 (fontified t face font-lock-string-face) 385 449 (fontified t) 449 456 (fontified t face font-lock-string-face) 456 459 (fontified t face (font-lock-constant-face font-lock-string-face)) 459 463 (fontified t face font-lock-string-face) 463 465 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 465 466 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 466 469 (fontified t face font-lock-string-face) 469 472 (fontified t face (font-lock-constant-face font-lock-string-face)) 472 480 (fontified t face font-lock-string-face) 480 481 (fontified t) 481 483 (fontified t face font-lock-string-face) 483 612 (fontified t) 612 624 (fontified t face font-lock-builtin-face) 624 642 (fontified t) 642 645 (fontified t) 645 648 (fontified t face font-lock-comment-delimiter-face) 648 649 (fontified t face font-lock-comment-face) 649 697 (fontified t face font-lock-comment-face) 697 700 (fontified t) 700 704 (fontified t face font-lock-keyword-face) 704 712 (fontified t) 712 713 (fontified t) 713 734 (fontified t)) . 1660) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . 733) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -76) (undo-tree-id4040 . -76) (undo-tree-id4041 . -76) (undo-tree-id4042 . -76) (undo-tree-id4043 . -76) (undo-tree-id4044 . -76) (undo-tree-id4045 . -76) (undo-tree-id4046 . -76) (undo-tree-id4047 . -76) (undo-tree-id4048 . -76) (undo-tree-id4049 . -76) (undo-tree-id4050 . -76) (undo-tree-id4051 . -76) (undo-tree-id4052 . -76) (undo-tree-id4053 . -76) (undo-tree-id4054 . -76) (undo-tree-id4055 . -76) (undo-tree-id4056 . -76) (undo-tree-id4057 . -76) (undo-tree-id4058 . -76) (undo-tree-id4059 . -76) (undo-tree-id4060 . -76) (undo-tree-id4061 . -76) (undo-tree-id4062 . -76) (undo-tree-id4063 . -76) (undo-tree-id4064 . -98) (undo-tree-id4065 . -98) (undo-tree-id4066 . -98) (undo-tree-id4067 . -98) (undo-tree-id4068 . -98) (undo-tree-id4069 . -98) (undo-tree-id4070 . -98) (undo-tree-id4071 . -98) (undo-tree-id4072 . -98) (undo-tree-id4073 . -98) (undo-tree-id4074 . -98) (undo-tree-id4075 . -98) (undo-tree-id4076 . -98) (undo-tree-id4077 . -98) (undo-tree-id4078 . -98) (undo-tree-id4079 . -98) (undo-tree-id4080 . -98) (undo-tree-id4081 . -98) (undo-tree-id4082 . -98) (undo-tree-id4083 . -98) (undo-tree-id4084 . -98) (undo-tree-id4085 . -98) (undo-tree-id4086 . -98) (undo-tree-id4087 . -98) (undo-tree-id4088 . -98) (undo-tree-id4089 . -98) (undo-tree-id4090 . -98) (undo-tree-id4091 . -98) (undo-tree-id4092 . -98) (undo-tree-id4093 . -98) (undo-tree-id4094 . -76) (undo-tree-id4095 . -76) (undo-tree-id4096 . -76) (undo-tree-id4097 . -76) (undo-tree-id4098 . -76) (undo-tree-id4099 . -76) (undo-tree-id4100 . -76) (undo-tree-id4101 . -76) (undo-tree-id4102 . -76) (undo-tree-id4103 . -76) (undo-tree-id4104 . -76) (undo-tree-id4105 . -76) (undo-tree-id4106 . -76) (undo-tree-id4107 . -76) (undo-tree-id4108 . -76) (undo-tree-id4109 . -76) (undo-tree-id4110 . -76) (undo-tree-id4111 . -76) (undo-tree-id4112 . -76) (undo-tree-id4113 . -76) (undo-tree-id4114 . -76) (undo-tree-id4115 . -76) (undo-tree-id4116 . -76) (undo-tree-id4117 . -76) (undo-tree-id4118 . -76) (undo-tree-id4119 . -76) (undo-tree-id4120 . -76) (undo-tree-id4121 . -76) (undo-tree-id4122 . -76) (undo-tree-id4123 . -76) (undo-tree-id4124 . -76) (undo-tree-id4125 . -76) (undo-tree-id4126 . -76) (undo-tree-id4127 . -76) (undo-tree-id4128 . -76) (undo-tree-id4129 . -76) (undo-tree-id4130 . -76) (undo-tree-id4131 . -76) (undo-tree-id4132 . -76) (undo-tree-id4133 . -76) (undo-tree-id4134 . -76) (undo-tree-id4135 . -76) (undo-tree-id4136 . -76) (undo-tree-id4137 . -76) (undo-tree-id4138 . -76) (undo-tree-id4139 . -76) (undo-tree-id4140 . -76) (undo-tree-id4141 . -76) (undo-tree-id4142 . -76) (undo-tree-id4143 . -76) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1)) ((1660 . 2394)) (25306 58640 369837 682000) 0 nil] [nil nil ((#("
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format \"[CRM%s] %s\"
                  (replace-regexp-in-string
                   \"\\\\`\\\\[.*?]\\\\*\\\\|\\\\[.*?]\\\\*\\\\'\" \"\"
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 76 (fontified t face font-lock-comment-face) 76 77 (fontified t) 77 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 97 (fontified t face font-lock-constant-face) 97 100 (fontified t) 100 105 (fontified t face font-lock-builtin-face) 105 116 (fontified t) 116 125 (fontified t) 125 126 (fontified t) 126 129 (fontified t face font-lock-comment-delimiter-face) 129 144 (fontified t face font-lock-comment-face) 144 165 (fontified t face font-lock-comment-face) 165 166 (fontified t) 166 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 180 (fontified t face font-lock-constant-face) 180 183 (fontified t face font-lock-constant-face) 183 184 (fontified t) 184 186 (fontified t) 186 191 (fontified t face font-lock-builtin-face) 191 194 (fontified t) 194 197 (fontified t face font-lock-comment-delimiter-face) 197 222 (fontified t face font-lock-comment-face) 222 246 (fontified t face (font-lock-constant-face font-lock-comment-face)) 246 249 (fontified t face font-lock-comment-face) 249 251 (fontified t) 251 254 (fontified t face font-lock-comment-delimiter-face) 254 325 (fontified t face font-lock-comment-face) 325 328 (fontified t) 328 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 347 (fontified t face font-lock-function-name-face) 347 373 (fontified t) 373 385 (fontified t face font-lock-string-face) 385 449 (fontified t) 449 456 (fontified t face font-lock-string-face) 456 459 (fontified t face (font-lock-constant-face font-lock-string-face)) 459 463 (fontified t face font-lock-string-face) 463 465 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 465 466 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 466 469 (fontified t face font-lock-string-face) 469 472 (fontified t face (font-lock-constant-face font-lock-string-face)) 472 480 (fontified t face font-lock-string-face) 480 481 (fontified t) 481 483 (fontified t face font-lock-string-face) 483 612 (fontified t) 612 624 (fontified t face font-lock-builtin-face) 624 642 (fontified t) 642 645 (fontified t) 645 648 (fontified t face font-lock-comment-delimiter-face) 648 649 (fontified t face font-lock-comment-face) 649 697 (fontified t face font-lock-comment-face) 697 700 (fontified t) 700 704 (fontified t face font-lock-keyword-face) 704 712 (fontified t) 712 713 (fontified t) 713 734 (fontified t) 734 800 (fontified t) 800 801 (fontified t) 801 865 (fontified t) 865 868 (fontified t face font-lock-comment-delimiter-face) 868 938 (fontified t face font-lock-comment-face) 938 940 (fontified t) 940 943 (fontified t face font-lock-comment-delimiter-face) 943 990 (fontified t face font-lock-comment-face) 990 992 (fontified t) 992 995 (fontified t face font-lock-comment-delimiter-face) 995 1033 (fontified t face font-lock-comment-face) 1033 1035 (fontified t) 1035 1044 (fontified t face font-lock-comment-delimiter-face) 1044 1084 (fontified t face font-lock-comment-face) 1084 1087 (fontified t) 1087 1090 (fontified t face font-lock-comment-delimiter-face) 1090 1103 (fontified t face font-lock-comment-face) 1103 1105 (fontified t face font-lock-comment-face) 1105 1119 (fontified t face font-lock-comment-face) 1119 1122 (fontified t) 1122 1126 (fontified t face font-lock-keyword-face) 1126 1150 (fontified t) 1150 1151 (fontified t) 1151 1160 (fontified t)) . 1660) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . 1159) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -76) (undo-tree-id3889 . -76) (undo-tree-id3890 . -76) (undo-tree-id3891 . -76) (undo-tree-id3892 . -76) (undo-tree-id3893 . -76) (undo-tree-id3894 . -76) (undo-tree-id3895 . -76) (undo-tree-id3896 . -76) (undo-tree-id3897 . -76) (undo-tree-id3898 . -76) (undo-tree-id3899 . -76) (undo-tree-id3900 . -76) (undo-tree-id3901 . -76) (undo-tree-id3902 . -76) (undo-tree-id3903 . -76) (undo-tree-id3904 . -76) (undo-tree-id3905 . -76) (undo-tree-id3906 . -76) (undo-tree-id3907 . -76) (undo-tree-id3908 . -76) (undo-tree-id3909 . -76) (undo-tree-id3910 . -76) (undo-tree-id3911 . -76) (undo-tree-id3912 . -76) (undo-tree-id3913 . -98) (undo-tree-id3914 . -98) (undo-tree-id3915 . -98) (undo-tree-id3916 . -98) (undo-tree-id3917 . -98) (undo-tree-id3918 . -98) (undo-tree-id3919 . -98) (undo-tree-id3920 . -98) (undo-tree-id3921 . -98) (undo-tree-id3922 . -98) (undo-tree-id3923 . -98) (undo-tree-id3924 . -98) (undo-tree-id3925 . -98) (undo-tree-id3926 . -98) (undo-tree-id3927 . -98) (undo-tree-id3928 . -98) (undo-tree-id3929 . -98) (undo-tree-id3930 . -98) (undo-tree-id3931 . -98) (undo-tree-id3932 . -98) (undo-tree-id3933 . -98) (undo-tree-id3934 . -98) (undo-tree-id3935 . -98) (undo-tree-id3936 . -98) (undo-tree-id3937 . -98) (undo-tree-id3938 . -98) (undo-tree-id3939 . -98) (undo-tree-id3940 . -98) (undo-tree-id3941 . -98) (undo-tree-id3942 . -98) (undo-tree-id3943 . -76) (undo-tree-id3944 . -76) (undo-tree-id3945 . -76) (undo-tree-id3946 . -76) (undo-tree-id3947 . -76) (undo-tree-id3948 . -76) (undo-tree-id3949 . -76) (undo-tree-id3950 . -76) (undo-tree-id3951 . -76) (undo-tree-id3952 . -76) (undo-tree-id3953 . -76) (undo-tree-id3954 . -76) (undo-tree-id3955 . -76) (undo-tree-id3956 . -76) (undo-tree-id3957 . -76) (undo-tree-id3958 . -76) (undo-tree-id3959 . -76) (undo-tree-id3960 . -76) (undo-tree-id3961 . -76) (undo-tree-id3962 . -76) (undo-tree-id3963 . -76) (undo-tree-id3964 . -76) (undo-tree-id3965 . -76) (undo-tree-id3966 . -76) (undo-tree-id3967 . -76) (undo-tree-id3968 . -76) (undo-tree-id3969 . -76) (undo-tree-id3970 . -76) (undo-tree-id3971 . -76) (undo-tree-id3972 . -76) (undo-tree-id3973 . -76) (undo-tree-id3974 . -76) (undo-tree-id3975 . -76) (undo-tree-id3976 . -76) (undo-tree-id3977 . -76) (undo-tree-id3978 . -76) (undo-tree-id3979 . -76) (undo-tree-id3980 . -76) (undo-tree-id3981 . -76) (undo-tree-id3982 . -76) (undo-tree-id3983 . -76) (undo-tree-id3984 . -76) (undo-tree-id3985 . -76) (undo-tree-id3986 . -76) (undo-tree-id3987 . -76) (undo-tree-id3988 . -76) (undo-tree-id3989 . -76) (undo-tree-id3990 . -76) (undo-tree-id3991 . -76) (undo-tree-id3992 . -76) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1)) ((1660 . 2820)) (25306 58637 182220 888000) 0 nil] [nil nil ((#(";; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format \"[CRM%s] %s\"
                  (replace-regexp-in-string
                   \"\\\\`\\\\[.*?]\\\\*\\\\|\\\\[.*?]\\\\*\\\\'\" \"\"
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 75 (fontified t face font-lock-comment-face) 75 76 (fontified t) 76 87 (fontified t face font-lock-keyword-face) 87 88 (fontified t) 88 96 (fontified t face font-lock-constant-face) 96 99 (fontified t) 99 104 (fontified t face font-lock-builtin-face) 104 115 (fontified t) 115 124 (fontified t) 124 125 (fontified t) 125 128 (fontified t face font-lock-comment-delimiter-face) 128 143 (fontified t face font-lock-comment-face) 143 164 (fontified t face font-lock-comment-face) 164 165 (fontified t) 165 176 (fontified t face font-lock-keyword-face) 176 177 (fontified t) 177 179 (fontified t face font-lock-constant-face) 179 182 (fontified t face font-lock-constant-face) 182 183 (fontified t) 183 185 (fontified t) 185 190 (fontified t face font-lock-builtin-face) 190 193 (fontified t) 193 196 (fontified t face font-lock-comment-delimiter-face) 196 221 (fontified t face font-lock-comment-face) 221 245 (fontified t face (font-lock-constant-face font-lock-comment-face)) 245 248 (fontified t face font-lock-comment-face) 248 250 (fontified t) 250 253 (fontified t face font-lock-comment-delimiter-face) 253 324 (fontified t face font-lock-comment-face) 324 327 (fontified t) 327 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 346 (fontified t face font-lock-function-name-face) 346 372 (fontified t) 372 384 (fontified t face font-lock-string-face) 384 448 (fontified t) 448 455 (fontified t face font-lock-string-face) 455 458 (fontified t face (font-lock-constant-face font-lock-string-face)) 458 462 (fontified t face font-lock-string-face) 462 464 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 464 465 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 465 468 (fontified t face font-lock-string-face) 468 471 (fontified t face (font-lock-constant-face font-lock-string-face)) 471 479 (fontified t face font-lock-string-face) 479 480 (fontified t) 480 482 (fontified t face font-lock-string-face) 482 611 (fontified t) 611 623 (fontified t face font-lock-builtin-face) 623 641 (fontified t) 641 644 (fontified t) 644 647 (fontified t face font-lock-comment-delimiter-face) 647 648 (fontified t face font-lock-comment-face) 648 696 (fontified t face font-lock-comment-face) 696 699 (fontified t) 699 703 (fontified t face font-lock-keyword-face) 703 711 (fontified t) 711 712 (fontified t) 712 733 (fontified t)) . 1661) (undo-tree-id3765 . 733) (undo-tree-id3766 . -75) (undo-tree-id3767 . -75) (undo-tree-id3768 . -75) (undo-tree-id3769 . -75) (undo-tree-id3770 . -75) (undo-tree-id3771 . -75) (undo-tree-id3772 . -75) (undo-tree-id3773 . -75) (undo-tree-id3774 . -75) (undo-tree-id3775 . -75) (undo-tree-id3776 . -75) (undo-tree-id3777 . -75) (undo-tree-id3778 . -75) (undo-tree-id3779 . -75) (undo-tree-id3780 . -75) (undo-tree-id3781 . -75) (undo-tree-id3782 . -75) (undo-tree-id3783 . -75) (undo-tree-id3784 . -75) (undo-tree-id3785 . -75) (undo-tree-id3786 . -75) (undo-tree-id3787 . -75) (undo-tree-id3788 . -75) (undo-tree-id3789 . -75) (undo-tree-id3790 . -75) (undo-tree-id3791 . -97) (undo-tree-id3792 . -97) (undo-tree-id3793 . -97) (undo-tree-id3794 . -97) (undo-tree-id3795 . -97) (undo-tree-id3796 . -97) (undo-tree-id3797 . -97) (undo-tree-id3798 . -97) (undo-tree-id3799 . -97) (undo-tree-id3800 . -97) (undo-tree-id3801 . -97) (undo-tree-id3802 . -97) (undo-tree-id3803 . -97) (undo-tree-id3804 . -97) (undo-tree-id3805 . -97) (undo-tree-id3806 . -97) (undo-tree-id3807 . -97) (undo-tree-id3808 . -97) (undo-tree-id3809 . -97) (undo-tree-id3810 . -97) (undo-tree-id3811 . -97) (undo-tree-id3812 . -97) (undo-tree-id3813 . -97) (undo-tree-id3814 . -97) (undo-tree-id3815 . -97) (undo-tree-id3816 . -97) (undo-tree-id3817 . -97) (undo-tree-id3818 . -97) (undo-tree-id3819 . -97) (undo-tree-id3820 . -97) (undo-tree-id3821 . -75) (undo-tree-id3822 . -75) (undo-tree-id3823 . -75) (undo-tree-id3824 . -75) (undo-tree-id3825 . -75) (undo-tree-id3826 . -75) (undo-tree-id3827 . -75) (undo-tree-id3828 . -75) (undo-tree-id3829 . -75) (undo-tree-id3830 . -75) (undo-tree-id3831 . -75) (undo-tree-id3832 . -75) (undo-tree-id3833 . -75) (undo-tree-id3834 . -75) (undo-tree-id3835 . -75) (undo-tree-id3836 . -75) (undo-tree-id3837 . -75) (undo-tree-id3838 . -75) (undo-tree-id3839 . -75) (undo-tree-id3840 . -75) (undo-tree-id3841 . -75) (undo-tree-id3842 . -75) (undo-tree-id3843 . -75) (undo-tree-id3844 . -75) (undo-tree-id3845 . -75) (undo-tree-id3846 . -75) (undo-tree-id3847 . -75) (undo-tree-id3848 . -75) (undo-tree-id3849 . -75) (undo-tree-id3850 . -75) (undo-tree-id3851 . -75) (undo-tree-id3852 . -75) (undo-tree-id3853 . -75) (undo-tree-id3854 . -75) (undo-tree-id3855 . -75) (undo-tree-id3856 . -75) (undo-tree-id3857 . -75) (undo-tree-id3858 . -75) (undo-tree-id3859 . -75) (undo-tree-id3860 . -75) (undo-tree-id3861 . -75) (undo-tree-id3862 . -75) (undo-tree-id3863 . -75) (undo-tree-id3864 . -75) (undo-tree-id3865 . -75) (undo-tree-id3866 . -75) (undo-tree-id3867 . -75) (undo-tree-id3868 . -75) (undo-tree-id3869 . -75) (undo-tree-id3870 . -75)) ((1661 . 2394)) (25306 58631 830430 445000) 0 nil])
([nil nil ((#("
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))
" 0 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 24 (fontified t face font-lock-constant-face) 24 27 (fontified t) 27 34 (fontified t face font-lock-builtin-face) 34 39 (fontified t) 39 46 (fontified t face font-lock-builtin-face) 46 47 (fontified t) 47 67 (fontified t) 67 68 (fontified t)) . 1661)) nil (25306 58880 412226 779000) 0 nil] [nil nil ((#("
(use-package marginalia
  :ensure t
  :config
" 0 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 24 (fontified t face font-lock-constant-face) 24 27 (fontified t) 27 34 (fontified t face font-lock-builtin-face) 34 39 (fontified t) 39 46 (fontified t face font-lock-builtin-face) 46 47 (fontified t)) . 1661) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1)) ((1661 . 1708)) (25306 58793 655187 386000) 0 nil])
nil
nil
nil
([nil nil ((#("
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         (\"C-c h\" . consult-history)
         (\"C-c m\" . consult-mode-command)
         (\"C-c k\" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         (\"C-x M-:\" . consult-complex-command)     ;; orig. repeat-complex-command
         (\"C-x b\" . consult-buffer)                ;; orig. switch-to-buffer
         (\"C-x 4 b\" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         (\"C-x 5 b\" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         (\"C-x r b\" . consult-bookmark)            ;; orig. bookmark-jump
         (\"C-x p b\" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         (\"M-#\" . consult-register-load)
         (\"M-'\" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         (\"C-M-#\" . consult-register)
         ;; Other custom bindings
         (\"M-y\" . consult-yank-pop)                ;; orig. yank-pop
         (\"<help> a\" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         (\"M-g e\" . consult-compile-error)
         (\"M-g f\" . consult-flymake)               ;; Alternative: consult-flycheck
         (\"M-g g\" . consult-goto-line)             ;; orig. goto-line
         (\"M-g M-g\" . consult-goto-line)           ;; orig. goto-line
         (\"M-g o\" . consult-outline)               ;; Alternative: consult-org-heading
         (\"M-g m\" . consult-mark)
         (\"M-g k\" . consult-global-mark)
         (\"M-g i\" . consult-imenu)
         (\"M-g I\" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         (\"M-s d\" . consult-find)
         (\"M-s D\" . consult-locate)
         (\"M-s g\" . consult-grep)
         (\"M-s G\" . consult-git-grep)
         (\"M-s r\" . consult-ripgrep)
         (\"M-s l\" . consult-line)
         (\"M-s L\" . consult-line-multi)
         (\"M-s m\" . consult-multi-occur)
         (\"M-s k\" . consult-keep-lines)
         (\"M-s u\" . consult-focus-lines)
         ;; Isearch integration
         (\"M-s e\" . consult-isearch-history)
         :map isearch-mode-map
         (\"M-e\" . consult-isearch-history)         ;; orig. isearch-edit-string
         (\"M-s e\" . consult-isearch-history)       ;; orig. isearch-edit-string
         (\"M-s l\" . consult-line)                  ;; needed by consult-line to detect isearch
         (\"M-s L\" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         (\"M-s\" . consult-history)                 ;; orig. next-matching-history-element
         (\"M-r\" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd \"M-.\"))
  ;; (setq consult-preview-key (list (kbd \"<S-down>\") (kbd \"<S-up>\")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key (kbd \"M-.\"))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key \"<\") ;; (kbd \"C-+\")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key \"?\") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root \"projectile\")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file \".\" \".git\")))
)

" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 38 (fontified t face font-lock-comment-face) 38 39 (fontified t) 39 50 (fontified t face font-lock-keyword-face) 50 51 (fontified t) 51 58 (fontified t face font-lock-constant-face) 58 61 (fontified t) 61 64 (fontified t face font-lock-comment-delimiter-face) 64 104 (fontified t face font-lock-comment-face) 104 115 (fontified t face (font-lock-constant-face font-lock-comment-face)) 115 118 (fontified t face font-lock-comment-face) 118 120 (fontified t) 120 125 (fontified t face font-lock-builtin-face) 125 127 (fontified t) 127 130 (fontified t face font-lock-comment-delimiter-face) 130 163 (fontified t face font-lock-comment-face) 163 173 (fontified t) 173 180 (fontified t face font-lock-string-face) 180 210 (fontified t) 210 217 (fontified t face font-lock-string-face) 217 252 (fontified t) 252 259 (fontified t face font-lock-string-face) 259 287 (fontified t) 287 290 (fontified t face font-lock-comment-delimiter-face) 290 315 (fontified t face font-lock-comment-face) 315 325 (fontified t) 325 334 (fontified t face font-lock-string-face) 334 347 (fontified t) 347 366 (fontified t) 366 369 (fontified t face font-lock-comment-delimiter-face) 369 398 (fontified t face font-lock-comment-face) 398 408 (fontified t) 408 415 (fontified t face font-lock-string-face) 415 449 (fontified t) 449 452 (fontified t face font-lock-comment-delimiter-face) 452 475 (fontified t face font-lock-comment-face) 475 485 (fontified t) 485 494 (fontified t face font-lock-string-face) 494 526 (fontified t) 526 529 (fontified t face font-lock-comment-delimiter-face) 529 565 (fontified t face font-lock-comment-face) 565 575 (fontified t) 575 584 (fontified t face font-lock-string-face) 584 616 (fontified t) 616 619 (fontified t face font-lock-comment-delimiter-face) 619 654 (fontified t face font-lock-comment-face) 654 664 (fontified t) 664 673 (fontified t face font-lock-string-face) 673 705 (fontified t) 705 708 (fontified t face font-lock-comment-delimiter-face) 708 728 (fontified t face font-lock-comment-face) 728 738 (fontified t) 738 747 (fontified t face font-lock-string-face) 747 779 (fontified t) 779 782 (fontified t face font-lock-comment-delimiter-face) 782 794 (fontified t face font-lock-comment-face) 794 813 (fontified t face font-lock-comment-face) 813 822 (fontified t) 822 825 (fontified t face font-lock-comment-delimiter-face) 825 870 (fontified t face font-lock-comment-face) 870 880 (fontified t) 880 885 (fontified t face font-lock-string-face) 885 913 (fontified t) 913 921 (fontified t) 921 926 (fontified t face font-lock-string-face) 926 962 (fontified t) 962 965 (fontified t face font-lock-comment-delimiter-face) 965 1002 (fontified t face font-lock-comment-face) 1002 1005 (fontified t) 1005 1012 (fontified t) 1012 1019 (fontified t face font-lock-string-face) 1019 1040 (fontified t) 1040 1049 (fontified t) 1049 1052 (fontified t face font-lock-comment-delimiter-face) 1052 1071 (fontified t face font-lock-comment-face) 1071 1072 (fontified t face font-lock-comment-face) 1072 1074 (fontified t face font-lock-comment-face) 1074 1084 (fontified t) 1084 1089 (fontified t face font-lock-string-face) 1089 1125 (fontified t) 1125 1128 (fontified t face font-lock-comment-delimiter-face) 1128 1143 (fontified t face font-lock-comment-face) 1143 1153 (fontified t) 1153 1163 (fontified t face font-lock-string-face) 1163 1194 (fontified t) 1194 1197 (fontified t face font-lock-comment-delimiter-face) 1197 1219 (fontified t face font-lock-comment-face) 1219 1228 (fontified t) 1228 1231 (fontified t face font-lock-comment-delimiter-face) 1231 1255 (fontified t face font-lock-comment-face) 1255 1265 (fontified t) 1265 1272 (fontified t face font-lock-string-face) 1272 1308 (fontified t) 1308 1315 (fontified t face font-lock-string-face) 1315 1349 (fontified t) 1349 1352 (fontified t face font-lock-comment-delimiter-face) 1352 1382 (fontified t face font-lock-comment-face) 1382 1392 (fontified t) 1392 1399 (fontified t face font-lock-string-face) 1399 1431 (fontified t) 1431 1432 (fontified t) 1432 1433 (fontified t) 1433 1436 (fontified t face font-lock-comment-delimiter-face) 1436 1452 (fontified t face font-lock-comment-face) 1452 1462 (fontified t) 1462 1471 (fontified t face font-lock-string-face) 1471 1500 (fontified t) 1500 1501 (fontified t) 1501 1503 (fontified t) 1503 1506 (face font-lock-comment-delimiter-face fontified t) 1506 1522 (face font-lock-comment-face fontified t) 1522 1532 (fontified t) 1532 1539 (fontified t face font-lock-string-face) 1539 1573 (fontified t) 1573 1576 (fontified t face font-lock-comment-delimiter-face) 1576 1609 (fontified t face font-lock-comment-face) 1609 1619 (fontified t) 1619 1626 (fontified t face font-lock-string-face) 1626 1653 (fontified t) 1653 1660 (fontified t face font-lock-string-face) 1660 1694 (fontified t) 1694 1701 (fontified t face font-lock-string-face) 1701 1729 (fontified t) 1729 1736 (fontified t face font-lock-string-face) 1736 1769 (fontified t) 1769 1772 (fontified t face font-lock-comment-delimiter-face) 1772 1798 (fontified t face font-lock-comment-face) 1798 1808 (fontified t) 1808 1815 (fontified t face font-lock-string-face) 1815 1842 (fontified t) 1842 1849 (fontified t face font-lock-string-face) 1849 1878 (fontified t) 1878 1885 (fontified t face font-lock-string-face) 1885 1912 (fontified t) 1912 1919 (fontified t face font-lock-string-face) 1919 1950 (fontified t) 1950 1957 (fontified t face font-lock-string-face) 1957 1987 (fontified t) 1987 1994 (fontified t face font-lock-string-face) 1994 2021 (fontified t) 2021 2028 (fontified t face font-lock-string-face) 2028 2061 (fontified t) 2061 2068 (fontified t face font-lock-string-face) 2068 2102 (fontified t) 2102 2109 (fontified t face font-lock-string-face) 2109 2142 (fontified t) 2142 2149 (fontified t face font-lock-string-face) 2149 2182 (fontified t) 2182 2185 (fontified t face font-lock-comment-delimiter-face) 2185 2205 (fontified t face font-lock-comment-face) 2205 2215 (fontified t) 2215 2222 (fontified t face font-lock-string-face) 2222 2259 (fontified t) 2259 2263 (fontified t face font-lock-builtin-face) 2263 2291 (fontified t) 2291 2296 (fontified t face font-lock-string-face) 2296 2313 (fontified t) 2313 2332 (fontified t) 2332 2335 (fontified t face font-lock-comment-delimiter-face) 2335 2361 (fontified t face font-lock-comment-face) 2361 2371 (fontified t) 2371 2378 (fontified t face font-lock-string-face) 2378 2412 (fontified t) 2412 2415 (fontified t face font-lock-comment-delimiter-face) 2415 2441 (fontified t face font-lock-comment-face) 2441 2451 (fontified t) 2451 2458 (fontified t face font-lock-string-face) 2458 2492 (fontified t) 2492 2495 (fontified t face font-lock-comment-delimiter-face) 2495 2502 (fontified t face font-lock-comment-face) 2502 2536 (fontified t face font-lock-comment-face) 2536 2546 (fontified t) 2546 2553 (fontified t face font-lock-string-face) 2553 2574 (fontified t) 2574 2587 (fontified t) 2587 2590 (fontified t face font-lock-comment-delimiter-face) 2590 2631 (fontified t face font-lock-comment-face) 2631 2640 (fontified t) 2640 2643 (fontified t face font-lock-comment-delimiter-face) 2643 2662 (fontified t face font-lock-comment-face) 2662 2671 (fontified t) 2671 2675 (fontified t face font-lock-builtin-face) 2675 2707 (fontified t) 2707 2712 (fontified t face font-lock-string-face) 2712 2748 (fontified t) 2748 2751 (fontified t face font-lock-comment-delimiter-face) 2751 2787 (fontified t face font-lock-comment-face) 2787 2797 (fontified t) 2797 2802 (fontified t face font-lock-string-face) 2802 2838 (fontified t) 2838 2841 (fontified t face font-lock-comment-delimiter-face) 2841 2881 (fontified t face font-lock-comment-face) 2881 2884 (fontified t) 2884 2887 (fontified t face font-lock-comment-delimiter-face) 2887 2952 (fontified t face font-lock-comment-face) 2952 2958 (fontified t face font-lock-comment-face) 2958 2960 (fontified t) 2960 2963 (fontified t face font-lock-comment-delimiter-face) 2963 3012 (fontified t face font-lock-comment-face) 3012 3014 (fontified t) 3014 3019 (fontified t face font-lock-builtin-face) 3019 3022 (fontified t) 3022 3075 (fontified t) 3075 3078 (fontified t) 3078 3081 (fontified t face font-lock-comment-delimiter-face) 3081 3135 (fontified t face font-lock-comment-face) 3135 3137 (fontified t) 3137 3142 (fontified t face font-lock-builtin-face) 3142 3146 (fontified t) 3146 3149 (fontified t face font-lock-comment-delimiter-face) 3149 3222 (fontified t face font-lock-comment-face) 3222 3224 (fontified t) 3224 3227 (fontified t face font-lock-comment-delimiter-face) 3227 3240 (fontified t face font-lock-comment-face) 3240 3256 (fontified t face (font-lock-constant-face font-lock-comment-face)) 3256 3260 (fontified t face font-lock-comment-face) 3260 3281 (fontified t face (font-lock-constant-face font-lock-comment-face)) 3281 3284 (fontified t face font-lock-comment-face) 3284 3286 (fontified t) 3286 3289 (fontified t face font-lock-comment-delimiter-face) 3289 3290 (fontified t face font-lock-comment-face) 3290 3312 (fontified t face (font-lock-constant-face font-lock-comment-face)) 3312 3339 (fontified t face font-lock-comment-face) 3339 3342 (fontified t) 3342 3346 (fontified t face font-lock-keyword-face) 3346 3438 (fontified t) 3438 3441 (fontified t face font-lock-comment-delimiter-face) 3441 3487 (fontified t face font-lock-comment-face) 3487 3489 (fontified t) 3489 3492 (fontified t face font-lock-comment-delimiter-face) 3492 3561 (fontified t face font-lock-comment-face) 3561 3594 (fontified t) 3594 3603 (fontified t face font-lock-builtin-face) 3603 3634 (fontified t) 3634 3637 (fontified t face font-lock-comment-delimiter-face) 3637 3687 (fontified t face font-lock-comment-face) 3687 3690 (fontified t) 3690 3694 (fontified t face font-lock-keyword-face) 3694 3793 (fontified t) 3793 3796 (fontified t face font-lock-comment-delimiter-face) 3796 3856 (fontified t face font-lock-comment-face) 3856 3858 (fontified t) 3858 3861 (fontified t face font-lock-comment-delimiter-face) 3861 3895 (fontified t face font-lock-comment-face) 3895 3897 (fontified t) 3897 3904 (fontified t face font-lock-builtin-face) 3904 3908 (fontified t) 3908 3911 (fontified t face font-lock-comment-delimiter-face) 3911 3959 (fontified t face font-lock-comment-face) 3959 3961 (fontified t) 3961 3964 (fontified t face font-lock-comment-delimiter-face) 3964 4013 (fontified t face font-lock-comment-face) 4013 4015 (fontified t) 4015 4018 (fontified t face font-lock-comment-delimiter-face) 4018 4036 (fontified t face font-lock-comment-face) 4036 4050 (fontified t face font-lock-comment-face) 4050 4052 (fontified t) 4052 4055 (fontified t face font-lock-comment-delimiter-face) 4055 4094 (fontified t face font-lock-comment-face) 4094 4096 (fontified t) 4096 4099 (fontified t face font-lock-comment-delimiter-face) 4099 4165 (fontified t face font-lock-comment-face) 4165 4167 (fontified t) 4167 4170 (fontified t face font-lock-comment-delimiter-face) 4170 4237 (fontified t face font-lock-comment-face) 4237 4239 (fontified t) 4239 4242 (fontified t face font-lock-comment-delimiter-face) 4242 4289 (fontified t face font-lock-comment-face) 4289 4306 (fontified t face (font-lock-constant-face font-lock-comment-face)) 4306 4315 (fontified t face font-lock-comment-face) 4315 4318 (fontified t) 4318 4335 (fontified t face font-lock-keyword-face) 4335 4356 (fontified t) 4356 4368 (fontified t face font-lock-builtin-face) 4368 4371 (fontified t) 4371 4380 (fontified t face font-lock-builtin-face) 4380 4575 (fontified t) 4575 4587 (fontified t) 4587 4590 (fontified t) 4590 4602 (fontified t face font-lock-builtin-face) 4602 4608 (fontified t) 4608 4613 (fontified t face font-lock-string-face) 4613 4619 (fontified t) 4619 4622 (fontified t face font-lock-comment-delimiter-face) 4622 4662 (fontified t face font-lock-comment-face) 4662 4664 (fontified t) 4664 4667 (fontified t face font-lock-comment-delimiter-face) 4667 4704 (fontified t face font-lock-comment-face) 4704 4707 (fontified t) 4707 4711 (fontified t face font-lock-keyword-face) 4711 4731 (fontified t) 4731 4734 (fontified t face font-lock-string-face) 4734 4736 (fontified t) 4736 4739 (fontified t face font-lock-comment-delimiter-face) 4739 4751 (fontified t face font-lock-comment-face) 4751 4754 (fontified t) 4754 4757 (fontified t face font-lock-comment-delimiter-face) 4757 4817 (fontified t face font-lock-comment-face) 4817 4819 (fontified t) 4819 4822 (fontified t face font-lock-comment-delimiter-face) 4822 4843 (fontified t face font-lock-comment-face) 4843 4869 (fontified t face (font-lock-constant-face font-lock-comment-face)) 4869 4893 (fontified t face font-lock-comment-face) 4893 4895 (fontified t) 4895 4898 (fontified t face font-lock-comment-delimiter-face) 4898 4985 (fontified t face font-lock-comment-face) 4985 4988 (fontified t) 4988 4991 (fontified t face font-lock-comment-delimiter-face) 4991 5003 (fontified t face font-lock-comment-face) 5003 5027 (fontified t face (font-lock-constant-face font-lock-comment-face)) 5027 5035 (fontified t face font-lock-comment-face) 5035 5047 (fontified t face (font-lock-constant-face font-lock-comment-face)) 5047 5066 (fontified t face font-lock-comment-face) 5066 5068 (fontified t) 5068 5071 (fontified t face font-lock-comment-delimiter-face) 5071 5127 (fontified t face font-lock-comment-face) 5127 5129 (fontified t) 5129 5132 (fontified t face font-lock-comment-delimiter-face) 5132 5190 (fontified t face font-lock-comment-face) 5190 5192 (fontified t) 5192 5197 (fontified t face font-lock-comment-delimiter-face) 5197 5225 (fontified t face font-lock-comment-face) 5225 5227 (fontified t) 5227 5230 (fontified t face font-lock-comment-delimiter-face) 5230 5299 (fontified t face font-lock-comment-face) 5299 5301 (fontified t) 5301 5306 (fontified t face font-lock-comment-delimiter-face) 5306 5349 (fontified t face font-lock-comment-face) 5349 5351 (fontified t) 5351 5354 (fontified t face font-lock-comment-delimiter-face) 5354 5403 (fontified t face font-lock-comment-face) 5403 5405 (fontified t) 5405 5408 (fontified t face font-lock-comment-delimiter-face) 5408 5479 (fontified t face font-lock-comment-face) 5479 5481 (fontified t) 5481 5486 (fontified t face font-lock-comment-delimiter-face) 5486 5509 (fontified t face font-lock-comment-face) 5509 5511 (fontified t) 5511 5514 (fontified t face font-lock-comment-delimiter-face) 5514 5550 (fontified t face font-lock-comment-face) 5550 5573 (fontified t face font-lock-comment-face) 5573 5575 (fontified t) 5575 5580 (fontified t face font-lock-comment-delimiter-face) 5580 5606 (fontified t face font-lock-comment-face) 5606 5608 (fontified t) 5608 5611 (fontified t face font-lock-comment-delimiter-face) 5611 5692 (fontified t face font-lock-comment-face) 5692 5695 (fontified t)) . 1661) (undo-tree-id4284 . -5694) (undo-tree-id4285 . -5694) (undo-tree-id4286 . -1298) (undo-tree-id4287 . -1298) (undo-tree-id4288 . -3435) (undo-tree-id4289 . -5694) (undo-tree-id4290 . -5694) 7355) nil (25306 58880 412226 243000) 0 nil])
nil
([nil nil ((#("(use-package projectile)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 23 (fontified t face font-lock-constant-face) 23 25 (fontified t)) . 1662) (undo-tree-id4280 . 25) (undo-tree-id4281 . -1) (undo-tree-id4282 . 2) (undo-tree-id4283 . -24)) nil (25306 58880 412221 671000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1662) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1)) nil (25306 58880 412215 153000) 0 nil])
([nil nil ((#("
(use-package embark
  :ensure t

  :bind
  ((\"C-.\" . embark-act)         ;; pick some comfortable binding
   (\"C-;\" . embark-dwim)        ;; good alternative: M-.
   (\"C-h B\" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\"
                 nil
                 (window-parameters (mode-line-format . none)))))

;" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 20 (fontified t face font-lock-constant-face) 20 21 (fontified t) 21 23 (fontified t) 23 30 (fontified t face font-lock-builtin-face) 30 36 (fontified t) 36 41 (fontified t face font-lock-builtin-face) 41 46 (fontified t) 46 51 (fontified t face font-lock-string-face) 51 74 (fontified t) 74 77 (fontified t face font-lock-comment-delimiter-face) 77 107 (fontified t face font-lock-comment-face) 107 111 (fontified t) 111 116 (fontified t face font-lock-string-face) 116 139 (fontified t) 139 142 (fontified t face font-lock-comment-delimiter-face) 142 164 (fontified t face font-lock-comment-face) 164 168 (fontified t) 168 175 (fontified t face font-lock-string-face) 175 196 (fontified t) 196 199 (fontified t face font-lock-comment-delimiter-face) 199 216 (fontified t face font-lock-comment-face) 216 233 (fontified t face (font-lock-constant-face font-lock-comment-face)) 233 235 (fontified t face font-lock-comment-face) 235 238 (fontified t) 238 243 (fontified t face font-lock-builtin-face) 243 247 (fontified t) 247 250 (fontified t face font-lock-comment-delimiter-face) 250 315 (fontified t face font-lock-comment-face) 315 318 (fontified t) 318 322 (fontified t face font-lock-keyword-face) 322 366 (fontified t) 366 373 (fontified t) 373 376 (fontified t) 376 383 (fontified t face font-lock-builtin-face) 383 387 (fontified t) 387 390 (fontified t face font-lock-comment-delimiter-face) 390 448 (fontified t face font-lock-comment-face) 448 502 (fontified t) 502 524 (fontified t face font-lock-string-face) 524 526 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 526 527 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 527 531 (fontified t face font-lock-string-face) 531 533 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 533 534 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 534 545 (fontified t face font-lock-string-face) 545 547 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 547 548 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 548 552 (fontified t face font-lock-string-face) 552 641 (fontified t) 641 642 (fontified t face font-lock-comment-delimiter-face)) . 1661) (undo-tree-id4295 . -641) (undo-tree-id4296 . -641) (undo-tree-id4297 . -1) (undo-tree-id4298 . -641) (undo-tree-id4299 . -641) 2302 (t 25306 58880 433126 179000)) nil (25306 58913 461744 895000) 0 nil])
([nil nil ((#("; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 59 (fontified t face font-lock-comment-face) 59 60 (fontified t) 60 71 (fontified t face font-lock-keyword-face) 71 72 (fontified t) 72 86 (fontified t face font-lock-constant-face) 86 89 (fontified t) 89 96 (fontified t face font-lock-builtin-face) 96 101 (fontified t) 101 107 (fontified t face font-lock-builtin-face) 107 127 (fontified t) 127 134 (fontified t face font-lock-builtin-face) 134 137 (fontified t) 137 139 (fontified t face font-lock-comment-delimiter-face) 139 181 (fontified t face font-lock-comment-face) 181 183 (fontified t) 183 186 (fontified t face font-lock-comment-delimiter-face) 186 245 (fontified t face font-lock-comment-face) 245 247 (fontified t) 247 250 (fontified t face font-lock-comment-delimiter-face) 250 286 (fontified t face font-lock-comment-face) 286 288 (fontified t) 288 293 (fontified t face font-lock-builtin-face) 293 351 (fontified t)) . 1661) (undo-tree-id4316 . -351) (undo-tree-id4317 . -351) (undo-tree-id4318 . -351) 2012) nil (25306 59049 521899 902000) 0 nil] [nil nil ((#("; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 59 (fontified t face font-lock-comment-face) 59 60 (fontified t) 60 71 (fontified t face font-lock-keyword-face) 71 72 (fontified t) 72 86 (fontified t face font-lock-constant-face) 86 89 (fontified t) 89 96 (fontified t face font-lock-builtin-face) 96 101 (fontified t) 101 107 (fontified t face font-lock-builtin-face) 107 127 (fontified t) 127 134 (fontified t face font-lock-builtin-face) 134 137 (fontified t) 137 139 (fontified t face font-lock-comment-delimiter-face) 139 181 (fontified t face font-lock-comment-face) 181 183 (fontified t) 183 186 (fontified t face font-lock-comment-delimiter-face) 186 245 (fontified t face font-lock-comment-face) 245 247 (fontified t) 247 250 (fontified t face font-lock-comment-delimiter-face) 250 286 (fontified t face font-lock-comment-face) 286 288 (fontified t) 288 293 (fontified t face font-lock-builtin-face) 293 352 (fontified t)) . 1661) (undo-tree-id4291 . -351) (undo-tree-id4292 . -351) (undo-tree-id4293 . -351) (undo-tree-id4294 . -351) 2012) ((1661 . 2013)) (25306 58913 461660 738000) 0 nil])
([nil nil ((#(";; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 23 (fontified t face font-lock-comment-face) 23 32 (fontified t face (font-lock-constant-face font-lock-comment-face)) 32 52 (fontified t face font-lock-comment-face) 52 53 (fontified t) 53 64 (fontified t face font-lock-keyword-face) 64 65 (fontified t) 65 74 (fontified t face font-lock-constant-face) 74 77 (fontified t) 77 82 (fontified t face font-lock-builtin-face) 82 85 (fontified t) 85 88 (fontified t face font-lock-comment-delimiter-face) 88 147 (fontified t face font-lock-comment-face) 147 149 (fontified t) 149 152 (fontified t face font-lock-comment-delimiter-face) 152 209 (fontified t face font-lock-comment-face) 209 211 (fontified t) 211 220 (fontified t face font-lock-comment-delimiter-face) 220 288 (fontified t face font-lock-comment-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-keyword-face) 295 358 (fontified t) 358 374 (fontified t) 374 452 (fontified t)) . 1662) (undo-tree-id4315 . 452)) nil (25306 59049 521897 849000) 0 nil])
nil
([nil nil ((#("
(use-package smartparens
  :diminish smartparens-mode
  :defer 1
  :config
  ;; Load default smartparens rules for various languages
  (require 'smartparens-config)
  (setq sp-max-prefix-length 25)
  (setq sp-max-pair-length 4)
  (setq sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil)

  (with-eval-after-load 'evil
    (setq sp-show-pair-from-inside t)
    (setq sp-cancel-autoskip-on-backward-movement nil)
    (setq sp-pair-overlay-keymap (make-sparse-keymap)))

  (let ((unless-list '(sp-point-before-word-p
                       sp-point-after-word-p
                       sp-point-before-same-p)))
    (sp-pair \"'\"  nil :unless unless-list)
    (sp-pair \"\\\"\" nil :unless unless-list))

  ;; In lisps ( should open a new form if before another parenthesis
  (sp-local-pair sp-lisp-modes \"(\" \")\" :unless '(:rem sp-point-before-same-p))

  ;; Don't do square-bracket space-expansion where it doesn't make sense to
  (sp-local-pair '(emacs-lisp-mode org-mode markdown-mode gfm-mode)
                 \"[\" nil :post-handlers '(:rem (\"| \" \"SPC\")))


  (dolist (brace '(\"(\" \"{\" \"[\"))
    (sp-pair brace nil
             :post-handlers '((\"||\\n[i]\" \"RET\") (\"| \" \"SPC\"))
             ;; Don't autopair opening braces if before a word character or
             ;; other opening brace. The rationale: it interferes with manual
             ;; balancing of braces, and is odd form to have s-exps with no
             ;; whitespace in between, e.g. ()()(). Insert whitespace if
             ;; genuinely want to start a new form in the middle of a word.
             :unless '(sp-point-before-word-p sp-point-before-same-p)))
  (smartparens-global-mode t))

" 0 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 25 (fontified t face font-lock-constant-face) 25 28 (fontified t) 28 37 (fontified t face font-lock-builtin-face) 37 57 (fontified t) 57 63 (fontified t face font-lock-builtin-face) 63 68 (fontified t) 68 75 (fontified t face font-lock-builtin-face) 75 78 (fontified t) 78 81 (fontified t face font-lock-comment-delimiter-face) 81 134 (fontified t face font-lock-comment-face) 134 137 (fontified t) 137 144 (fontified t face font-lock-keyword-face) 144 146 (fontified t) 146 164 (fontified t face font-lock-constant-face) 164 169 (fontified t) 169 173 (fontified t face font-lock-keyword-face) 173 176 (fontified t) 176 199 (fontified t) 199 202 (fontified t) 202 206 (fontified t face font-lock-keyword-face) 206 232 (fontified t) 232 235 (fontified t face font-lock-keyword-face) 235 236 (fontified t face font-lock-keyword-face) 236 267 (fontified t) 267 352 (fontified t) 352 372 (fontified t face font-lock-keyword-face) 372 384 (fontified t) 384 388 (fontified t face font-lock-keyword-face) 388 422 (fontified t) 422 426 (fontified t face font-lock-keyword-face) 426 477 (fontified t) 477 481 (fontified t face font-lock-keyword-face) 481 528 (fontified t) 528 532 (fontified t) 532 535 (fontified t face font-lock-keyword-face) 535 580 (fontified t) 580 620 (fontified t) 620 682 (fontified t) 682 685 (fontified t face font-lock-string-face) 685 691 (fontified t) 691 698 (fontified t face font-lock-builtin-face) 698 725 (fontified t) 725 729 (fontified t face font-lock-string-face) 729 734 (fontified t) 734 741 (fontified t face font-lock-builtin-face) 741 759 (fontified t) 759 762 (fontified t face font-lock-comment-delimiter-face) 762 826 (fontified t face font-lock-comment-face) 826 857 (fontified t) 857 860 (fontified t face font-lock-string-face) 860 861 (fontified t) 861 864 (fontified t face font-lock-string-face) 864 865 (fontified t) 865 872 (fontified t face font-lock-builtin-face) 872 875 (fontified t) 875 879 (fontified t face font-lock-builtin-face) 879 902 (fontified t) 902 905 (fontified t) 905 908 (fontified t) 908 911 (fontified t face font-lock-comment-delimiter-face) 911 980 (fontified t face font-lock-comment-face) 980 981 (fontified t face font-lock-comment-face) 981 982 (face font-lock-comment-face fontified t) 982 1033 (fontified t) 1033 1050 (fontified t) 1050 1067 (fontified t) 1067 1070 (fontified t face font-lock-string-face) 1070 1075 (fontified t) 1075 1089 (fontified t face font-lock-builtin-face) 1089 1092 (fontified t) 1092 1096 (fontified t face font-lock-builtin-face) 1096 1098 (fontified t) 1098 1102 (fontified t face font-lock-string-face) 1102 1103 (fontified t) 1103 1108 (fontified t face font-lock-string-face) 1108 1117 (fontified t) 1117 1123 (fontified t face font-lock-keyword-face) 1123 1133 (fontified t) 1133 1136 (fontified t face font-lock-string-face) 1136 1137 (fontified t) 1137 1140 (fontified t face font-lock-string-face) 1140 1141 (fontified t) 1141 1144 (fontified t face font-lock-string-face) 1144 1183 (fontified t) 1183 1197 (fontified t face font-lock-builtin-face) 1197 1201 (fontified t) 1201 1210 (fontified t face font-lock-string-face) 1210 1211 (fontified t) 1211 1216 (fontified t face font-lock-string-face) 1216 1219 (fontified t) 1219 1223 (fontified t face font-lock-string-face) 1223 1224 (fontified t) 1224 1229 (fontified t face font-lock-string-face) 1229 1245 (fontified t) 1245 1248 (fontified t face font-lock-comment-delimiter-face) 1248 1308 (fontified t face font-lock-comment-face) 1308 1321 (fontified t) 1321 1324 (fontified t face font-lock-comment-delimiter-face) 1324 1386 (fontified t face font-lock-comment-face) 1386 1399 (fontified t) 1399 1402 (fontified t face font-lock-comment-delimiter-face) 1402 1462 (fontified t face font-lock-comment-face) 1462 1475 (fontified t) 1475 1478 (fontified t face font-lock-comment-delimiter-face) 1478 1535 (fontified t face font-lock-comment-face) 1535 1548 (fontified t) 1548 1551 (fontified t face font-lock-comment-delimiter-face) 1551 1611 (fontified t face font-lock-comment-face) 1611 1624 (fontified t) 1624 1631 (fontified t face font-lock-builtin-face) 1631 1715 (fontified t)) . 2182) (undo-tree-id4310 . -1714) (undo-tree-id4311 . -1714) (undo-tree-id4312 . -305) (undo-tree-id4313 . -1714) (undo-tree-id4314 . -1714) 3896) nil (25306 59049 521896 702000) 0 nil])
([nil nil ((#(";;; For packaged versions which must use `require':
(use-package modus-themes
  :ensure
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend))

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-vivendi) ;; OR (modus-themes-load-vivendi)
  :bind (\"<f5>\" . modus-themes-toggle))
" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 27 (fontified t face font-lock-comment-face) 27 28 (fontified t face font-lock-comment-face) 28 42 (fontified t face font-lock-comment-face) 42 49 (fontified t face (font-lock-constant-face font-lock-comment-face)) 49 52 (fontified t face font-lock-comment-face) 52 53 (fontified t) 53 54 (fontified t face font-lock-keyword-face) 54 64 (fontified t face font-lock-keyword-face) 64 65 (fontified t) 65 74 (fontified t face font-lock-constant-face) 74 77 (fontified t face font-lock-constant-face) 77 78 (fontified t) 78 80 (fontified t) 80 87 (fontified t face font-lock-builtin-face) 87 90 (fontified t) 90 95 (fontified t face font-lock-builtin-face) 95 98 (fontified t) 98 101 (fontified t face font-lock-comment-delimiter-face) 101 157 (fontified t face font-lock-comment-face) 157 160 (fontified t) 160 164 (fontified t face font-lock-keyword-face) 164 292 (fontified t) 292 295 (fontified t face font-lock-comment-delimiter-face) 295 340 (fontified t face font-lock-comment-face) 340 371 (fontified t) 371 378 (fontified t face font-lock-builtin-face) 378 381 (fontified t) 381 384 (fontified t face font-lock-comment-delimiter-face) 384 415 (fontified t face font-lock-comment-face) 415 445 (fontified t) 445 448 (fontified t face font-lock-comment-delimiter-face) 448 479 (fontified t face font-lock-comment-face) 479 481 (fontified t) 481 486 (fontified t face font-lock-builtin-face) 486 488 (fontified t) 488 494 (fontified t face font-lock-string-face) 494 519 (fontified t)) . 1663) (undo-tree-id4305 . -519) (undo-tree-id4306 . -519) (undo-tree-id4307 . -519) (undo-tree-id4308 . -519) (undo-tree-id4309 . -96)) nil (25306 59049 521892 611000) 0 nil])
([nil nil ((#("
;; \"Enable Flyspell mode, which highlights all misspelled words. \"
(use-package flyspell
  :defer t
  :config

  (add-to-list 'ispell-skip-region-alist '(\"~\" \"~\"))
  (add-to-list 'ispell-skip-region-alist '(\"=\" \"=\"))
  (add-to-list 'ispell-skip-region-alist '(\"^#\\\\+BEGIN_SRC\" . \"^#\\\\+END_SRC\"))
  (add-to-list 'ispell-skip-region-alist '(\"^#\\\\+BEGIN_EXPORT\" . \"^#\\\\+END_EXPORT\"))
  (add-to-list 'ispell-skip-region-alist '(\"^#\\\\+BEGIN_EXPORT\" . \"^#\\\\+END_EXPORT\"))
  (add-to-list 'ispell-skip-region-alist '(\":\\\\(PROPERTIES\\\\|LOGBOOK\\\\):\" . \":END:\"))

  (dolist (mode '(org-mode-hook
                  mu4e-compose-mode-hook))
    (add-hook mode (lambda () (flyspell-mode 1))))

  (setq ispell-extra-args '(\"--sug-mode=ultra\"))

  (setq flyspell-issue-welcome-flag nil
        flyspell-issue-message-flag nil)

  :general ;; Switches correct word from middle click to right click
  (general-define-key :keymaps 'flyspell-mouse-map
                      \"<mouse-3>\" #'ispell-word
                      \"<mouse-2>\" nil)
  (general-define-key :keymaps 'evil-motion-state-map
                      \"zz\" #'ispell-word)
  )

(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map (\"C-;\" . flyspell-correct-wrapper)))

" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 67 (fontified t face font-lock-comment-face) 67 68 (fontified t face font-lock-comment-face) 68 69 (fontified t) 69 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 89 (fontified t face font-lock-constant-face) 89 92 (fontified t) 92 98 (fontified t face font-lock-builtin-face) 98 103 (fontified t) 103 110 (fontified t face font-lock-builtin-face) 110 155 (fontified t) 155 158 (fontified t face font-lock-string-face) 158 159 (fontified t) 159 162 (fontified t face font-lock-string-face) 162 208 (fontified t) 208 211 (fontified t face font-lock-string-face) 211 212 (fontified t) 212 215 (fontified t face font-lock-string-face) 215 261 (fontified t) 261 277 (fontified t face font-lock-string-face) 277 280 (fontified t) 280 294 (fontified t face font-lock-string-face) 294 340 (fontified t) 340 359 (fontified t face font-lock-string-face) 359 362 (fontified t) 362 379 (fontified t face font-lock-string-face) 379 425 (fontified t) 425 444 (fontified t face font-lock-string-face) 444 447 (fontified t) 447 464 (fontified t face font-lock-string-face) 464 510 (fontified t) 510 512 (fontified t face font-lock-string-face) 512 514 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 514 515 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 515 525 (fontified t face font-lock-string-face) 525 527 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 527 528 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 528 535 (fontified t face font-lock-string-face) 535 537 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 537 538 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 538 540 (fontified t face font-lock-string-face) 540 543 (fontified t) 543 550 (fontified t face font-lock-string-face) 550 557 (fontified t) 557 563 (fontified t face font-lock-keyword-face) 563 649 (fontified t) 649 655 (fontified t face font-lock-keyword-face) 655 684 (fontified t) 684 688 (fontified t face font-lock-keyword-face) 688 691 (fontified t) 691 709 (fontified t) 709 727 (fontified t face font-lock-string-face) 727 730 (fontified t) 730 734 (fontified t) 734 738 (fontified t face font-lock-keyword-face) 738 768 (fontified t) 768 771 (fontified t) 771 815 (fontified t) 815 823 (fontified t face font-lock-builtin-face) 823 824 (fontified t) 824 827 (fontified t face font-lock-comment-delimiter-face) 827 882 (fontified t face font-lock-comment-face) 882 904 (fontified t) 904 912 (fontified t face font-lock-builtin-face) 912 955 (fontified t) 955 966 (fontified t face font-lock-string-face) 966 1003 (fontified t) 1003 1014 (fontified t face font-lock-string-face) 1014 1042 (fontified t) 1042 1050 (fontified t face font-lock-builtin-face) 1050 1096 (fontified t) 1096 1100 (fontified t face font-lock-string-face) 1100 1122 (fontified t) 1122 1133 (fontified t face font-lock-keyword-face) 1133 1134 (fontified t) 1134 1150 (fontified t face font-lock-constant-face) 1150 1153 (fontified t) 1153 1159 (fontified t face font-lock-builtin-face) 1159 1171 (fontified t) 1171 1176 (fontified t face font-lock-builtin-face) 1176 1178 (fontified t) 1178 1182 (fontified t face font-lock-builtin-face) 1182 1202 (fontified t) 1202 1207 (fontified t face font-lock-string-face) 1207 1239 (fontified t)) . 1662) (undo-tree-id4300 . -1238) (undo-tree-id4301 . -1238) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1238) (undo-tree-id4304 . -1238) 2900) nil (25306 59049 521885 173000) 0 nil])
([nil nil ((#("
(general-def
  :states 'normal
  :keymaps 'org-mode-map
  \"t\" 'org-todo
  \"<return>\" 'org-open-at-point-global
  \"K\" 'org-shiftup

  \"J\" 'org-shiftdown
 \"TAB\" 'org-cycle
  )

(general-def
  :states 'insert
  :keymaps 'org-mode-map
  \"C-o\" 'evil-org-open-above)

(general-def
  :states '(normal insert emacs)
  :keymaps 'org-mode-map
  \"M-[\" 'org-metaleft
  \"M-]\" 'org-metaright
  \"C-M-=\" 'ap/org-count-words
  \"s-r\" 'org-refile
  \"M-k\" 'org-insert-link
  )

;; Org-src - when editing an org source block
(general-def
  :prefix \",\"
  :states 'normal
  :keymaps 'org-src-mode-map
  \"b\" '(nil :which-key \"org src\")
  \"bc\" 'org-edit-src-abort
  \"bb\" 'org-edit-src-exit
  )

(general-define-key
 :prefix \",\"
 :states 'motion
 :keymaps '(org-mode-map) ;; Available in org mode, org agenda
 \"\" nil
 \"A\" '(org-archive-subtree-default :which-key \"org-archive\")
 \"a\" '(org-agenda :which-key \"org agenda\")
 \"6\" '(org-sort :which-key \"sort\")
 \"c\" '(org-capture :which-key \"org-capture\")
 \"s\" '(org-schedule :which-key \"schedule\")
 ;; \"S\" '(jib/org-schedule-tomorrow :which-key \"schedule\")
 \"d\" '(org-deadline :which-key \"deadline\")
 \"g\" '(counsel-org-goto :which-key \"goto heading\")
 \"t\" '(counsel-org-tag :which-key \"set tags\")
 \"p\" '(org-set-property :which-key \"set property\")
 ;; \"r\" '(jib/org-refile-this-file :which-key \"refile in file\")
 \"e\" '(org-export-dispatch :which-key \"export org\")
 \"B\" '(org-toggle-narrow-to-subtree :which-key \"toggle narrow to subtree\")
 ;; \"v\" '(jib/org-set-startup-visibility :which-key \"startup visibility\")
 \"H\" '(org-html-convert-region-to-html :which-key \"convert region to html\")

 \"1\" '(org-toggle-link-display :which-key \"toggle link display\")
 \"2\" '(org-toggle-inline-images :which-key \"toggle images\")

 ;; org-babel
 \"b\" '(nil :which-key \"babel\")
 \"bt\" '(org-babel-tangle :which-key \"org-babel-tangle\")
 \"bb\" '(org-edit-special :which-key \"org-edit-special\")
 \"bc\" '(org-edit-src-abort :which-key \"org-edit-src-abort\")
 \"bk\" '(org-babel-remove-result-one-or-many :which-key \"org-babel-remove-result-one-or-many\")

 \"x\" '(nil :which-key \"text\")
 ;; \"xb\" (spacemacs|org-emphasize spacemacs|org-bold ?*)
 ;; \"xb\" (spacemacs|org-emphasize spacemacs|org-bold ?*)
 ;; \"xc\" (spacemacs|org-emphasize spacemacs|org-code ?~)
 ;; \"xi\" (spacemacs|org-emphasize spacemacs|org-italic ?/)
 ;; \"xs\" (spacemacs|org-emphasize spacemacs|org-strike-through ?+)
 ;; \"xu\" (spacemacs|org-emphasize spacemacs|org-underline ?_)
 ;; \"xv\" (spacemacs|org-emphasize spacemacs|org-verbose ?~) ;; I realized that ~~ is the same and better than == (Github won't do ==)

 ;; insert
 \"i\" '(nil :which-key \"insert\")

 \"it\" '(nil :which-key \"tables\")
 \"itt\" '(org-table-create :which-key \"create table\")
 \"itl\" '(org-table-insert-hline :which-key \"table hline\")

 \"il\" '(org-insert-link :which-key \"org-insert-link\")
 \"iL\" '(counsel-org-link :which-key \"counsel-org-link\")

 \"is\" '(nil :which-key \"insert stamp\")
 \"iss\" '((lambda () (interactive) (call-interactively (org-time-stamp-inactive))) :which-key \"org-time-stamp-inactive\")
 \"isS\" '((lambda () (interactive) (call-interactively (org-time-stamp nil))) :which-key \"org-time-stamp\")

 ;; clocking
 \"c\" '(nil :which-key \"clocking\")
 \"ci\" '(org-clock-in :which-key \"clock in\")
 \"co\" '(org-clock-out :which-key \"clock out\")
 \"cj\" '(org-clock-goto :which-key \"jump to clock\")
 )


;; Org-agenda
(general-define-key
 :prefix \",\"
 :states 'motion
 :keymaps '(org-agenda-mode-map) ;; Available in org mode, org agenda
 \"\" nil
 \"a\" '(org-agenda :which-key \"org agenda\")
 \"c\" '(org-capture :which-key \"org-capture\")
 \"s\" '(org-agenda-schedule :which-key \"schedule\")
 \"d\" '(org-agenda-deadline :which-key \"deadline\")
 \"t\" '(org-agenda-set-tags :which-key \"set tags\")
 ;; clocking
 \"c\" '(nil :which-key \"clocking\")
 \"ci\" '(org-agenda-clock-in :which-key \"clock in\")
 \"co\" '(org-agenda-clock-out :which-key \"clock out\")
 \"cj\" '(org-clock-goto :which-key \"jump to clock\")
 )

(evil-define-key 'motion org-agenda-mode-map
  (kbd \"f\") 'org-agenda-later
  (kbd \"b\") 'org-agenda-earlier)

" 0 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 16 (fontified t) 16 23 (fontified t face font-lock-builtin-face) 23 34 (fontified t) 34 42 (fontified t face font-lock-builtin-face) 42 59 (fontified t) 59 62 (fontified t face font-lock-string-face) 62 75 (fontified t) 75 85 (fontified t face font-lock-string-face) 85 114 (fontified t) 114 117 (fontified t face font-lock-string-face) 117 134 (fontified t) 134 137 (fontified t face font-lock-string-face) 137 154 (fontified t) 154 159 (fontified t face font-lock-string-face) 159 177 (fontified t) 177 188 (fontified t face font-lock-keyword-face) 188 191 (fontified t) 191 198 (fontified t face font-lock-builtin-face) 198 209 (fontified t) 209 217 (fontified t face font-lock-builtin-face) 217 234 (fontified t) 234 239 (fontified t face font-lock-string-face) 239 264 (fontified t) 264 266 (fontified t face font-lock-keyword-face) 266 267 (fontified t face font-lock-keyword-face) 267 275 (face font-lock-keyword-face fontified t) 275 276 (fontified t) 276 278 (fontified t) 278 285 (fontified t face font-lock-builtin-face) 285 311 (fontified t) 311 319 (fontified t face font-lock-builtin-face) 319 336 (fontified t) 336 341 (fontified t face font-lock-string-face) 341 358 (fontified t) 358 363 (fontified t face font-lock-string-face) 363 381 (fontified t) 381 388 (fontified t face font-lock-string-face) 388 411 (fontified t) 411 416 (fontified t face font-lock-string-face) 416 431 (fontified t) 431 436 (fontified t face font-lock-string-face) 436 459 (fontified t) 459 462 (fontified t face font-lock-comment-delimiter-face) 462 505 (fontified t face font-lock-comment-face) 505 506 (fontified t) 506 517 (fontified t face font-lock-keyword-face) 517 520 (fontified t) 520 527 (fontified t face font-lock-builtin-face) 527 528 (fontified t) 528 531 (fontified t face font-lock-string-face) 531 534 (fontified t) 534 541 (fontified t face font-lock-builtin-face) 541 552 (fontified t) 552 560 (fontified t face font-lock-builtin-face) 560 581 (fontified t) 581 584 (fontified t face font-lock-string-face) 584 591 (fontified t) 591 601 (fontified t face font-lock-builtin-face) 601 602 (fontified t) 602 611 (fontified t face font-lock-string-face) 611 615 (fontified t) 615 619 (fontified t face font-lock-string-face) 619 642 (fontified t) 642 646 (fontified t face font-lock-string-face) 646 692 (fontified t) 692 699 (fontified t face font-lock-builtin-face) 699 700 (fontified t) 700 703 (fontified t face font-lock-string-face) 703 705 (fontified t) 705 712 (fontified t face font-lock-builtin-face) 712 722 (fontified t) 722 730 (fontified t face font-lock-builtin-face) 730 747 (fontified t) 747 750 (fontified t face font-lock-comment-delimiter-face) 750 784 (fontified t face font-lock-comment-face) 784 785 (fontified t) 785 787 (fontified t face font-lock-string-face) 787 793 (fontified t) 793 796 (fontified t face font-lock-string-face) 796 827 (fontified t) 827 837 (fontified t face font-lock-builtin-face) 837 838 (fontified t) 838 851 (fontified t face font-lock-string-face) 851 854 (fontified t) 854 857 (fontified t face font-lock-string-face) 857 871 (fontified t) 871 881 (fontified t face font-lock-builtin-face) 881 882 (fontified t) 882 894 (fontified t face font-lock-string-face) 894 897 (fontified t) 897 900 (fontified t face font-lock-string-face) 900 904 (fontified t) 904 912 (fontified t) 912 922 (fontified t face font-lock-builtin-face) 922 923 (fontified t) 923 929 (fontified t face font-lock-string-face) 929 931 (fontified t) 931 932 (fontified t) 932 935 (fontified t face font-lock-string-face) 935 950 (fontified t) 950 960 (fontified t face font-lock-builtin-face) 960 961 (fontified t) 961 974 (fontified t face font-lock-string-face) 974 977 (fontified t) 977 980 (fontified t face font-lock-string-face) 980 996 (fontified t) 996 1006 (fontified t face font-lock-builtin-face) 1006 1007 (fontified t) 1007 1017 (fontified t face font-lock-string-face) 1017 1020 (fontified t) 1020 1023 (fontified t face font-lock-comment-delimiter-face) 1023 1078 (fontified t face font-lock-comment-face) 1078 1079 (fontified t) 1079 1082 (fontified t face font-lock-string-face) 1082 1098 (fontified t) 1098 1108 (fontified t face font-lock-builtin-face) 1108 1109 (fontified t) 1109 1119 (fontified t face font-lock-string-face) 1119 1122 (fontified t) 1122 1125 (fontified t face font-lock-string-face) 1125 1145 (fontified t) 1145 1155 (fontified t face font-lock-builtin-face) 1155 1156 (fontified t) 1156 1170 (fontified t face font-lock-string-face) 1170 1173 (fontified t) 1173 1176 (fontified t face font-lock-string-face) 1176 1195 (fontified t) 1195 1205 (fontified t face font-lock-builtin-face) 1205 1206 (fontified t) 1206 1216 (fontified t face font-lock-string-face) 1216 1219 (fontified t) 1219 1222 (fontified t face font-lock-string-face) 1222 1242 (fontified t) 1242 1252 (fontified t face font-lock-builtin-face) 1252 1253 (fontified t) 1253 1267 (fontified t face font-lock-string-face) 1267 1270 (fontified t) 1270 1273 (fontified t face font-lock-comment-delimiter-face) 1273 1333 (fontified t face font-lock-comment-face) 1333 1334 (fontified t) 1334 1337 (fontified t face font-lock-string-face) 1337 1360 (fontified t) 1360 1365 (fontified t face font-lock-builtin-face) 1365 1366 (fontified t face font-lock-builtin-face) 1366 1370 (fontified t face font-lock-builtin-face) 1370 1371 (fontified t) 1371 1383 (fontified t face font-lock-string-face) 1383 1385 (fontified t) 1385 1386 (fontified t) 1386 1389 (fontified t face font-lock-string-face) 1389 1421 (fontified t) 1421 1431 (fontified t face font-lock-builtin-face) 1431 1432 (fontified t) 1432 1458 (fontified t face font-lock-string-face) 1458 1460 (fontified t) 1460 1461 (fontified t) 1461 1464 (fontified t face font-lock-comment-delimiter-face) 1464 1534 (fontified t face font-lock-comment-face) 1534 1535 (fontified t) 1535 1538 (fontified t face font-lock-string-face) 1538 1573 (fontified t) 1573 1583 (fontified t face font-lock-builtin-face) 1583 1584 (fontified t) 1584 1608 (fontified t face font-lock-string-face) 1608 1612 (fontified t) 1612 1615 (fontified t face font-lock-string-face) 1615 1642 (fontified t) 1642 1652 (fontified t face font-lock-builtin-face) 1652 1653 (fontified t) 1653 1674 (fontified t face font-lock-string-face) 1674 1677 (fontified t) 1677 1680 (fontified t face font-lock-string-face) 1680 1708 (fontified t) 1708 1718 (fontified t face font-lock-builtin-face) 1718 1719 (fontified t) 1719 1734 (fontified t face font-lock-string-face) 1734 1738 (fontified t) 1738 1741 (fontified t face font-lock-comment-delimiter-face) 1741 1751 (fontified t face font-lock-comment-face) 1751 1752 (fontified t) 1752 1755 (fontified t face font-lock-string-face) 1755 1762 (fontified t) 1762 1772 (fontified t face font-lock-builtin-face) 1772 1773 (fontified t) 1773 1776 (fontified t face font-lock-string-face) 1776 1780 (face font-lock-string-face fontified t) 1780 1782 (fontified t) 1782 1783 (fontified t) 1783 1787 (fontified t face font-lock-string-face) 1787 1807 (fontified t) 1807 1817 (fontified t face font-lock-builtin-face) 1817 1818 (fontified t) 1818 1836 (fontified t face font-lock-string-face) 1836 1839 (fontified t) 1839 1843 (fontified t face font-lock-string-face) 1843 1863 (fontified t) 1863 1873 (fontified t face font-lock-builtin-face) 1873 1874 (fontified t) 1874 1892 (fontified t face font-lock-string-face) 1892 1895 (fontified t) 1895 1899 (fontified t face font-lock-string-face) 1899 1921 (fontified t) 1921 1931 (fontified t face font-lock-builtin-face) 1931 1932 (fontified t) 1932 1952 (fontified t face font-lock-string-face) 1952 1955 (fontified t) 1955 1959 (fontified t face font-lock-string-face) 1959 1998 (fontified t) 1998 2008 (fontified t face font-lock-builtin-face) 2008 2009 (fontified t) 2009 2046 (fontified t face font-lock-string-face) 2046 2050 (fontified t) 2050 2053 (fontified t face font-lock-string-face) 2053 2060 (fontified t) 2060 2070 (fontified t face font-lock-builtin-face) 2070 2071 (fontified t) 2071 2077 (fontified t face font-lock-string-face) 2077 2080 (fontified t) 2080 2083 (fontified t face font-lock-comment-delimiter-face) 2083 2136 (fontified t face font-lock-comment-face) 2136 2137 (fontified t) 2137 2140 (fontified t face font-lock-comment-delimiter-face) 2140 2193 (fontified t face font-lock-comment-face) 2193 2194 (fontified t) 2194 2197 (fontified t face font-lock-comment-delimiter-face) 2197 2250 (fontified t face font-lock-comment-face) 2250 2251 (fontified t) 2251 2254 (fontified t face font-lock-comment-delimiter-face) 2254 2309 (fontified t face font-lock-comment-face) 2309 2310 (fontified t) 2310 2313 (fontified t face font-lock-comment-delimiter-face) 2313 2376 (fontified t face font-lock-comment-face) 2376 2377 (fontified t) 2377 2380 (fontified t face font-lock-comment-delimiter-face) 2380 2438 (fontified t face font-lock-comment-face) 2438 2439 (fontified t) 2439 2442 (fontified t face font-lock-comment-delimiter-face) 2442 2572 (fontified t face font-lock-comment-face) 2572 2574 (fontified t) 2574 2577 (fontified t face font-lock-comment-delimiter-face) 2577 2584 (fontified t face font-lock-comment-face) 2584 2585 (fontified t) 2585 2588 (fontified t face font-lock-string-face) 2588 2595 (fontified t) 2595 2605 (fontified t face font-lock-builtin-face) 2605 2606 (fontified t) 2606 2614 (fontified t face font-lock-string-face) 2614 2618 (fontified t) 2618 2622 (fontified t face font-lock-string-face) 2622 2629 (fontified t) 2629 2639 (fontified t face font-lock-builtin-face) 2639 2640 (fontified t) 2640 2648 (fontified t face font-lock-string-face) 2648 2651 (fontified t) 2651 2656 (fontified t face font-lock-string-face) 2656 2676 (fontified t) 2676 2686 (fontified t face font-lock-builtin-face) 2686 2687 (fontified t) 2687 2701 (fontified t face font-lock-string-face) 2701 2704 (fontified t) 2704 2709 (fontified t face font-lock-string-face) 2709 2735 (fontified t) 2735 2745 (fontified t face font-lock-builtin-face) 2745 2746 (fontified t) 2746 2759 (fontified t face font-lock-string-face) 2759 2763 (fontified t) 2763 2767 (fontified t face font-lock-string-face) 2767 2786 (fontified t) 2786 2796 (fontified t face font-lock-builtin-face) 2796 2797 (fontified t) 2797 2814 (fontified t face font-lock-string-face) 2814 2817 (fontified t) 2817 2821 (fontified t face font-lock-string-face) 2821 2841 (fontified t) 2841 2851 (fontified t face font-lock-builtin-face) 2851 2852 (fontified t) 2852 2870 (fontified t face font-lock-string-face) 2870 2874 (fontified t) 2874 2878 (fontified t face font-lock-string-face) 2878 2885 (fontified t) 2885 2895 (fontified t face font-lock-builtin-face) 2895 2896 (fontified t) 2896 2910 (fontified t face font-lock-string-face) 2910 2912 (fontified t) 2912 2913 (fontified t) 2913 2918 (fontified t face font-lock-string-face) 2918 2922 (fontified t) 2922 2928 (fontified t face font-lock-keyword-face) 2928 2933 (fontified t) 2933 2944 (fontified t face font-lock-keyword-face) 2944 2994 (fontified t) 2994 3004 (fontified t face font-lock-builtin-face) 3004 3005 (fontified t) 3005 3030 (fontified t face font-lock-string-face) 3030 3033 (fontified t) 3033 3038 (fontified t face font-lock-string-face) 3038 3042 (fontified t) 3042 3048 (fontified t face font-lock-keyword-face) 3048 3053 (fontified t) 3053 3064 (fontified t face font-lock-keyword-face) 3064 3109 (fontified t) 3109 3119 (fontified t face font-lock-builtin-face) 3119 3120 (fontified t) 3120 3136 (fontified t face font-lock-string-face) 3136 3140 (fontified t) 3140 3143 (fontified t face font-lock-comment-delimiter-face) 3143 3152 (fontified t face font-lock-comment-face) 3152 3153 (fontified t) 3153 3156 (fontified t face font-lock-string-face) 3156 3163 (fontified t) 3163 3173 (fontified t face font-lock-builtin-face) 3173 3174 (fontified t) 3174 3184 (fontified t face font-lock-string-face) 3184 3187 (fontified t) 3187 3191 (fontified t face font-lock-string-face) 3191 3207 (fontified t) 3207 3217 (fontified t face font-lock-builtin-face) 3217 3218 (fontified t) 3218 3228 (fontified t face font-lock-string-face) 3228 3231 (fontified t) 3231 3235 (fontified t face font-lock-string-face) 3235 3252 (fontified t) 3252 3262 (fontified t face font-lock-builtin-face) 3262 3263 (fontified t) 3263 3274 (fontified t face font-lock-string-face) 3274 3277 (fontified t) 3277 3281 (fontified t face font-lock-string-face) 3281 3282 (fontified t) 3282 3299 (fontified t) 3299 3309 (face font-lock-builtin-face fontified t) 3309 3310 (fontified t) 3310 3325 (face font-lock-string-face fontified t) 3325 3327 (fontified t) 3327 3332 (fontified t) 3332 3335 (fontified t face font-lock-comment-delimiter-face) 3335 3346 (fontified t face font-lock-comment-face) 3346 3367 (fontified t) 3367 3374 (fontified t face font-lock-builtin-face) 3374 3375 (fontified t) 3375 3378 (fontified t face font-lock-string-face) 3378 3380 (fontified t) 3380 3387 (fontified t face font-lock-builtin-face) 3387 3397 (fontified t) 3397 3405 (fontified t face font-lock-builtin-face) 3405 3429 (fontified t) 3429 3432 (fontified t face font-lock-comment-delimiter-face) 3432 3466 (fontified t face font-lock-comment-face) 3466 3467 (fontified t) 3467 3469 (fontified t face font-lock-string-face) 3469 3475 (fontified t) 3475 3478 (fontified t face font-lock-string-face) 3478 3492 (fontified t) 3492 3502 (fontified t face font-lock-builtin-face) 3502 3503 (fontified t) 3503 3515 (fontified t face font-lock-string-face) 3515 3518 (fontified t) 3518 3521 (fontified t face font-lock-string-face) 3521 3536 (fontified t) 3536 3546 (fontified t face font-lock-builtin-face) 3546 3547 (fontified t) 3547 3560 (fontified t face font-lock-string-face) 3560 3563 (fontified t) 3563 3566 (fontified t face font-lock-string-face) 3566 3589 (fontified t) 3589 3599 (fontified t face font-lock-builtin-face) 3599 3600 (fontified t) 3600 3610 (fontified t face font-lock-string-face) 3610 3613 (fontified t) 3613 3616 (fontified t face font-lock-string-face) 3616 3639 (fontified t) 3639 3649 (fontified t face font-lock-builtin-face) 3649 3650 (fontified t) 3650 3660 (fontified t face font-lock-string-face) 3660 3663 (fontified t) 3663 3666 (fontified t face font-lock-string-face) 3666 3689 (fontified t) 3689 3699 (fontified t face font-lock-builtin-face) 3699 3700 (fontified t) 3700 3710 (fontified t face font-lock-string-face) 3710 3713 (fontified t) 3713 3716 (fontified t face font-lock-comment-delimiter-face) 3716 3725 (fontified t face font-lock-comment-face) 3725 3726 (fontified t) 3726 3729 (fontified t face font-lock-string-face) 3729 3736 (fontified t) 3736 3746 (fontified t face font-lock-builtin-face) 3746 3747 (fontified t) 3747 3757 (fontified t face font-lock-string-face) 3757 3760 (fontified t) 3760 3764 (fontified t face font-lock-string-face) 3764 3787 (fontified t) 3787 3797 (fontified t face font-lock-builtin-face) 3797 3798 (fontified t) 3798 3808 (fontified t face font-lock-string-face) 3808 3811 (fontified t) 3811 3815 (fontified t face font-lock-string-face) 3815 3839 (fontified t) 3839 3849 (fontified t face font-lock-builtin-face) 3849 3850 (fontified t) 3850 3861 (fontified t face font-lock-string-face) 3861 3864 (fontified t) 3864 3868 (fontified t face font-lock-string-face) 3868 3886 (fontified t) 3886 3896 (fontified t face font-lock-builtin-face) 3896 3897 (fontified t) 3897 3912 (fontified t face font-lock-string-face) 3912 3919 (fontified t) 3919 3934 (fontified t face font-lock-keyword-face) 3934 3970 (fontified t) 3970 3973 (fontified t face font-lock-string-face) 3973 4000 (fontified t) 4000 4003 (fontified t face font-lock-string-face) 4003 4027 (fontified t)) . 2896) (undo-tree-id4328 . -4026) (undo-tree-id4329 . -4026) (undo-tree-id4330 . -2193) (undo-tree-id4331 . -4026) (undo-tree-id4332 . -4026) 6922 (t 25306 59049 533120 167000)) nil (25306 59085 762497 690000) 0 nil])
([nil nil ((#("(use-package magit :defer t)
(use-package magit-todos :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 25 (fontified t face font-lock-builtin-face) 25 29 (fontified t) 29 30 (fontified t) 30 41 (fontified t face font-lock-keyword-face) 41 42 (fontified t) 42 53 (fontified t face font-lock-constant-face) 53 54 (fontified t) 54 60 (fontified t face font-lock-builtin-face) 60 63 (fontified t) 63 64 (fontified t)) . 5412) (undo-tree-id4342 . 64) (undo-tree-id4343 . -1) (undo-tree-id4344 . 37) (undo-tree-id4345 . -28)) nil (25306 59138 488987 655000) 0 nil] [nil nil ((#("(use-package magit :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 25 (fontified t face font-lock-builtin-face) 25 29 (fontified t)) . 5412) (undo-tree-id4333 . -29) (undo-tree-id4334 . -29) (undo-tree-id4335 . -29) (undo-tree-id4336 . -29) (undo-tree-id4337 . -29) (undo-tree-id4338 . 29) (undo-tree-id4339 . -1) (undo-tree-id4340 . 2) (undo-tree-id4341 . -28)) ((5412 . 5441)) (25306 59085 762437 934000) 0 nil] [nil nil ((#("(use-package magit :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 25 (fontified t face font-lock-builtin-face) 25 29 (fontified t)) . 5412) (undo-tree-id4319 . -29) (undo-tree-id4320 . -29) (undo-tree-id4321 . -29) (undo-tree-id4322 . -29) (undo-tree-id4323 . -29) (undo-tree-id4324 . 29) (undo-tree-id4325 . -1) (undo-tree-id4326 . 2) (undo-tree-id4327 . -28)) ((5412 . 5441)) (25306 59083 956067 678000) 0 nil])
([nil nil ((#("(use-package unfill :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 26 (fontified t face font-lock-builtin-face) 26 29 (fontified t) 29 30 (fontified t)) . 5412) (undo-tree-id4347 . 30) (undo-tree-id4348 . -1) (undo-tree-id4349 . 2) (undo-tree-id4350 . -29) (undo-tree-id4351 . -30) (undo-tree-id4352 . -30) (undo-tree-id4353 . -30) (undo-tree-id4354 . -30) (undo-tree-id4355 . -30) (undo-tree-id4356 . -30) (undo-tree-id4357 . -30) (undo-tree-id4358 . -30) (undo-tree-id4359 . -30) (undo-tree-id4360 . -30) (undo-tree-id4361 . -30) (undo-tree-id4362 . -30) (undo-tree-id4363 . -30) (undo-tree-id4364 . -30) (undo-tree-id4365 . -30) (t 25306 59115 879784 476000)) nil (25306 59223 39985 968000) 0 nil] [nil nil ((5842 . 5843) (#("
" 0 1 (fontified t)) . 5842) (#("  " 0 2 (fontified t)) . 5843) (5799 . 5801) (#(" " 0 1 (fontified nil)) . -5799) (5798 . 5799) (5762 . 5763) (#("
" 0 1 (fontified nil)) . 5762) (5753 . 5754) (#("
" 0 1 (fontified t)) . 5753) (#("  " 0 2 (fontified t)) . 5763) (#("  " 0 2 (fontified t)) . 5754) (#(" " 0 1 (fontified nil)) . -5665) (5664 . 5665) (#(" " 0 1 (fontified nil)) . -5605) (5604 . 5605) (#(" " 0 1 (fontified nil)) . -5539) (5538 . 5539) (#(" " 0 1 (fontified nil)) . -5473) (5472 . 5473) (5664 . 5665) (#("
" 0 1 (fontified t)) . 5664) (5641 . 5642) (#("
" 0 1 (fontified t)) . 5641) (5604 . 5605) (#("
" 0 1 (fontified t)) . 5604) (5538 . 5539) (#("
" 0 1 (fontified t)) . 5538) (5506 . 5507) (#("
" 0 1 (fontified t)) . 5506) (5472 . 5473) (#("
" 0 1 (fontified t)) . 5472) (5443 . 5444) (#("
" 0 1 (fontified t)) . 5443) (5387 . 5389) (#(" " 0 1 (fontified nil)) . -5387) (5386 . 5387) (5318 . 5320) (#(" " 0 1 (fontified nil)) . -5318) (5317 . 5318) (5249 . 5251) (#(" " 0 1 (fontified nil)) . -5249) (5248 . 5249) (5183 . 5185) (#(" " 0 1 (fontified nil)) . -5183) (5182 . 5183) (5114 . 5116) (#(" " 0 1 (fontified nil)) . -5114) (5113 . 5114) (5048 . 5050) (#(" " 0 1 (fontified nil face font-lock-string-face)) . -5048) (nil face nil 5047 . 5048) (5047 . 5048) (5333 . 5334) (#("
" 0 1 (fontified nil)) . 5333) (5266 . 5267) (#("
" 0 1 (fontified nil)) . 5266) (5199 . 5200) (#("
" 0 1 (fontified nil)) . 5199) (5128 . 5129) (#("
" 0 1 (fontified nil)) . 5128) (5061 . 5062) (#("
" 0 1 (fontified t)) . 5061) (#("  " 0 2 (fontified t)) . 5334) (#("  " 0 2 (fontified t)) . 5267) (#("  " 0 2 (fontified t)) . 5200) (#("  " 0 2 (fontified t)) . 5129) (#("  " 0 2 (fontified t)) . 5062) (t 25306 59115 879784 476000)) ((5062 . 5064) (5129 . 5131) (5200 . 5202) (5267 . 5269) (5334 . 5336) (5061 . 5062) (#(" " 0 1 (fontified nil)) . 5061) (5128 . 5129) (#(" " 0 1 (fontified nil)) . 5128) (5199 . 5200) (#(" " 0 1 (fontified nil)) . 5199) (5266 . 5267) (#(" " 0 1 (fontified nil)) . 5266) (5333 . 5334) (#(" " 0 1 (fontified nil)) . 5333) (#("
" 0 1 (fontified nil face nil)) . 5047) (nil face font-lock-string-face 5047 . 5048) (5048 . 5049) (#("  " 0 2 (fontified nil face font-lock-string-face)) . 5048) (#("
" 0 1 (fontified t)) . 5113) (5114 . 5115) (#("  " 0 2 (fontified nil)) . 5114) (#("
" 0 1 (fontified t)) . 5182) (5183 . 5184) (#("  " 0 2 (fontified nil)) . 5183) (#("
" 0 1 (fontified t)) . 5248) (5249 . 5250) (#("  " 0 2 (fontified nil)) . 5249) (#("
" 0 1 (fontified t)) . 5317) (5318 . 5319) (#("  " 0 2 (fontified nil)) . 5318) (#("
" 0 1 (fontified t)) . 5386) (5387 . 5388) (#("  " 0 2 (fontified t)) . 5387) (5443 . 5444) (#(" " 0 1 (fontified nil)) . 5443) (5472 . 5473) (#(" " 0 1 (fontified nil)) . 5472) (5506 . 5507) (#(" " 0 1 (fontified nil)) . 5506) (5538 . 5539) (#(" " 0 1 (fontified nil)) . 5538) (5604 . 5605) (#(" " 0 1 (fontified nil)) . 5604) (5641 . 5642) (#(" " 0 1 (fontified nil)) . 5641) (5664 . 5665) (#(" " 0 1 (fontified nil)) . 5664) (#("
" 0 1 (fontified t)) . 5472) (5473 . 5474) (#("
" 0 1 (fontified t)) . 5538) (5539 . 5540) (#("
" 0 1 (fontified t)) . 5604) (5605 . 5606) (#("
" 0 1 (fontified t)) . 5664) (5665 . 5666) (5754 . 5756) (5763 . 5765) (5753 . 5754) (#(" " 0 1 (fontified nil)) . 5753) (5762 . 5763) (#(" " 0 1 (fontified nil)) . 5762) (#("
" 0 1 (fontified t)) . 5798) (5799 . 5800) (#("  " 0 2 (fontified t)) . 5799) (5842 . 5845) (#(" " 0 1 (fontified t)) . 5842)) (25306 59138 488167 392000) 0 nil] [nil nil ((5842 . 5843) (#("
" 0 1 (fontified t)) . 5842) (#("  " 0 2 (fontified t)) . 5843) (5799 . 5801) (#(" " 0 1 (fontified nil)) . -5799) (5798 . 5799) (5762 . 5763) (#("
" 0 1 (fontified nil)) . 5762) (5753 . 5754) (#("
" 0 1 (fontified t)) . 5753) (#("  " 0 2 (fontified t)) . 5763) (#("  " 0 2 (fontified t)) . 5754) (#(" " 0 1 (fontified nil)) . -5665) (5664 . 5665) (#(" " 0 1 (fontified nil)) . -5605) (5604 . 5605) (#(" " 0 1 (fontified nil)) . -5539) (5538 . 5539) (#(" " 0 1 (fontified nil)) . -5473) (5472 . 5473) (5664 . 5665) (#("
" 0 1 (fontified t)) . 5664) (5641 . 5642) (#("
" 0 1 (fontified t)) . 5641) (5604 . 5605) (#("
" 0 1 (fontified t)) . 5604) (5538 . 5539) (#("
" 0 1 (fontified t)) . 5538) (5506 . 5507) (#("
" 0 1 (fontified t)) . 5506) (5472 . 5473) (#("
" 0 1 (fontified t)) . 5472) (5443 . 5444) (#("
" 0 1 (fontified t)) . 5443) (5387 . 5389) (#(" " 0 1 (fontified nil)) . -5387) (5386 . 5387) (5318 . 5320) (#(" " 0 1 (fontified nil)) . -5318) (5317 . 5318) (5249 . 5251) (#(" " 0 1 (fontified nil)) . -5249) (5248 . 5249) (5183 . 5185) (#(" " 0 1 (fontified nil)) . -5183) (5182 . 5183) (5114 . 5116) (#(" " 0 1 (fontified nil)) . -5114) (5113 . 5114) (5048 . 5050) (#(" " 0 1 (fontified nil face font-lock-string-face)) . -5048) (nil face nil 5047 . 5048) (5047 . 5048) (4989 . 4991) (#(" " 0 1 (fontified nil)) . -4989) (4988 . 4989) (5331 . 5332) (#("
" 0 1 (fontified nil)) . 5331) (5264 . 5265) (#("
" 0 1 (fontified nil)) . 5264) (5197 . 5198) (#("
" 0 1 (fontified nil)) . 5197) (5126 . 5127) (#("
" 0 1 (fontified nil)) . 5126) (5059 . 5060) (#("
" 0 1 (fontified nil)) . 5059) (4988 . 4989) (#("
" 0 1 (fontified t)) . 4988) (#("  " 0 2 (fontified t)) . 5332) (#("  " 0 2 (fontified t)) . 5265) (#("  " 0 2 (fontified t)) . 5198) (#("  " 0 2 (fontified t)) . 5127) (#("  " 0 2 (fontified t)) . 5060) (#("  " 0 2 (fontified t)) . 4989) (t 25306 59115 879784 476000)) ((4989 . 4991) (5060 . 5062) (5127 . 5129) (5198 . 5200) (5265 . 5267) (5332 . 5334) (4988 . 4989) (#(" " 0 1 (fontified nil)) . 4988) (5059 . 5060) (#(" " 0 1 (fontified nil)) . 5059) (5126 . 5127) (#(" " 0 1 (fontified nil)) . 5126) (5197 . 5198) (#(" " 0 1 (fontified nil)) . 5197) (5264 . 5265) (#(" " 0 1 (fontified nil)) . 5264) (5331 . 5332) (#(" " 0 1 (fontified nil)) . 5331) (#("
" 0 1 (fontified t)) . 4988) (4989 . 4990) (#("  " 0 2 (fontified nil)) . 4989) (#("
" 0 1 (fontified nil face nil)) . 5047) (nil face font-lock-string-face 5047 . 5048) (5048 . 5049) (#("  " 0 2 (fontified nil face font-lock-string-face)) . 5048) (#("
" 0 1 (fontified t)) . 5113) (5114 . 5115) (#("  " 0 2 (fontified nil)) . 5114) (#("
" 0 1 (fontified t)) . 5182) (5183 . 5184) (#("  " 0 2 (fontified nil)) . 5183) (#("
" 0 1 (fontified t)) . 5248) (5249 . 5250) (#("  " 0 2 (fontified nil)) . 5249) (#("
" 0 1 (fontified t)) . 5317) (5318 . 5319) (#("  " 0 2 (fontified nil)) . 5318) (#("
" 0 1 (fontified t)) . 5386) (5387 . 5388) (#("  " 0 2 (fontified t)) . 5387) (5443 . 5444) (#(" " 0 1 (fontified nil)) . 5443) (5472 . 5473) (#(" " 0 1 (fontified nil)) . 5472) (5506 . 5507) (#(" " 0 1 (fontified nil)) . 5506) (5538 . 5539) (#(" " 0 1 (fontified nil)) . 5538) (5604 . 5605) (#(" " 0 1 (fontified nil)) . 5604) (5641 . 5642) (#(" " 0 1 (fontified nil)) . 5641) (5664 . 5665) (#(" " 0 1 (fontified nil)) . 5664) (#("
" 0 1 (fontified t)) . 5472) (5473 . 5474) (#("
" 0 1 (fontified t)) . 5538) (5539 . 5540) (#("
" 0 1 (fontified t)) . 5604) (5605 . 5606) (#("
" 0 1 (fontified t)) . 5664) (5665 . 5666) (5754 . 5756) (5763 . 5765) (5753 . 5754) (#(" " 0 1 (fontified nil)) . 5753) (5762 . 5763) (#(" " 0 1 (fontified nil)) . 5762) (#("
" 0 1 (fontified t)) . 5798) (5799 . 5800) (#("  " 0 2 (fontified t)) . 5799) (5842 . 5845) (#(" " 0 1 (fontified t)) . 5842)) (25306 59135 493664 12000) 0 nil] [nil nil ((5840 . 5841) (#("
" 0 1 (fontified t)) . 5840) (#("  " 0 2 (fontified t)) . 5841) (5797 . 5799) (#(" " 0 1 (fontified nil)) . -5797) (5796 . 5797) (5760 . 5761) (#("
" 0 1 (fontified nil)) . 5760) (5751 . 5752) (#("
" 0 1 (fontified t)) . 5751) (#("  " 0 2 (fontified t)) . 5761) (#("  " 0 2 (fontified t)) . 5752) (#(" " 0 1 (fontified nil)) . -5663) (5662 . 5663) (#(" " 0 1 (fontified nil)) . -5603) (5602 . 5603) (#(" " 0 1 (fontified nil)) . -5537) (5536 . 5537) (#(" " 0 1 (fontified nil)) . -5471) (5470 . 5471) (5662 . 5663) (#("
" 0 1 (fontified t)) . 5662) (5639 . 5640) (#("
" 0 1 (fontified t)) . 5639) (5602 . 5603) (#("
" 0 1 (fontified t)) . 5602) (5536 . 5537) (#("
" 0 1 (fontified t)) . 5536) (5504 . 5505) (#("
" 0 1 (fontified t)) . 5504) (5470 . 5471) (#("
" 0 1 (fontified t)) . 5470) (5441 . 5442) (#("
" 0 1 (fontified t)) . 5441) (5342 . 5344) (#(" " 0 1 (fontified nil)) . -5342) (5341 . 5342) (5273 . 5275) (#(" " 0 1 (fontified nil)) . -5273) (5272 . 5273) (5204 . 5206) (#(" " 0 1 (fontified nil)) . -5204) (5203 . 5204) (5144 . 5146) (#(" " 0 1 (fontified nil)) . -5144) (5143 . 5144) (5075 . 5077) (#(" " 0 1 (fontified nil)) . -5075) (5074 . 5075) (5032 . 5034) (#(" " 0 1 (fontified nil)) . -5032) (5031 . 5032) (4967 . 4969) (#(" " 0 1 (fontified nil)) . -4967) (4966 . 4967) (5329 . 5330) (#("
" 0 1 (fontified nil)) . 5329) (5262 . 5263) (#("
" 0 1 (fontified nil)) . 5262) (5195 . 5196) (#("
" 0 1 (fontified nil)) . 5195) (5124 . 5125) (#("
" 0 1 (fontified nil)) . 5124) (5057 . 5058) (#("
" 0 1 (fontified nil)) . 5057) (4986 . 4987) (#("
" 0 1 (fontified nil)) . 4986) (4923 . 4924) (#("
" 0 1 (fontified t)) . 4923) (#("  " 0 2 (fontified t)) . 5330) (#("  " 0 2 (fontified t)) . 5263) (#("  " 0 2 (fontified t)) . 5196) (#("  " 0 2 (fontified t)) . 5125) (#("  " 0 2 (fontified t)) . 5058) (#("  " 0 2 (fontified t)) . 4987) (#("  " 0 2 (fontified t)) . 4924) (t 25306 59115 879784 476000)) ((4924 . 4926) (4987 . 4989) (5058 . 5060) (5125 . 5127) (5196 . 5198) (5263 . 5265) (5330 . 5332) (4923 . 4924) (#(" " 0 1 (fontified nil)) . 4923) (4986 . 4987) (#(" " 0 1 (fontified nil)) . 4986) (5057 . 5058) (#(" " 0 1 (fontified nil)) . 5057) (5124 . 5125) (#(" " 0 1 (fontified nil)) . 5124) (5195 . 5196) (#(" " 0 1 (fontified nil)) . 5195) (5262 . 5263) (#(" " 0 1 (fontified nil)) . 5262) (5329 . 5330) (#(" " 0 1 (fontified nil)) . 5329) (#("
" 0 1 (fontified t)) . 4966) (4967 . 4968) (#("  " 0 2 (fontified nil)) . 4967) (#("
" 0 1 (fontified t)) . 5031) (5032 . 5033) (#("  " 0 2 (fontified nil)) . 5032) (#("
" 0 1 (fontified t)) . 5074) (5075 . 5076) (#("  " 0 2 (fontified nil)) . 5075) (#("
" 0 1 (fontified t)) . 5143) (5144 . 5145) (#("  " 0 2 (fontified nil)) . 5144) (#("
" 0 1 (fontified t)) . 5203) (5204 . 5205) (#("  " 0 2 (fontified nil)) . 5204) (#("
" 0 1 (fontified t)) . 5272) (5273 . 5274) (#("  " 0 2 (fontified nil)) . 5273) (#("
" 0 1 (fontified t)) . 5341) (5342 . 5343) (#("  " 0 2 (fontified t)) . 5342) (5441 . 5442) (#(" " 0 1 (fontified nil)) . 5441) (5470 . 5471) (#(" " 0 1 (fontified nil)) . 5470) (5504 . 5505) (#(" " 0 1 (fontified nil)) . 5504) (5536 . 5537) (#(" " 0 1 (fontified nil)) . 5536) (5602 . 5603) (#(" " 0 1 (fontified nil)) . 5602) (5639 . 5640) (#(" " 0 1 (fontified nil)) . 5639) (5662 . 5663) (#(" " 0 1 (fontified nil)) . 5662) (#("
" 0 1 (fontified t)) . 5470) (5471 . 5472) (#("
" 0 1 (fontified t)) . 5536) (5537 . 5538) (#("
" 0 1 (fontified t)) . 5602) (5603 . 5604) (#("
" 0 1 (fontified t)) . 5662) (5663 . 5664) (5752 . 5754) (5761 . 5763) (5751 . 5752) (#(" " 0 1 (fontified nil)) . 5751) (5760 . 5761) (#(" " 0 1 (fontified nil)) . 5760) (#("
" 0 1 (fontified t)) . 5796) (5797 . 5798) (#("  " 0 2 (fontified t)) . 5797) (5840 . 5843) (#(" " 0 1 (fontified t)) . 5840)) (25306 59132 198887 754000) 0 nil] [nil nil ((5842 . 5843) (#("
" 0 1 (fontified t)) . 5842) (#("  " 0 2 (fontified t)) . 5843) (5799 . 5801) (#(" " 0 1 (fontified nil)) . -5799) (5798 . 5799) (5762 . 5763) (#("
" 0 1 (fontified nil)) . 5762) (5753 . 5754) (#("
" 0 1 (fontified t)) . 5753) (#("  " 0 2 (fontified t)) . 5763) (#("  " 0 2 (fontified t)) . 5754) (#(" " 0 1 (fontified nil)) . -5665) (5664 . 5665) (#(" " 0 1 (fontified nil)) . -5605) (5604 . 5605) (#(" " 0 1 (fontified nil)) . -5539) (5538 . 5539) (#(" " 0 1 (fontified nil)) . -5473) (5472 . 5473) (5664 . 5665) (#("
" 0 1 (fontified t)) . 5664) (5641 . 5642) (#("
" 0 1 (fontified t)) . 5641) (5604 . 5605) (#("
" 0 1 (fontified t)) . 5604) (5538 . 5539) (#("
" 0 1 (fontified t)) . 5538) (5506 . 5507) (#("
" 0 1 (fontified t)) . 5506) (5472 . 5473) (#("
" 0 1 (fontified t)) . 5472) (5443 . 5444) (#("
" 0 1 (fontified t)) . 5443) (5396 . 5398) (#(" " 0 1 (fontified nil)) . -5396) (5395 . 5396) (5327 . 5329) (#(" " 0 1 (fontified nil)) . -5327) (5326 . 5327) (5256 . 5258) (#(" " 0 1 (fontified nil)) . -5256) (5255 . 5256) (5190 . 5192) (#(" " 0 1 (fontified nil face font-lock-string-face)) . -5190) (nil face nil 5189 . 5190) (5189 . 5190) (5131 . 5133) (#(" " 0 1 (fontified nil)) . -5131) (5130 . 5131) (5335 . 5336) (#("
" 0 1 (fontified nil)) . 5335) (5268 . 5269) (#("
" 0 1 (fontified nil)) . 5268) (5201 . 5202) (#("
" 0 1 (fontified nil)) . 5201) (5130 . 5131) (#("
" 0 1 (fontified t)) . 5130) (#("  " 0 2 (fontified t)) . 5336) (#("  " 0 2 (fontified t)) . 5269) (#("  " 0 2 (fontified t)) . 5202) (#("  " 0 2 (fontified t)) . 5131) (t 25306 59115 879784 476000)) ((5131 . 5133) (5202 . 5204) (5269 . 5271) (5336 . 5338) (5130 . 5131) (#(" " 0 1 (fontified nil)) . 5130) (5201 . 5202) (#(" " 0 1 (fontified nil)) . 5201) (5268 . 5269) (#(" " 0 1 (fontified nil)) . 5268) (5335 . 5336) (#(" " 0 1 (fontified nil)) . 5335) (#("
" 0 1 (fontified t)) . 5130) (5131 . 5132) (#("  " 0 2 (fontified nil)) . 5131) (#("
" 0 1 (fontified nil face nil)) . 5189) (nil face font-lock-string-face 5189 . 5190) (5190 . 5191) (#("  " 0 2 (fontified nil face font-lock-string-face)) . 5190) (#("
" 0 1 (fontified t)) . 5255) (5256 . 5257) (#("  " 0 2 (fontified nil)) . 5256) (#("
" 0 1 (fontified t)) . 5326) (5327 . 5328) (#("  " 0 2 (fontified nil)) . 5327) (#("
" 0 1 (fontified t)) . 5395) (5396 . 5397) (#("  " 0 2 (fontified t)) . 5396) (5443 . 5444) (#(" " 0 1 (fontified nil)) . 5443) (5472 . 5473) (#(" " 0 1 (fontified nil)) . 5472) (5506 . 5507) (#(" " 0 1 (fontified nil)) . 5506) (5538 . 5539) (#(" " 0 1 (fontified nil)) . 5538) (5604 . 5605) (#(" " 0 1 (fontified nil)) . 5604) (5641 . 5642) (#(" " 0 1 (fontified nil)) . 5641) (5664 . 5665) (#(" " 0 1 (fontified nil)) . 5664) (#("
" 0 1 (fontified t)) . 5472) (5473 . 5474) (#("
" 0 1 (fontified t)) . 5538) (5539 . 5540) (#("
" 0 1 (fontified t)) . 5604) (5605 . 5606) (#("
" 0 1 (fontified t)) . 5664) (5665 . 5666) (5754 . 5756) (5763 . 5765) (5753 . 5754) (#(" " 0 1 (fontified nil)) . 5753) (5762 . 5763) (#(" " 0 1 (fontified nil)) . 5762) (#("
" 0 1 (fontified t)) . 5798) (5799 . 5800) (#("  " 0 2 (fontified t)) . 5799) (5842 . 5845) (#(" " 0 1 (fontified t)) . 5842)) (25306 59127 172464 317000) 0 nil] [nil nil ((#("-list 'org-structure-template-alist '(\"sc\" . \"src scheme\"))
  (ad" 0 38 (fontified t) 38 42 (fontified t face font-lock-string-face) 42 45 (fontified t) 45 57 (fontified t face font-lock-string-face) 57 65 (fontified t)) . 5071) (undo-tree-id4346 . -65) (t 25306 59115 879784 476000)) ((5071 . 5136)) (25306 59120 146448 127000) 0 nil])
nil
nil
([nil nil ((#("(use-package burly :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 25 (fontified t face font-lock-builtin-face) 25 28 (fontified t) 28 29 (fontified t)) . 5412) (undo-tree-id4366 . -29) (undo-tree-id4367 . -29) (undo-tree-id4368 . -29) (undo-tree-id4369 . -29) (undo-tree-id4370 . -29) (undo-tree-id4371 . 29) (undo-tree-id4372 . -1) (undo-tree-id4373 . 2) (undo-tree-id4374 . -28) (undo-tree-id4375 . -29) (undo-tree-id4376 . -29) (undo-tree-id4377 . -29) (undo-tree-id4378 . -29) (undo-tree-id4379 . -29) (t 25306 59223 66447 336000)) nil (25306 59284 188514 861000) 0 nil])
nil
nil
nil
nil
nil
([nil nil ((#("(use-package ace-window :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 23 (fontified t face font-lock-constant-face) 23 24 (fontified t) 24 30 (fontified t face font-lock-builtin-face) 30 33 (fontified t) 33 34 (fontified t)) . 5412) (undo-tree-id4394 . 34) (undo-tree-id4395 . -1) (undo-tree-id4396 . 2) (undo-tree-id4397 . -33) (t 25306 59284 209778 495000)) nil (25306 59371 778774 230000) 0 nil])
([nil nil ((#("(use-package centered-cursor-mode :diminish centered-cursor-mode)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 33 (fontified t face font-lock-constant-face) 33 34 (fontified t) 34 43 (fontified t face font-lock-builtin-face) 43 65 (fontified t) 65 66 (fontified t)) . 5444) (undo-tree-id4390 . 66) (undo-tree-id4391 . -1) (undo-tree-id4392 . 2) (undo-tree-id4393 . -65)) nil (25306 59371 778771 961000) 0 nil])
([nil nil ((#("(use-package restart-emacs :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 26 (fontified t face font-lock-constant-face) 26 27 (fontified t) 27 33 (fontified t face font-lock-builtin-face) 33 36 (fontified t) 36 37 (fontified t)) . 5444) (undo-tree-id4386 . 37) (undo-tree-id4387 . -1) (undo-tree-id4388 . 2) (undo-tree-id4389 . -36)) nil (25306 59371 778768 811000) 0 nil])
([nil nil ((#("(use-package diminish)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 21 (fontified t face font-lock-constant-face) 21 22 (fontified t) 22 23 (fontified t)) . 5444) (undo-tree-id4382 . 23) (undo-tree-id4383 . -1) (undo-tree-id4384 . 2) (undo-tree-id4385 . -22)) nil (25306 59373 303502 695000) 0 nil])
([nil nil ((#("(use-package bufler
  :general
  (:keymaps 'bufler-list-mode-map \"Q\" 'kill-this-buffer))

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 22 (fontified t) 22 30 (fontified t face font-lock-builtin-face) 30 31 (fontified t) 31 33 (fontified t) 33 34 (fontified t) 34 42 (fontified t face font-lock-builtin-face) 42 65 (fontified t) 65 68 (fontified t face font-lock-string-face) 68 69 (fontified t) 69 88 (fontified t) 88 89 (fontified t) 89 90 (fontified t)) . 5513) (undo-tree-id4415 . -89) (undo-tree-id4416 . -89) (undo-tree-id4417 . -89) (undo-tree-id4418 . -89) 5602) nil (25306 60422 853966 291000) 0 nil] [nil nil ((#("(use-package bufler
  :general
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 22 (fontified t) 22 30 (fontified t face font-lock-builtin-face) 30 31 (fontified t)) . 5513) (undo-tree-id4398 . -30) (undo-tree-id4399 . 31) (undo-tree-id4400 . -1)) ((5513 . 5544)) (25306 59373 303439 810000) 0 nil] [nil nil ((#("(use-package bufler
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 20 (fontified t)) . 5513) (undo-tree-id4380 . 20) (undo-tree-id4381 . -1)) ((5513 . 5533)) (25306 59371 778761 21000) 0 nil])
([nil nil ((#("(use-package mw-thesaurus
  :defer t
  :config
  (add-hook 'mw-thesaurus-mode-hook (lambda () (define-key evil-normal-state-local-map (kbd \"q\") 'mw-thesaurus--quit))))

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 25 (fontified t face font-lock-constant-face) 25 28 (fontified t) 28 34 (fontified t face font-lock-builtin-face) 34 39 (fontified t) 39 46 (fontified t face font-lock-builtin-face) 46 48 (fontified t) 48 84 (fontified t) 84 90 (fontified t face font-lock-keyword-face) 90 139 (fontified t) 139 142 (fontified t face font-lock-string-face) 142 148 (fontified t) 148 168 (fontified t) 168 169 (fontified t)) . 5847) (undo-tree-id4411 . -168) (undo-tree-id4412 . -168) (undo-tree-id4413 . -168) (undo-tree-id4414 . -168) 6015) nil (25306 60422 853962 729000) 0 nil])
nil
nil
([nil nil ((#("(use-package epithet
  :ensure nil
  :config
  (add-hook 'Info-selection-hook #'epithet-rename-buffer)
  (add-hook 'help-mode-hook #'epithet-rename-buffer))
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 20 (fontified t face font-lock-constant-face) 20 23 (fontified t) 23 30 (fontified t face font-lock-builtin-face) 30 37 (fontified t) 37 44 (fontified t face font-lock-builtin-face) 44 157 (fontified t)) . 6060) (undo-tree-id4405 . -45) (undo-tree-id4406 . -45) (undo-tree-id4407 . 157) (undo-tree-id4408 . -1) (undo-tree-id4409 . 2) (undo-tree-id4410 . -156)) nil (25306 60422 853959 63000) 0 nil])
([nil nil ((#("(use-package most-used-words :ensure nil)
(defun a3madkour/deft-kill ()
  (kill-buffer \"*Deft*\"))
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 28 (fontified t face font-lock-constant-face) 28 29 (fontified t) 29 36 (fontified t face font-lock-builtin-face) 36 43 (fontified t) 43 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 68 (fontified t face font-lock-function-name-face) 68 87 (fontified t) 87 95 (fontified t face font-lock-string-face) 95 98 (fontified t)) . 6107) (undo-tree-id4401 . 98) (undo-tree-id4402 . -1) (undo-tree-id4403 . 58) (undo-tree-id4404 . -41)) nil (25306 60422 853952 627000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6107 . 6108) (#("
" 0 1 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) fontified nil)) . -6163) (6107 . 6164)) nil (25306 60446 308225 623000) 0 nil])
([nil nil ((#("(defun a3madkour/deft-kill ()
  (kill-buffer \"*Deft*\"))
(defun a3madkour/deft-evil-fix ()
  (evil-insert-state)
  (centered-cursor-mode))
" 0 1 (font-lock-fontified t src-block t fontified t) 1 6 (font-lock-fontified t src-block t fontified t face font-lock-keyword-face) 6 7 (font-lock-fontified t src-block t fontified t) 7 26 (font-lock-fontified t src-block t fontified t face font-lock-function-name-face) 26 30 (font-lock-fontified t src-block t fontified t) 30 45 (font-lock-fontified t src-block t fontified t) 45 46 (font-lock-fontified t src-block t fontified t face font-lock-string-face) 46 52 (font-lock-fontified t src-block t org-emphasis t fontified t face font-lock-string-face) 52 53 (font-lock-fontified t src-block t fontified t face font-lock-string-face) 53 55 (font-lock-fontified t src-block t fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t) 63 86 (fontified t face font-lock-function-name-face) 86 126 (fontified t) 126 127 (fontified t) 127 130 (fontified t) 130 138 (fontified t)) . 6108) (undo-tree-id4422 . -138) (undo-tree-id4423 . -138) (undo-tree-id4424 . -138) (undo-tree-id4425 . -138) (undo-tree-id4426 . -112) (undo-tree-id4427 . -55) (undo-tree-id4428 . -138) (undo-tree-id4429 . -138) (undo-tree-id4430 . -138) (undo-tree-id4431 . -138) (undo-tree-id4432 . -138) (undo-tree-id4433 . -138) (undo-tree-id4434 . -138) (undo-tree-id4435 . -138) (undo-tree-id4436 . -138) (undo-tree-id4437 . -138) (undo-tree-id4438 . -138) (undo-tree-id4439 . -138) (undo-tree-id4440 . -138) (undo-tree-id4441 . -138) (undo-tree-id4442 . -138) (undo-tree-id4443 . -112) (undo-tree-id4444 . -112) (undo-tree-id4445 . -112) (undo-tree-id4446 . -112) (undo-tree-id4447 . -112) (undo-tree-id4448 . -112) (undo-tree-id4449 . -112) (undo-tree-id4450 . -112) (undo-tree-id4451 . -112) (undo-tree-id4452 . -112) (undo-tree-id4453 . -112) (undo-tree-id4454 . -112) (undo-tree-id4455 . -112) (undo-tree-id4456 . -112) (undo-tree-id4457 . -112) (undo-tree-id4458 . -112) (undo-tree-id4459 . -112) (undo-tree-id4460 . -112) (undo-tree-id4461 . -112) (undo-tree-id4462 . -112) (undo-tree-id4463 . -112) (undo-tree-id4464 . -112) (undo-tree-id4465 . -112) (undo-tree-id4466 . -112) (undo-tree-id4467 . -112) (undo-tree-id4468 . -112) (undo-tree-id4469 . -112) (t 25306 60422 879738 65000)) ((6108 . 6246)) (25306 60447 566791 265000) 0 nil])
([nil nil ((#("
(use-package deft
  :config
  (setq deft-directory (concat a3madkour/dropbox \"notes/\")
        deft-extensions '(\"org\" \"txt\")
        deft-recursive t
        deft-file-limit 40
        deft-use-filename-as-title t)

  (add-hook 'deft-open-file-hook 'a3madkour/deft-kill) ;; Once a file is opened, kill Deft
  (add-hook 'deft-mode-hook 'a3madkour/deft-evil-fix) ;; Goes into insert mode automaticlly in Deft

  ;; Removes :PROPERTIES: from descriptions
  (setq deft-strip-summary-regexp \":PROPERTIES:\\n\\\\(.+\\n\\\\)+:END:\\n\")
  :general

  (general-define-key :states 'normal :keymaps 'deft-mode-map
                      ;; 'q' kills Deft in normal mode
                      \"q\" 'kill-this-buffer)

  (general-define-key :states 'insert :keymaps 'deft-mode-map
                      \"C-j\" 'next-line
                      \"C-k\" 'previous-line)
  )
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 21 (fontified t) 21 28 (fontified t face font-lock-builtin-face) 28 32 (fontified t) 32 36 (fontified t face font-lock-keyword-face) 36 48 (fontified t) 48 78 (fontified t) 78 82 (fontified t face font-lock-string-face) 82 86 (fontified t face font-lock-string-face) 86 88 (fontified t) 88 113 (fontified t) 113 114 (fontified t) 114 119 (fontified t face font-lock-string-face) 119 120 (fontified t) 120 125 (fontified t face font-lock-string-face) 125 127 (fontified t) 127 216 (fontified t) 216 217 (fontified t) 217 239 (fontified t) 239 240 (fontified t) 240 273 (fontified t) 273 276 (fontified t face font-lock-comment-delimiter-face) 276 308 (fontified t face font-lock-comment-face) 308 309 (fontified t face font-lock-comment-face) 309 339 (fontified t) 339 363 (fontified t) 363 366 (fontified t face font-lock-comment-delimiter-face) 366 398 (fontified t face font-lock-comment-face) 398 409 (fontified t face font-lock-comment-face) 409 412 (fontified t) 412 415 (fontified t face font-lock-comment-delimiter-face) 415 420 (fontified t face font-lock-comment-face) 420 454 (fontified t face font-lock-comment-face) 454 457 (fontified t) 457 461 (fontified t face font-lock-keyword-face) 461 488 (fontified t) 488 503 (fontified t face font-lock-string-face) 503 504 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 504 505 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 505 506 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 506 510 (fontified t face font-lock-string-face) 510 512 (fontified t face (font-lock-regexp-grouping-backslash font-lock-string-face)) 512 513 (fontified t face (font-lock-regexp-grouping-construct font-lock-string-face)) 513 522 (fontified t face font-lock-string-face) 522 524 (fontified t) 524 526 (fontified t) 526 534 (fontified t face font-lock-builtin-face) 534 558 (fontified t) 558 565 (fontified t face font-lock-builtin-face) 565 574 (fontified t) 574 582 (fontified t face font-lock-builtin-face) 582 620 (fontified t) 620 623 (fontified t face font-lock-comment-delimiter-face) 623 624 (fontified t face font-lock-comment-face) 624 625 (fontified t face (font-lock-constant-face font-lock-comment-face)) 625 653 (fontified t face font-lock-comment-face) 653 675 (fontified t) 675 678 (fontified t face font-lock-string-face) 678 721 (fontified t) 721 728 (fontified t face font-lock-builtin-face) 728 737 (fontified t) 737 745 (fontified t face font-lock-builtin-face) 745 783 (fontified t) 783 788 (fontified t face font-lock-string-face) 788 822 (fontified t) 822 827 (fontified t face font-lock-string-face) 827 848 (fontified t)) . 6108) (undo-tree-id4480 . -847) (undo-tree-id4481 . -847) (undo-tree-id4482 . -847) (undo-tree-id4483 . -847) 6955) nil (25306 60464 324316 954000) 0 nil])
([nil nil ((#(";; This is a weird one. Package is auctex but needs to be managed like this." 0 3 (fontified t face font-lock-comment-delimiter-face) 3 33 (fontified t face font-lock-comment-face) 33 60 (fontified t face font-lock-comment-face) 60 76 (fontified t face font-lock-comment-face)) . 6128) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1)) nil (25306 60464 324311 138000) 0 nil])
([nil nil ((#("(use-package auctex 
  :ensure nil
  :defer t
  :init
  (setq TeX-engine 'xetex ;; Use XeTeX
        latex-run-command \"xetex\")

  (setq TeX-parse-self t ; parse on load
        TeX-auto-save t  ; parse on save
        ;; Use directories in a hidden away folder for AUCTeX files.
        TeX-auto-local (concat user-emacs-directory \"auctex/auto/\")
        TeX-style-local (concat user-emacs-directory \"auctex/style/\")

        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex

        TeX-show-compilation nil

        ;; Don't start the Emacs server when correlating sources.
        TeX-source-correlate-start-server nil

        ;; Automatically insert braces after sub/superscript in `LaTeX-math-mode'.
        TeX-electric-sub-and-superscript t
        ;; Just save, don't ask before each compilation.
        TeX-save-query nil)

  ;; To use pdfview with auctex:
  (setq TeX-view-program-selection '((output-pdf \"PDF Tools\"))
        TeX-view-program-list '((\"PDF Tools\" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)
  :general
  (general-define-key
    :prefix \",\"
    :states 'normal
    :keymaps 'LaTeX-mode-map
    \"\" nil
    \"a\" '(TeX-command-run-all :which-key \"TeX run all\")
    \"c\" '(TeX-command-master :which-key \"TeX-command-master\")
    \"c\" '(TeX-command-master :which-key \"TeX-command-master\")
    \"e\" '(LaTeX-environment :which-key \"Insert environment\")
    \"s\" '(LaTeX-section :which-key \"Insert section\")
    \"m\" '(TeX-insert-macro :which-key \"Insert macro\")
    )

  )

(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer) ;; Standard way

(use-package company-auctex
  :after auctex
  :init
  (add-to-list 'company-backends 'company-auctex)
  (company-auctex-init))

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 21 (fontified t) 21 23 (fontified t) 23 30 (fontified t face font-lock-builtin-face) 30 37 (fontified t) 37 43 (fontified t face font-lock-builtin-face) 43 48 (fontified t) 48 53 (fontified t face font-lock-builtin-face) 53 57 (fontified t) 57 61 (fontified t face font-lock-keyword-face) 61 80 (fontified t) 80 83 (fontified t face font-lock-comment-delimiter-face) 83 93 (fontified t face font-lock-comment-face) 93 119 (fontified t) 119 126 (fontified t face font-lock-string-face) 126 132 (fontified t) 132 136 (fontified t face font-lock-keyword-face) 136 154 (fontified t) 154 156 (fontified t face font-lock-comment-delimiter-face) 156 170 (fontified t face font-lock-comment-face) 170 195 (fontified t) 195 197 (fontified t face font-lock-comment-delimiter-face) 197 211 (fontified t face font-lock-comment-face) 211 219 (fontified t) 219 222 (fontified t face font-lock-comment-delimiter-face) 222 280 (fontified t face font-lock-comment-face) 280 332 (fontified t) 332 346 (fontified t face font-lock-string-face) 346 348 (fontified t) 348 349 (fontified t) 349 401 (fontified t) 401 416 (fontified t face font-lock-string-face) 416 418 (fontified t) 418 493 (fontified t) 493 494 (fontified t) 494 500 (fontified t) 500 543 (fontified t) 543 546 (fontified t face font-lock-comment-delimiter-face) 546 576 (fontified t face font-lock-comment-face) 576 577 (fontified t face font-lock-comment-face) 577 601 (fontified t face font-lock-comment-face) 601 656 (fontified t) 656 659 (fontified t face font-lock-comment-delimiter-face) 659 664 (fontified t face font-lock-comment-face) 664 713 (fontified t face font-lock-comment-face) 713 728 (fontified t face (font-lock-constant-face font-lock-comment-face)) 728 731 (fontified t face font-lock-comment-face) 731 782 (fontified t) 782 785 (fontified t face font-lock-comment-delimiter-face) 785 831 (fontified t face font-lock-comment-face) 831 862 (fontified t) 862 865 (fontified t face font-lock-comment-delimiter-face) 865 893 (fontified t face font-lock-comment-face) 893 896 (fontified t) 896 900 (fontified t face font-lock-keyword-face) 900 942 (fontified t) 942 953 (fontified t face font-lock-string-face) 953 989 (fontified t) 989 1000 (fontified t face font-lock-string-face) 1000 1074 (fontified t) 1074 1082 (fontified t face font-lock-builtin-face) 1082 1109 (fontified t) 1109 1116 (fontified t face font-lock-builtin-face) 1116 1117 (fontified t) 1117 1120 (fontified t face font-lock-string-face) 1120 1125 (fontified t) 1125 1132 (fontified t face font-lock-builtin-face) 1132 1145 (fontified t) 1145 1153 (fontified t face font-lock-builtin-face) 1153 1174 (fontified t) 1174 1176 (fontified t face font-lock-string-face) 1176 1185 (fontified t) 1185 1188 (fontified t face font-lock-string-face) 1188 1211 (fontified t) 1211 1221 (fontified t face font-lock-builtin-face) 1221 1222 (fontified t) 1222 1235 (fontified t face font-lock-string-face) 1235 1241 (fontified t) 1241 1244 (fontified t face font-lock-string-face) 1244 1266 (fontified t) 1266 1276 (fontified t face font-lock-builtin-face) 1276 1277 (fontified t) 1277 1297 (fontified t face font-lock-string-face) 1297 1303 (fontified t) 1303 1306 (fontified t face font-lock-string-face) 1306 1328 (fontified t) 1328 1338 (fontified t face font-lock-builtin-face) 1338 1339 (fontified t) 1339 1359 (fontified t face font-lock-string-face) 1359 1365 (fontified t) 1365 1368 (fontified t face font-lock-string-face) 1368 1389 (fontified t) 1389 1399 (fontified t face font-lock-builtin-face) 1399 1400 (fontified t) 1400 1420 (fontified t face font-lock-string-face) 1420 1424 (fontified t) 1424 1426 (fontified t) 1426 1429 (fontified t face font-lock-string-face) 1429 1446 (fontified t) 1446 1456 (fontified t face font-lock-builtin-face) 1456 1457 (fontified t) 1457 1473 (fontified t face font-lock-string-face) 1473 1475 (fontified t) 1475 1479 (fontified t) 1479 1482 (fontified t face font-lock-string-face) 1482 1502 (fontified t) 1502 1512 (fontified t face font-lock-builtin-face) 1512 1513 (fontified t) 1513 1521 (fontified t face font-lock-string-face) 1521 1527 (face font-lock-string-face fontified t) 1527 1529 (fontified t) 1529 1623 (fontified t) 1623 1626 (fontified t face font-lock-comment-delimiter-face) 1626 1639 (fontified t face font-lock-comment-face) 1639 1641 (fontified t) 1641 1652 (fontified t face font-lock-keyword-face) 1652 1653 (fontified t) 1653 1667 (fontified t face font-lock-constant-face) 1667 1670 (fontified t) 1670 1676 (fontified t face font-lock-builtin-face) 1676 1686 (fontified t) 1686 1691 (fontified t face font-lock-builtin-face) 1691 1768 (fontified t)) . 6108) (undo-tree-id4499 . -1767) (undo-tree-id4500 . -1767) (undo-tree-id4501 . -1538) (undo-tree-id4502 . -1767) (undo-tree-id4503 . 1768) (undo-tree-id4504 . -1) (undo-tree-id4505 . 230) (undo-tree-id4506 . -1539) (t 25306 60464 353069 924000)) nil (25306 60538 134334 17000) 0 nil])
([nil nil ((#("
(use-package pdf-tools
  :defer t
  :mode  (\"\\\\.pdf\\\\'\" . pdf-view-mode)
  :config
  (pdf-loader-install)
  (push 'pdf-view-midnight-minor-mode pdf-tools-enabled-modes)
  (setq-default pdf-view-display-size 'fit-height)
  (setq pdf-view-continuous nil) ;; Makes it so scrolling down to the bottom/top of a page doesn't switch to the next page
  (setq pdf-view-midnight-colors '(\"#ffffff\" . \"#121212\" )) ;; I use midnight mode as dark mode, dark mode doesn't seem to work
  :general
  (general-define-key :states 'motion :keymaps 'pdf-view-mode-map
                      \"j\" 'pdf-view-next-page
                      \"k\" 'pdf-view-previous-page

                      \"C-j\" 'pdf-view-next-line-or-next-page
                      \"C-k\" 'pdf-view-previous-line-or-previous-page

                      ;; Arrows for movement as well
                      (kbd \"<down>\") 'pdf-view-next-line-or-next-page
                      (kbd \"<up>\") 'pdf-view-previous-line-or-previous-page

                      (kbd \"<down>\") 'pdf-view-next-line-or-next-page
                      (kbd \"<up>\") 'pdf-view-previous-line-or-previous-page

                      (kbd \"<left>\") 'image-backward-hscroll
                      (kbd \"<right>\") 'image-forward-hscroll

                      \"H\" 'pdf-view-fit-height-to-window
                      \"0\" 'pdf-view-fit-height-to-window
                      \"W\" 'pdf-view-fit-width-to-window
                      \"=\" 'pdf-view-enlarge
                      \"-\" 'pdf-view-shrink

                      \"q\" 'quit-window
                      \"Q\" 'kill-this-buffer
                      \"g\" 'revert-buffer
                      )
  )

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 23 (fontified t face font-lock-constant-face) 23 26 (fontified t) 26 32 (fontified t face font-lock-builtin-face) 32 37 (fontified t) 37 42 (fontified t face font-lock-builtin-face) 42 45 (fontified t) 45 56 (fontified t face font-lock-string-face) 56 76 (fontified t) 76 83 (fontified t face font-lock-builtin-face) 83 110 (fontified t) 110 114 (fontified t face font-lock-keyword-face) 114 173 (fontified t) 173 185 (fontified t face font-lock-keyword-face) 185 224 (fontified t) 224 228 (fontified t face font-lock-keyword-face) 228 254 (fontified t) 254 257 (fontified t face font-lock-comment-delimiter-face) 257 344 (fontified t face font-lock-comment-face) 344 347 (fontified t) 347 351 (fontified t face font-lock-keyword-face) 351 379 (fontified t) 379 388 (fontified t face font-lock-string-face) 388 391 (fontified t) 391 400 (fontified t face font-lock-string-face) 400 404 (fontified t) 404 407 (fontified t face font-lock-comment-delimiter-face) 407 463 (fontified t face font-lock-comment-face) 463 472 (fontified t face font-lock-comment-face) 472 474 (fontified t) 474 482 (fontified t face font-lock-builtin-face) 482 505 (fontified t) 505 512 (fontified t face font-lock-builtin-face) 512 521 (fontified t) 521 529 (fontified t face font-lock-builtin-face) 529 571 (fontified t) 571 574 (fontified t face font-lock-string-face) 574 617 (fontified t) 617 620 (fontified t face font-lock-string-face) 620 668 (fontified t) 668 673 (fontified t face font-lock-string-face) 673 729 (fontified t) 729 734 (fontified t face font-lock-string-face) 734 799 (fontified t) 799 802 (fontified t face font-lock-comment-delimiter-face) 802 830 (fontified t face font-lock-comment-face) 830 857 (fontified t) 857 865 (fontified t face font-lock-string-face) 865 927 (fontified t) 927 933 (fontified t face font-lock-string-face) 933 1004 (fontified t) 1004 1012 (fontified t face font-lock-string-face) 1012 1074 (fontified t) 1074 1080 (fontified t face font-lock-string-face) 1080 1151 (fontified t) 1151 1159 (fontified t face font-lock-string-face) 1159 1212 (fontified t) 1212 1221 (fontified t face font-lock-string-face) 1221 1261 (fontified t) 1261 1269 (fontified t) 1269 1272 (fontified t face font-lock-string-face) 1272 1304 (fontified t) 1304 1326 (fontified t) 1326 1329 (fontified t face font-lock-string-face) 1329 1383 (fontified t) 1383 1386 (fontified t face font-lock-string-face) 1386 1439 (fontified t) 1439 1442 (fontified t face font-lock-string-face) 1442 1483 (fontified t) 1483 1486 (fontified t face font-lock-string-face) 1486 1500 (fontified t) 1500 1501 (fontified t) 1501 1504 (fontified t) 1504 1527 (fontified t) 1527 1530 (fontified t face font-lock-string-face) 1530 1566 (fontified t) 1566 1569 (fontified t face font-lock-string-face) 1569 1610 (fontified t) 1610 1613 (fontified t face font-lock-string-face) 1613 1658 (fontified t)) . 6108) (undo-tree-id4494 . -1657) (undo-tree-id4495 . -1657) (undo-tree-id4496 . -1657) (undo-tree-id4497 . -84) (undo-tree-id4498 . -1657) 7765) nil (25306 60538 134326 664000) 0 nil])
([nil nil ((#("
(use-package popper
  :bind ((\"C-`\"   . popper-toggle-latest)
         (\"M-`\"   . popper-cycle)
         (\"C-M-`\" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '(\"\\\\*Messages\\\\*\"
          \"Output\\\\*$\"
          \"\\\\*Warnings\\\\*\"
          help-mode
          compilation-mode))
  (popper-mode +1))
" 0 1 (fontified t rear-nonsticky t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 20 (fontified t face font-lock-constant-face) 20 21 (fontified t) 21 23 (fontified t) 23 28 (fontified t face font-lock-builtin-face) 28 31 (fontified t) 31 36 (fontified t face font-lock-string-face) 36 73 (fontified t) 73 78 (fontified t face font-lock-string-face) 78 107 (fontified t) 107 114 (fontified t face font-lock-string-face) 114 140 (fontified t) 140 145 (fontified t face font-lock-builtin-face) 145 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 189 (fontified t) 189 205 (fontified t face font-lock-string-face) 205 216 (fontified t) 216 228 (fontified t face font-lock-string-face) 228 239 (fontified t) 239 255 (fontified t face font-lock-string-face) 255 315 (fontified t) 315 325 (fontified t)) . 6107) (undo-tree-id4487 . -324) (undo-tree-id4488 . -324) (undo-tree-id4489 . -1) (undo-tree-id4490 . -324) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -324) 6431) nil (25306 60538 134393 528000) 0 nil])
([nil nil ((#("(use-package rainbow-mode
  :defer t)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 25 (fontified t face font-lock-constant-face) 25 26 (fontified t) 26 28 (fontified t) 28 34 (fontified t face font-lock-builtin-face) 34 37 (fontified t) 37 38 (fontified t)) . 6107) (undo-tree-id4555 . 38) (undo-tree-id4556 . 38) (undo-tree-id4557 . -1) (undo-tree-id4558 . 2) (undo-tree-id4559 . -37)) nil (25306 60564 467537 175000) 0 nil] [nil nil ((#("(use-package rainbow-mode
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 25 (fontified t face font-lock-constant-face) 25 26 (fontified t)) . 6107) (undo-tree-id4484 . 26) (undo-tree-id4485 . 26) (undo-tree-id4486 . -1)) ((6107 . 6133)) (25306 60538 134314 451000) 0 nil])
([nil nil ((#("(use-package hl-todo
  :defer t
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-keyword-faces
      '((\"TODO\"   . \"#FF0000\")
        (\"FIXME\"  . \"#FF4500\")
        (\"DEBUG\"  . \"#A020F0\")
        (\"WIP\"   . \"#1E90FF\"))))
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 20 (fontified t face font-lock-constant-face) 20 23 (fontified t) 23 29 (fontified t face font-lock-builtin-face) 29 34 (fontified t) 34 39 (fontified t face font-lock-builtin-face) 39 69 (fontified t) 69 76 (fontified t face font-lock-builtin-face) 76 80 (fontified t) 80 84 (fontified t face font-lock-keyword-face) 84 116 (fontified t) 116 117 (fontified t face font-lock-string-face) 117 121 (fontified t face ((:inherit hl-todo :foreground "#FF0000") font-lock-string-face)) 121 122 (fontified t face font-lock-string-face) 122 127 (fontified t) 127 136 (fontified t face font-lock-string-face) 136 147 (fontified t) 147 148 (fontified t face font-lock-string-face) 148 153 (fontified t face ((:inherit hl-todo :foreground "#FF4500") font-lock-string-face)) 153 154 (fontified t face font-lock-string-face) 154 158 (fontified t) 158 167 (fontified t face font-lock-string-face) 167 178 (fontified t) 178 179 (fontified t face font-lock-string-face) 179 184 (fontified t face ((:inherit hl-todo :foreground "#A020F0") font-lock-string-face)) 184 185 (fontified t face font-lock-string-face) 185 189 (fontified t) 189 198 (fontified t face font-lock-string-face) 198 209 (fontified t) 209 210 (fontified t face font-lock-string-face) 210 213 (fontified t face ((:inherit hl-todo :foreground "#1E90FF") font-lock-string-face)) 213 214 (fontified t face font-lock-string-face) 214 219 (fontified t) 219 228 (fontified t face font-lock-string-face) 228 233 (fontified t)) . 6108) (undo-tree-id4522 . -232) (undo-tree-id4523 . -232) (undo-tree-id4524 . -232) (undo-tree-id4525 . -233) (undo-tree-id4526 . -232) (undo-tree-id4527 . -200) (undo-tree-id4528 . -232) (undo-tree-id4529 . -232) (undo-tree-id4530 . -232) (undo-tree-id4531 . -232) (undo-tree-id4532 . -232) (undo-tree-id4533 . -232) (undo-tree-id4534 . -232) (undo-tree-id4535 . -232) (undo-tree-id4536 . -232) (undo-tree-id4537 . -232) (undo-tree-id4538 . -232) (undo-tree-id4539 . -232) (undo-tree-id4540 . -232) (undo-tree-id4541 . -232) (undo-tree-id4542 . -232) (undo-tree-id4543 . -232) (undo-tree-id4544 . -232) (undo-tree-id4545 . -232) (undo-tree-id4546 . -232) (undo-tree-id4547 . -232) (undo-tree-id4548 . -232) (undo-tree-id4549 . -232) (undo-tree-id4550 . -232) (undo-tree-id4551 . -232) (undo-tree-id4552 . -232) (undo-tree-id4553 . -232) (undo-tree-id4554 . -232) 6340) nil (25306 60564 467604 474000) 0 nil])
nil
([nil nil ((#("
;; optional if you want which-key integration
(use-package which-key
    :config
    (which-key-mode))
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 47 (fontified t face font-lock-comment-face) 47 48 (fontified t) 48 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 69 (fontified t face font-lock-constant-face) 69 74 (fontified t) 74 81 (fontified t face font-lock-builtin-face) 81 104 (fontified t)) . 6708) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1)) nil (25306 60567 432396 389000) 0 nil] [nil nil ((#("
;; optional if you want which-key integration
(use-package which-key
    :config
    (which-key-mode))
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 47 (fontified t face font-lock-comment-face) 47 48 (fontified t) 48 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 69 (fontified t face font-lock-constant-face) 69 74 (fontified t) 74 81 (fontified t face font-lock-builtin-face) 81 104 (fontified t)) . 6708) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1)) ((6708 . 6812)) (25306 60564 467445 987000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6708)) nil (25306 60585 157963 310000) 0 nil])
nil
([nil nil ((#("(use-package ranger)

(ranger-override-dired-mode t)

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 22 (fontified t) 22 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t)) . 8594) (undo-tree-id4901 . 54) (undo-tree-id4902 . -1) (undo-tree-id4903 . 35) (undo-tree-id4904 . -20) (t 25306 60567 456399 596000)) nil (25306 60651 962543 295000) 0 nil] [nil nil ((#("(use-package ranger)

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 22 (fontified t)) . 8594) (undo-tree-id4575 . -22) (undo-tree-id4576 . -22) (undo-tree-id4577 . -22) (undo-tree-id4578 . -22) (undo-tree-id4579 . -22) (undo-tree-id4580 . -21) (undo-tree-id4581 . -21) (undo-tree-id4582 . -21) (undo-tree-id4583 . -21) (undo-tree-id4584 . -21) (undo-tree-id4585 . 22) (undo-tree-id4586 . -1) (undo-tree-id4587 . 3) (undo-tree-id4588 . -20) (t 25306 60567 456399 596000)) ((8594 . 8616)) (25306 60585 157784 317000) 0 nil])
([nil nil ((#("
(use-package eshell-git-prompt
  :config
  (eshell-git-prompt-use-theme 'powerline)
)

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 31 (fontified t face font-lock-constant-face) 31 32 (fontified t) 32 34 (fontified t) 34 41 (fontified t face font-lock-builtin-face) 41 88 (fontified t)) . 8593) (undo-tree-id4896 . -87) (undo-tree-id4897 . -87) (undo-tree-id4898 . -1) (undo-tree-id4899 . -87) (undo-tree-id4900 . -87) 8680) nil (25306 60651 962540 135000) 0 nil])
nil
([nil nil ((#("(use-package command-log-mode)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 29 (fontified t face font-lock-constant-face) 29 31 (fontified t)) . 8593) (undo-tree-id4891 . 31) (undo-tree-id4892 . 31) (undo-tree-id4893 . -1) (undo-tree-id4894 . 2) (undo-tree-id4895 . -30)) nil (25306 60651 962536 466000) 0 nil])
([nil nil ((#("
(use-package pulsar
  :config
  (setq pulsar-pulse-functions
      ;; NOTE 2022-04-09: The commented out functions are from before
      ;; the introduction of `pulsar-pulse-on-window-change'.  Try that
      ;; instead.
      '(recenter-top-bottom
        move-to-window-line-top-bottom
        reposition-window
        ;; bookmark-jump
        ;; other-window
        ;; delete-window
        ;; delete-other-windows
        forward-page
		consult-imenu
        backward-page
        scroll-up-command
        scroll-down-command
        ;; windmove-right
        ;; windmove-left
        ;; windmove-up
        ;; windmove-down
        ;; windmove-swap-states-right
        ;; windmove-swap-states-left
        ;; windmove-swap-states-up
        ;; windmove-swap-states-down
        ;; tab-new
        ;; tab-close
        ;; tab-next
        org-next-visible-heading
        org-previous-visible-heading
        org-forward-heading-same-level
        org-backward-heading-same-level
        outline-backward-same-level
        outline-forward-same-level
        outline-next-visible-heading
        outline-previous-visible-heading
        outline-up-heading))

(setq pulsar-pulse-on-window-change t)
(setq pulsar-pulse t)
(setq pulsar-delay 0.055)
(setq pulsar-iterations 10)
(setq pulsar-face 'pulsar-magenta)
(setq pulsar-highlight-face 'pulsar-yellow)

(pulsar-global-mode 1)
  )

" 0 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 20 (fontified t face font-lock-constant-face) 20 23 (fontified t) 23 30 (fontified t face font-lock-builtin-face) 30 34 (fontified t) 34 38 (fontified t face font-lock-keyword-face) 38 68 (fontified t) 68 71 (fontified t face font-lock-comment-delimiter-face) 71 132 (fontified t face font-lock-comment-face) 132 138 (fontified t) 138 141 (fontified t face font-lock-comment-delimiter-face) 141 162 (fontified t face font-lock-comment-face) 162 191 (fontified t face (font-lock-constant-face font-lock-comment-face)) 191 204 (fontified t face font-lock-comment-face) 204 210 (fontified t) 210 213 (fontified t face font-lock-comment-delimiter-face) 213 222 (fontified t face font-lock-comment-face) 222 323 (fontified t) 323 326 (fontified t face font-lock-comment-delimiter-face) 326 340 (fontified t face font-lock-comment-face) 340 348 (fontified t) 348 351 (fontified t face font-lock-comment-delimiter-face) 351 364 (fontified t face font-lock-comment-face) 364 372 (fontified t) 372 375 (fontified t face font-lock-comment-delimiter-face) 375 389 (fontified t face font-lock-comment-face) 389 397 (fontified t) 397 400 (fontified t face font-lock-comment-delimiter-face) 400 421 (fontified t face font-lock-comment-face) 421 445 (fontified t) 445 458 (fontified t) 458 539 (fontified t) 539 542 (fontified t) 542 545 (fontified t face font-lock-comment-delimiter-face) 545 560 (fontified t face font-lock-comment-face) 560 568 (fontified t) 568 571 (fontified t face font-lock-comment-delimiter-face) 571 585 (fontified t face font-lock-comment-face) 585 593 (fontified t) 593 596 (fontified t face font-lock-comment-delimiter-face) 596 608 (fontified t face font-lock-comment-face) 608 616 (fontified t) 616 619 (fontified t face font-lock-comment-delimiter-face) 619 633 (fontified t face font-lock-comment-face) 633 641 (fontified t) 641 644 (fontified t face font-lock-comment-delimiter-face) 644 671 (fontified t face font-lock-comment-face) 671 679 (fontified t) 679 682 (fontified t face font-lock-comment-delimiter-face) 682 708 (fontified t face font-lock-comment-face) 708 716 (fontified t) 716 719 (fontified t face font-lock-comment-delimiter-face) 719 743 (fontified t face font-lock-comment-face) 743 751 (fontified t) 751 754 (fontified t face font-lock-comment-delimiter-face) 754 780 (fontified t face font-lock-comment-face) 780 788 (fontified t) 788 791 (fontified t face font-lock-comment-delimiter-face) 791 799 (fontified t face font-lock-comment-face) 799 807 (fontified t) 807 810 (fontified t face font-lock-comment-delimiter-face) 810 820 (fontified t face font-lock-comment-face) 820 828 (fontified t) 828 831 (fontified t face font-lock-comment-delimiter-face) 831 840 (fontified t face font-lock-comment-face) 840 955 (fontified t) 955 956 (fontified t) 956 988 (fontified t) 988 989 (fontified t) 989 1025 (fontified t) 1025 1044 (fontified t) 1044 1060 (fontified t) 1060 1075 (fontified t) 1075 1076 (fontified t) 1076 1097 (fontified t) 1097 1103 (fontified t) 1103 1138 (fontified t) 1138 1169 (fontified t) 1169 1173 (fontified t face font-lock-keyword-face) 1173 1208 (fontified t) 1208 1212 (fontified t face font-lock-keyword-face) 1212 1230 (fontified t) 1230 1234 (fontified t face font-lock-keyword-face) 1234 1256 (fontified t) 1256 1260 (fontified t face font-lock-keyword-face) 1260 1284 (fontified t) 1284 1288 (fontified t face font-lock-keyword-face) 1288 1319 (fontified t) 1319 1323 (fontified t face font-lock-keyword-face) 1323 1391 (fontified t)) . 9018) (undo-tree-id4886 . -1390) (undo-tree-id4887 . -1390) (undo-tree-id4888 . -1390) (undo-tree-id4889 . -250) (undo-tree-id4890 . -1390) 10408) nil (25306 60651 962531 979000) 0 nil])
([nil nil ((#("(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
;; (load-theme 'doom-molokai t)			 ;

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users

  (setq doom-themes-treemacs-theme \"doom-atom\") ; use \"doom-colors\" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
;; Org-super-agenda-mode itself is activated in the use-package block
;; not working right now, from https://jblevins.org/log/dired-open
;; (evil-define-key 'motion 'dired-mode-map \"s-o\" '(lambda () (interactive)
;; 												  (let ((fn (dired-get-file-for-visit)))
;; 													(start-process \"default-app\" nil \"open\" fn))))

" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 24 (fontified t face font-lock-constant-face) 24 27 (fontified t) 27 34 (fontified t face font-lock-builtin-face) 34 39 (fontified t) 39 46 (fontified t face font-lock-builtin-face) 46 49 (fontified t) 49 52 (fontified t face font-lock-comment-delimiter-face) 52 79 (fontified t face font-lock-comment-face) 79 82 (fontified t) 82 86 (fontified t face font-lock-keyword-face) 86 116 (fontified t) 116 118 (fontified t face font-lock-comment-delimiter-face) 118 155 (fontified t face font-lock-comment-face) 155 192 (fontified t) 192 194 (fontified t face font-lock-comment-delimiter-face) 194 234 (fontified t face font-lock-comment-face) 234 237 (fontified t face font-lock-comment-delimiter-face) 237 271 (fontified t face font-lock-comment-face) 271 274 (fontified t) 274 277 (fontified t face font-lock-comment-delimiter-face) 277 313 (fontified t face font-lock-comment-face) 313 350 (fontified t) 350 353 (fontified t face font-lock-comment-delimiter-face) 353 416 (fontified t face font-lock-comment-face) 416 449 (fontified t) 449 452 (fontified t face font-lock-comment-delimiter-face) 452 474 (fontified t face font-lock-comment-face) 474 478 (fontified t) 478 482 (fontified t face font-lock-keyword-face) 482 510 (fontified t) 510 521 (fontified t face font-lock-string-face) 521 523 (fontified t) 523 525 (fontified t face font-lock-comment-delimiter-face) 525 538 (fontified t face font-lock-comment-face) 538 571 (fontified t face font-lock-comment-face) 571 605 (fontified t) 605 608 (fontified t face font-lock-comment-delimiter-face) 608 642 (fontified t face font-lock-comment-face) 642 643 (fontified t face font-lock-comment-face) 643 664 (fontified t face font-lock-comment-face) 664 665 (face font-lock-comment-face fontified t) 665 693 (fontified t) 693 696 (fontified t face font-lock-comment-delimiter-face) 696 763 (fontified t face font-lock-comment-face) 763 766 (fontified t face font-lock-comment-delimiter-face) 766 830 (fontified t face font-lock-comment-face) 830 833 (fontified t face font-lock-comment-delimiter-face) 833 857 (fontified t face font-lock-comment-face) 857 867 (fontified t face font-lock-comment-face) 867 906 (fontified t face font-lock-comment-face) 906 909 (fontified t face font-lock-comment-delimiter-face) 909 962 (fontified t face font-lock-comment-face) 962 965 (fontified t face font-lock-comment-delimiter-face) 965 1025 (fontified t face font-lock-comment-face) 1025 1026 (fontified t)) . 7565) (undo-tree-id4589 . -1025) (undo-tree-id4590 . -1025) (undo-tree-id4591 . -1025) (undo-tree-id4592 . -1026) (undo-tree-id4593 . -1026) (undo-tree-id4594 . -1026) (undo-tree-id4595 . -1026) (undo-tree-id4596 . -1026) (undo-tree-id4597 . -1025) (undo-tree-id4598 . -1025) (undo-tree-id4599 . -1025) (undo-tree-id4600 . -1025) (undo-tree-id4601 . -1025) (undo-tree-id4602 . -1025) (undo-tree-id4603 . -1025) (undo-tree-id4604 . -1025) (undo-tree-id4605 . -1025) (undo-tree-id4606 . -1025) (undo-tree-id4607 . -962) (undo-tree-id4608 . -962) (undo-tree-id4609 . -962) (undo-tree-id4610 . -962) (undo-tree-id4611 . -962) (undo-tree-id4612 . -906) (undo-tree-id4613 . -906) (undo-tree-id4614 . -906) (undo-tree-id4615 . -906) (undo-tree-id4616 . -906) (undo-tree-id4617 . -830) (undo-tree-id4618 . -830) (undo-tree-id4619 . -830) (undo-tree-id4620 . -830) (undo-tree-id4621 . -830) (undo-tree-id4622 . -763) (undo-tree-id4623 . -763) (undo-tree-id4624 . -763) (undo-tree-id4625 . -763) (undo-tree-id4626 . -763) (undo-tree-id4627 . -693) (undo-tree-id4628 . -693) (undo-tree-id4629 . -693) (undo-tree-id4630 . -693) (undo-tree-id4631 . -693) (undo-tree-id4632 . -665) (undo-tree-id4633 . -665) (undo-tree-id4634 . -665) (undo-tree-id4635 . -665) (undo-tree-id4636 . -665) (undo-tree-id4637 . -603) (undo-tree-id4638 . -603) (undo-tree-id4639 . -603) (undo-tree-id4640 . -603) (undo-tree-id4641 . -603) (undo-tree-id4642 . -571) (undo-tree-id4643 . -571) (undo-tree-id4644 . -571) (undo-tree-id4645 . -571) (undo-tree-id4646 . -571) (undo-tree-id4647 . -475) (undo-tree-id4648 . -475) (undo-tree-id4649 . -475) (undo-tree-id4650 . -475) (undo-tree-id4651 . -475) (undo-tree-id4652 . -474) (undo-tree-id4653 . -474) (undo-tree-id4654 . -474) (undo-tree-id4655 . -474) (undo-tree-id4656 . -474) (undo-tree-id4657 . -447) (undo-tree-id4658 . -447) (undo-tree-id4659 . -447) (undo-tree-id4660 . -447) (undo-tree-id4661 . -447) (undo-tree-id4662 . -416) (undo-tree-id4663 . -416) (undo-tree-id4664 . -416) (undo-tree-id4665 . -416) (undo-tree-id4666 . -416) (undo-tree-id4667 . -348) (undo-tree-id4668 . -348) (undo-tree-id4669 . -348) (undo-tree-id4670 . -348) (undo-tree-id4671 . -348) (undo-tree-id4672 . -313) (undo-tree-id4673 . -313) (undo-tree-id4674 . -313) (undo-tree-id4675 . -313) (undo-tree-id4676 . -313) (undo-tree-id4677 . -272) (undo-tree-id4678 . -272) (undo-tree-id4679 . -272) (undo-tree-id4680 . -272) (undo-tree-id4681 . -272) (undo-tree-id4682 . -271) (undo-tree-id4683 . -271) (undo-tree-id4684 . -271) (undo-tree-id4685 . -271) (undo-tree-id4686 . -271) (undo-tree-id4687 . -234) (undo-tree-id4688 . -234) (undo-tree-id4689 . -234) (undo-tree-id4690 . -234) (undo-tree-id4691 . -234) (undo-tree-id4692 . -155) (undo-tree-id4693 . -155) (undo-tree-id4694 . -155) (undo-tree-id4695 . -155) (undo-tree-id4696 . -155) (undo-tree-id4697 . -79) (undo-tree-id4698 . -79) (undo-tree-id4699 . -79) (undo-tree-id4700 . -79) (undo-tree-id4701 . -79) (undo-tree-id4702 . -47) (undo-tree-id4703 . -47) (undo-tree-id4704 . -47) (undo-tree-id4705 . -47) (undo-tree-id4706 . -47) (undo-tree-id4707 . -37) (undo-tree-id4708 . -37) (undo-tree-id4709 . -37) (undo-tree-id4710 . -37) (undo-tree-id4711 . -37) (undo-tree-id4712 . -25) (undo-tree-id4713 . -25) (undo-tree-id4714 . -25) (undo-tree-id4715 . -25) (undo-tree-id4716 . -25) (undo-tree-id4717 . -1026) (undo-tree-id4718 . -1025) (undo-tree-id4719 . -25) (undo-tree-id4720 . -25) (undo-tree-id4721 . -25) (undo-tree-id4722 . -25) (undo-tree-id4723 . -25) (undo-tree-id4724 . -25) (undo-tree-id4725 . -25) (undo-tree-id4726 . -25) (undo-tree-id4727 . -25) (undo-tree-id4728 . -25) (undo-tree-id4729 . -25) (undo-tree-id4730 . -25) (undo-tree-id4731 . -25) (undo-tree-id4732 . -25) (undo-tree-id4733 . -25) (undo-tree-id4734 . -25) (undo-tree-id4735 . -25) (undo-tree-id4736 . -25) (undo-tree-id4737 . -25) (undo-tree-id4738 . -25) (undo-tree-id4739 . -25) (undo-tree-id4740 . -25) (undo-tree-id4741 . -25) (undo-tree-id4742 . -25) (undo-tree-id4743 . -25) (undo-tree-id4744 . -37) (undo-tree-id4745 . -37) (undo-tree-id4746 . -37) (undo-tree-id4747 . -37) (undo-tree-id4748 . -37) (undo-tree-id4749 . -47) (undo-tree-id4750 . -47) (undo-tree-id4751 . -47) (undo-tree-id4752 . -47) (undo-tree-id4753 . -47) (undo-tree-id4754 . -79) (undo-tree-id4755 . -79) (undo-tree-id4756 . -79) (undo-tree-id4757 . -79) (undo-tree-id4758 . -79) (undo-tree-id4759 . -155) (undo-tree-id4760 . -155) (undo-tree-id4761 . -155) (undo-tree-id4762 . -155) (undo-tree-id4763 . -155) (undo-tree-id4764 . -234) (undo-tree-id4765 . -234) (undo-tree-id4766 . -234) (undo-tree-id4767 . -234) (undo-tree-id4768 . -234) (undo-tree-id4769 . -271) (undo-tree-id4770 . -271) (undo-tree-id4771 . -271) (undo-tree-id4772 . -271) (undo-tree-id4773 . -271) (undo-tree-id4774 . -272) (undo-tree-id4775 . -272) (undo-tree-id4776 . -272) (undo-tree-id4777 . -272) (undo-tree-id4778 . -272) (undo-tree-id4779 . -313) (undo-tree-id4780 . -313) (undo-tree-id4781 . -313) (undo-tree-id4782 . -313) (undo-tree-id4783 . -313) (undo-tree-id4784 . -348) (undo-tree-id4785 . -348) (undo-tree-id4786 . -348) (undo-tree-id4787 . -348) (undo-tree-id4788 . -348) (undo-tree-id4789 . -416) (undo-tree-id4790 . -416) (undo-tree-id4791 . -416) (undo-tree-id4792 . -416) (undo-tree-id4793 . -416) (undo-tree-id4794 . -447) (undo-tree-id4795 . -447) (undo-tree-id4796 . -447) (undo-tree-id4797 . -447) (undo-tree-id4798 . -447) (undo-tree-id4799 . -474) (undo-tree-id4800 . -474) (undo-tree-id4801 . -474) (undo-tree-id4802 . -474) (undo-tree-id4803 . -474) (undo-tree-id4804 . -475) (undo-tree-id4805 . -475) (undo-tree-id4806 . -475) (undo-tree-id4807 . -475) (undo-tree-id4808 . -475) (undo-tree-id4809 . -571) (undo-tree-id4810 . -571) (undo-tree-id4811 . -571) (undo-tree-id4812 . -571) (undo-tree-id4813 . -571) (undo-tree-id4814 . -603) (undo-tree-id4815 . -603) (undo-tree-id4816 . -603) (undo-tree-id4817 . -603) (undo-tree-id4818 . -603) (undo-tree-id4819 . -665) (undo-tree-id4820 . -665) (undo-tree-id4821 . -665) (undo-tree-id4822 . -665) (undo-tree-id4823 . -665) (undo-tree-id4824 . -693) (undo-tree-id4825 . -693) (undo-tree-id4826 . -693) (undo-tree-id4827 . -693) (undo-tree-id4828 . -693) (undo-tree-id4829 . -763) (undo-tree-id4830 . -763) (undo-tree-id4831 . -763) (undo-tree-id4832 . -763) (undo-tree-id4833 . -763) (undo-tree-id4834 . -830) (undo-tree-id4835 . -830) (undo-tree-id4836 . -830) (undo-tree-id4837 . -830) (undo-tree-id4838 . -830) (undo-tree-id4839 . -906) (undo-tree-id4840 . -906) (undo-tree-id4841 . -906) (undo-tree-id4842 . -906) (undo-tree-id4843 . -906) (undo-tree-id4844 . -962) (undo-tree-id4845 . -962) (undo-tree-id4846 . -962) (undo-tree-id4847 . -962) (undo-tree-id4848 . -962) (undo-tree-id4849 . -962) (undo-tree-id4850 . -962) (undo-tree-id4851 . -962) (undo-tree-id4852 . -962) (undo-tree-id4853 . -962) (undo-tree-id4854 . -962) (undo-tree-id4855 . -962) (undo-tree-id4856 . -962) (undo-tree-id4857 . -962) (undo-tree-id4858 . -962) (undo-tree-id4859 . -1025) (undo-tree-id4860 . -1025) (undo-tree-id4861 . -1025) (undo-tree-id4862 . -1025) (undo-tree-id4863 . -1025) (undo-tree-id4864 . -1025) (undo-tree-id4865 . -1025) (undo-tree-id4866 . -1025) (undo-tree-id4867 . -1025) (undo-tree-id4868 . -1025) (undo-tree-id4869 . -1025) (undo-tree-id4870 . -1025) (undo-tree-id4871 . -1025) (undo-tree-id4872 . -1025) (undo-tree-id4873 . -1025) (undo-tree-id4874 . -1025) (undo-tree-id4875 . -1025) (undo-tree-id4876 . -1025) (undo-tree-id4877 . -1025) (undo-tree-id4878 . -1025) (undo-tree-id4879 . -1025) (undo-tree-id4880 . -1025) (undo-tree-id4881 . -1025) (undo-tree-id4882 . -1025) (undo-tree-id4883 . -1025) (undo-tree-id4884 . -1025) (undo-tree-id4885 . -1025) 8590) nil (25306 60651 962519 434000) 0 nil])
([nil nil ((#("(use-package academic-phrases)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 29 (fontified t face font-lock-constant-face) 29 31 (fontified t)) . 6823) (undo-tree-id5398 . 31) (undo-tree-id5399 . -1) (undo-tree-id5400 . 2) (undo-tree-id5401 . -30) (t 25306 60651 986396 594000)) nil (25306 60724 430729 704000) 0 nil])
([nil nil ((#("(use-package fountain-mode)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 26 (fontified t face font-lock-constant-face) 26 27 (fontified t) 27 28 (fontified t)) . 6823) (undo-tree-id5394 . 28) (undo-tree-id5395 . -1) (undo-tree-id5396 . 2) (undo-tree-id5397 . -27)) nil (25306 60724 430727 243000) 0 nil])
([nil nil ((#("(use-package rg)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 15 (fontified t face font-lock-constant-face) 15 16 (fontified t) 16 17 (fontified t)) . 6823) (undo-tree-id5390 . 17) (undo-tree-id5391 . -1) (undo-tree-id5392 . 2) (undo-tree-id5393 . -16)) nil (25306 60724 430724 905000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7318) (undo-tree-id5389 . 1)) nil (25306 60724 430722 18000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7317) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (undo-tree-id5364 . -1) (undo-tree-id5365 . -1) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1)) nil (25306 60724 430720 514000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7316) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (undo-tree-id5153 . -1) (undo-tree-id5154 . -1) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (#(" " 0 1 (fontified t)) . -7317) (undo-tree-id5268 . 1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (#(" " 0 1 (fontified t)) . -7318) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) 7319) nil (25306 60724 430697 717000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7313) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) 7314) nil (25306 60724 430526 828000) 0 nil])
([nil nil ((7316 . 7317) 7313) nil (25306 60724 430284 990000) 0 nil])
([nil nil ((#("(use-package dash-docs
  :config
  (setq dash-docs-docsets-path \"~/.docsets\")
(setq installed-langs (dash-docs-installed-docsets))
;;figure out to convert spaces into underscores when installing the docs
(setq docset-langs '(\"Rust\" \"Emacs_Lisp\" \"JavaScript\" \"C\" \"Bash\" \"Vim\" \"SQLite\" \"PostgreSQL\" \"OpenGL_4\" \"OCaml\" \"LaTeX\" \"Docker\" \"C++\" \"HTML\" \"SVG\" \"CSS\"  \"Haskell\" \"React\" \"D3JS\"))
(dolist (lang docset-langs)
(when (null (member lang installed-langs))
  (dash-docs-install-docset lang))))

" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-constant-face) 22 23 (fontified t) 23 25 (fontified t) 25 28 (fontified t face font-lock-builtin-face) 28 32 (fontified t face font-lock-builtin-face) 32 33 (fontified t) 33 36 (fontified t) 36 40 (fontified t face font-lock-keyword-face) 40 64 (fontified t) 64 76 (fontified t face font-lock-string-face) 76 79 (fontified t) 79 83 (fontified t face font-lock-keyword-face) 83 131 (fontified t) 131 133 (fontified t face font-lock-comment-delimiter-face) 133 204 (fontified t face font-lock-comment-face) 204 205 (fontified t) 205 209 (fontified t face font-lock-keyword-face) 209 225 (fontified t) 225 231 (fontified t face font-lock-string-face) 231 232 (fontified t) 232 244 (fontified t face font-lock-string-face) 244 245 (fontified t) 245 257 (fontified t face font-lock-string-face) 257 258 (fontified t) 258 261 (fontified t face font-lock-string-face) 261 262 (fontified t) 262 268 (fontified t face font-lock-string-face) 268 269 (fontified t) 269 274 (fontified t face font-lock-string-face) 274 275 (fontified t) 275 283 (fontified t face font-lock-string-face) 283 284 (fontified t) 284 296 (fontified t face font-lock-string-face) 296 297 (fontified t) 297 307 (fontified t face font-lock-string-face) 307 308 (fontified t) 308 315 (fontified t face font-lock-string-face) 315 316 (fontified t) 316 323 (fontified t face font-lock-string-face) 323 324 (fontified t) 324 332 (fontified t face font-lock-string-face) 332 333 (fontified t) 333 338 (fontified t face font-lock-string-face) 338 339 (fontified t) 339 345 (fontified t face font-lock-string-face) 345 346 (fontified t) 346 351 (fontified t face font-lock-string-face) 351 352 (fontified t) 352 357 (fontified t face font-lock-string-face) 357 358 (fontified t) 358 359 (fontified t) 359 368 (fontified t face font-lock-string-face) 368 369 (fontified t) 369 371 (fontified t face font-lock-string-face) 371 376 (fontified t face font-lock-string-face) 376 377 (fontified t) 377 383 (fontified t face font-lock-string-face) 383 386 (fontified t) 386 387 (fontified t) 387 393 (fontified t face font-lock-keyword-face) 393 415 (fontified t) 415 419 (fontified t face font-lock-keyword-face) 419 457 (fontified t) 457 490 (fontified t) 490 492 (fontified t) 492 493 (fontified t) 493 494 (fontified t) 494 495 (fontified t)) . 6823) (undo-tree-id5440 . -494) (undo-tree-id5441 . -494) (undo-tree-id5442 . 1) (undo-tree-id5443 . -490) (undo-tree-id5444 . -492) (undo-tree-id5445 . -491) (undo-tree-id5446 . -491) (undo-tree-id5447 . -491) (undo-tree-id5448 . -386) (undo-tree-id5449 . -386) (undo-tree-id5450 . -491) (undo-tree-id5451 . -491) (undo-tree-id5452 . -386) (undo-tree-id5453 . -386) (undo-tree-id5454 . -491) (undo-tree-id5455 . -491) (undo-tree-id5456 . -386) (undo-tree-id5457 . -494) (undo-tree-id5458 . 495) (undo-tree-id5459 . -1) (undo-tree-id5460 . 3) (undo-tree-id5461 . -493) (t 25306 60724 453060 687000)) nil (25306 60858 436503 463000) 0 nil])
([nil nil ((#("
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - \"C-l\", \"C-c l\")
  (setq lsp-keymap-prefix \"C-c l\")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (XXX-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
(use-package consult-lsp)
(use-package eglot)

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 22 (fontified t face font-lock-constant-face) 22 23 (fontified t) 23 25 (fontified t) 25 30 (fontified t face font-lock-builtin-face) 30 33 (fontified t) 33 36 (fontified t face font-lock-comment-delimiter-face) 36 106 (fontified t face font-lock-comment-face) 106 109 (fontified t) 109 113 (fontified t face font-lock-keyword-face) 113 132 (fontified t) 132 139 (fontified t face font-lock-string-face) 139 143 (fontified t) 143 148 (fontified t face font-lock-builtin-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-comment-delimiter-face) 153 214 (fontified t face font-lock-comment-face) 214 249 (fontified t) 249 252 (fontified t face font-lock-comment-delimiter-face) 252 286 (fontified t face font-lock-comment-face) 286 344 (fontified t) 344 353 (fontified t face font-lock-builtin-face) 353 360 (fontified t) 360 363 (fontified t face font-lock-comment-delimiter-face) 363 374 (fontified t face font-lock-comment-face) 374 375 (fontified t) 375 386 (fontified t face font-lock-keyword-face) 386 387 (fontified t) 387 393 (fontified t face font-lock-constant-face) 393 394 (fontified t) 394 403 (fontified t face font-lock-builtin-face) 403 418 (fontified t) 418 429 (fontified t face font-lock-keyword-face) 429 430 (fontified t) 430 441 (fontified t face font-lock-constant-face) 441 444 (fontified t) 444 455 (fontified t face font-lock-keyword-face) 455 456 (fontified t) 456 461 (fontified t face font-lock-constant-face) 461 464 (fontified t)) . 6107) (undo-tree-id5436 . -463) (undo-tree-id5437 . -463) (undo-tree-id5438 . -463) (undo-tree-id5439 . -463) 6570) nil (25306 60858 436476 584000) 0 nil])
([nil nil ((#("(use-package dap-mode)
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 21 (fontified t face font-lock-constant-face) 21 23 (fontified t)) . 6149) (undo-tree-id5432 . 23) (undo-tree-id5433 . -1) (undo-tree-id5434 . 2) (undo-tree-id5435 . -22)) nil (25306 60858 436470 726000) 0 nil])
([nil nil ((#("(use-package rustic)
(setq rustic-lsp-server 'rls)
(setq rustic-analyzer-command '(\"~/.cargo/bin/rust-analyzer\"))
" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 26 (fontified t face font-lock-keyword-face) 26 45 (fontified t) 45 51 (fontified t) 51 52 (fontified t) 52 56 (fontified t face font-lock-keyword-face) 56 83 (fontified t) 83 111 (fontified t face font-lock-string-face) 111 114 (fontified t)) . 6221) (undo-tree-id5428 . 114) (undo-tree-id5429 . -1) (undo-tree-id5430 . 95) (undo-tree-id5431 . -20)) nil (25306 60858 436464 983000) 0 nil])
([nil nil ((#("
(use-package gdscript-mode
    :straight (gdscript-mode
               :type git
               :host github
               :repo \"godotengine/emacs-gdscript-mode\"))


" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 27 (fontified t face font-lock-constant-face) 27 28 (fontified t) 28 32 (fontified t) 32 41 (fontified t face font-lock-builtin-face) 41 72 (fontified t) 72 77 (fontified t face font-lock-builtin-face) 77 97 (fontified t) 97 102 (fontified t face font-lock-builtin-face) 102 105 (fontified t) 105 110 (fontified t) 110 125 (fontified t) 125 127 (fontified t face font-lock-builtin-face) 127 130 (fontified t face font-lock-builtin-face) 130 131 (fontified t) 131 164 (fontified t face font-lock-string-face) 164 167 (fontified t) 167 168 (fontified t) 168 169 (fontified t)) . 6221) (undo-tree-id5414 . 168) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . -1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1)) nil (25306 60858 436458 50000) 0 nil])
([nil current ((#("
(use-package org-super-agenda
  :after org
  :config
  (setq org-super-agenda-header-map nil) ;; takes over 'j'
  (setq org-super-agenda-header-prefix \" ◦ \") ;; There are some unicode \"THIN SPACE\"s after the ◦
  (org-super-agenda-mode))

(use-package org-superstar
  :config
  (setq org-superstar-leading-bullet \" \")
  (setq org-superstar-special-todo-items t) ;; Makes TODO header bullets into boxes
  (setq org-superstar-todo-bullet-alist '((\"TODO\" . 9744)
                                          (\"INPROG-TODO\" . 9744)
                                          (\"HW\" . 9744)
                                          (\"STUDY\" . 9744)
                                          (\"SOMEDAY\" . 9744)
                                          (\"READ\" . 9744)
                                          (\"PROJ\" . 9744)
                                          (\"CONTACT\" . 9744)
                                          (\"DONE\" . 9745)))
  :hook (org-mode . org-superstar-mode))

;; Removes gap when you add a new heading
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))

(use-package org-ql
  :general
  (general-define-key :keymaps 'org-ql-view-map
                      \"q\" 'kill-buffer-and-window)
  )

(defun a3madkour/org-font-setup ()
  ;; (set-face-attribute 'org-document-title nil :height 1.1) ;; Bigger titles, smaller drawers
  (set-face-attribute 'org-checkbox-statistics-done nil :inherit 'org-done :foreground \"green3\") ;; Makes org done checkboxes green
  ;; (set-face-attribute 'org-drawer nil :inherit 'fixed-pitch :inherit 'shadow :height 0.6 :foreground nil) ;; Makes org-drawer way smaller
  ;; (set-face-attribute 'org-ellipsis nil :inherit 'shadow :height 0.8) ;; Makes org-ellipsis shadow (blends in better)
  (set-face-attribute 'org-scheduled-today nil :weight 'normal) ;; Removes bold from org-scheduled-today
  (set-face-attribute 'org-super-agenda-header nil :inherit 'org-agenda-structure :weight 'bold) ;; Bolds org-super-agenda headers
  (set-face-attribute 'org-scheduled-previously nil :background \"red\") ;; Bolds org-super-agenda headers

  ;; Here I set things that need it to be fixed-pitch, just in case the font I am using isn't monospace.
  ;; (dolist (face '(org-list-dt org-tag org-todo org-table org-checkbox org-priority org-date org-verbatim org-special-keyword))
  ;;   (set-face-attribute `,face nil :inherit 'fixed-pitch))

  ;; (dolist (face '(org-code org-verbatim org-meta-line))
  ;;   (set-face-attribute `,face nil :inherit 'shadow :inherit 'fixed-pitch))
  )


(defun a3madkour/org-setup ()
  (org-indent-mode) ;; Keeps org items like text under headings, lists, nicely indented
  (visual-line-mode 1) ;; Nice line wrapping

  (centered-cursor-mode)

  (smartparens-mode 0)

  ;; (setq header-line-format \"\") ;; Empty header line, basically adds a blank line on top

(setq
 org_notes \"~/org/notes\"
 zot_bib  \"~/org/notes/library.bib\"
 deft-directory org_notes
 ;; deft-strip-summary-regexp \":PROPERTIES:\\n\\\\(.+\\n\\\\)+:END:\\n\"
 org-cite-default-bibliography (list zot_bib)
 org-cite-csl-styles-dir \"~/Zotero/styles\"
 org-cite-global-bibliography (list zot_bib)
 ;; deft-use-filename-as-title 't
 ;; deft-recursive 't
 org-roam-directory org_notes

  )
  )


  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '(\"sh\" . \"src sh\"))
  (add-to-list 'org-structure-template-alist '(\"el\" . \"src emacs-lisp\"))
  (add-to-list 'org-structure-template-alist '(\"sc\" . \"src scheme\"))
  (add-to-list 'org-structure-template-alist '(\"ts\" . \"src typescript\"))
  (add-to-list 'org-structure-template-alist '(\"py\" . \"src python\"))
  (add-to-list 'org-structure-template-alist '(\"yaml\" . \"src yaml\"))
  (add-to-list 'org-structure-template-alist '(\"json\" . \"src json\"))

(use-package org-real :defer t)
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 30 (fontified t face font-lock-constant-face) 30 33 (fontified t) 33 39 (fontified t face font-lock-builtin-face) 39 44 (fontified t) 44 46 (fontified t) 46 53 (fontified t face font-lock-builtin-face) 53 54 (fontified t) 54 57 (fontified t) 57 61 (fontified t face font-lock-keyword-face) 61 95 (fontified t) 95 98 (fontified t face font-lock-comment-delimiter-face) 98 110 (fontified t face font-lock-comment-face) 110 111 (fontified t face (font-lock-constant-face font-lock-comment-face)) 111 113 (fontified t face font-lock-comment-face) 113 116 (fontified t) 116 120 (fontified t face font-lock-keyword-face) 120 152 (fontified t) 152 157 (fontified t face font-lock-string-face) 157 159 (fontified t) 159 162 (fontified t face font-lock-comment-delimiter-face) 162 211 (fontified t face font-lock-comment-face) 211 240 (fontified t) 240 251 (fontified t face font-lock-keyword-face) 251 252 (fontified t) 252 265 (fontified t face font-lock-constant-face) 265 268 (fontified t) 268 275 (fontified t face font-lock-builtin-face) 275 279 (fontified t) 279 283 (fontified t face font-lock-keyword-face) 283 313 (fontified t) 313 316 (fontified t face font-lock-string-face) 316 321 (fontified t) 321 325 (fontified t face font-lock-keyword-face) 325 329 (fontified t) 329 362 (fontified t) 362 365 (fontified t face font-lock-comment-delimiter-face) 365 371 (fontified t face font-lock-comment-face) 371 375 (fontified t face ((:inherit hl-todo :foreground "#FF0000") font-lock-comment-face)) 375 402 (fontified t face font-lock-comment-face) 402 405 (fontified t) 405 409 (fontified t face font-lock-keyword-face) 409 445 (fontified t) 445 446 (fontified t face font-lock-string-face) 446 450 (fontified t face ((:inherit hl-todo :foreground "#FF0000") font-lock-string-face)) 450 451 (fontified t face font-lock-string-face) 451 503 (fontified t) 503 511 (fontified t face font-lock-string-face) 511 515 (fontified t face ((:inherit hl-todo :foreground "#FF0000") font-lock-string-face)) 515 516 (fontified t face font-lock-string-face) 516 568 (fontified t) 568 572 (fontified t face font-lock-string-face) 572 624 (fontified t) 624 631 (fontified t face font-lock-string-face) 631 683 (fontified t) 683 692 (fontified t face font-lock-string-face) 692 744 (fontified t) 744 750 (fontified t face font-lock-string-face) 750 802 (fontified t) 802 808 (fontified t face font-lock-string-face) 808 860 (fontified t) 860 869 (fontified t face font-lock-string-face) 869 921 (fontified t) 921 927 (fontified t face font-lock-string-face) 927 940 (fontified t) 940 945 (fontified t face font-lock-builtin-face) 945 958 (fontified t) 958 979 (fontified t) 979 980 (fontified t) 980 983 (fontified t face font-lock-comment-delimiter-face) 983 1022 (fontified t face font-lock-comment-face) 1022 1023 (fontified t) 1023 1027 (fontified t face font-lock-keyword-face) 1027 1032 (fontified t) 1032 1099 (fontified t) 1099 1100 (fontified t) 1100 1101 (fontified t) 1101 1112 (fontified t face font-lock-keyword-face) 1112 1113 (fontified t) 1113 1119 (fontified t face font-lock-constant-face) 1119 1120 (fontified t) 1120 1122 (fontified t) 1122 1130 (fontified t face font-lock-builtin-face) 1130 1153 (fontified t) 1153 1161 (fontified t face font-lock-builtin-face) 1161 1201 (fontified t) 1201 1204 (fontified t face font-lock-string-face) 1204 1234 (fontified t) 1234 1235 (fontified t) 1235 1236 (fontified t) 1236 1241 (fontified t face font-lock-keyword-face) 1241 1242 (fontified t) 1242 1266 (fontified t face font-lock-function-name-face) 1266 1270 (fontified t) 1270 1272 (fontified t) 1272 1275 (fontified t face font-lock-comment-delimiter-face) 1275 1366 (fontified t face font-lock-comment-face) 1366 1422 (fontified t) 1422 1430 (fontified t face font-lock-builtin-face) 1430 1441 (fontified t) 1441 1452 (fontified t face font-lock-builtin-face) 1452 1453 (fontified t) 1453 1461 (fontified t face font-lock-string-face) 1461 1463 (fontified t) 1463 1466 (fontified t face font-lock-comment-delimiter-face) 1466 1498 (fontified t face font-lock-comment-face) 1498 1499 (fontified t) 1499 1500 (fontified t) 1500 1503 (fontified t face font-lock-comment-delimiter-face) 1503 1619 (fontified t face font-lock-comment-face) 1619 1639 (fontified t face font-lock-comment-face) 1639 1641 (fontified t) 1641 1644 (fontified t face font-lock-comment-delimiter-face) 1644 1760 (fontified t face font-lock-comment-face) 1760 1807 (fontified t) 1807 1814 (fontified t face font-lock-builtin-face) 1814 1824 (fontified t) 1824 1827 (fontified t face font-lock-comment-delimiter-face) 1827 1865 (fontified t face font-lock-comment-face) 1865 1916 (fontified t) 1916 1924 (fontified t face font-lock-builtin-face) 1924 1947 (fontified t) 1947 1954 (fontified t face font-lock-builtin-face) 1954 1962 (fontified t) 1962 1965 (fontified t face font-lock-comment-delimiter-face) 1965 1996 (fontified t face font-lock-comment-face) 1996 2034 (fontified t) 2034 2048 (fontified t) 2048 2059 (fontified t face font-lock-builtin-face) 2059 2060 (fontified t) 2060 2065 (fontified t face font-lock-string-face) 2065 2067 (fontified t) 2067 2070 (fontified t face font-lock-comment-delimiter-face) 2070 2101 (fontified t face font-lock-comment-face) 2101 2104 (fontified t) 2104 2107 (fontified t face font-lock-comment-delimiter-face) 2107 2207 (fontified t face font-lock-comment-face) 2207 2209 (fontified t) 2209 2212 (fontified t face font-lock-comment-delimiter-face) 2212 2337 (fontified t face font-lock-comment-face) 2337 2339 (fontified t) 2339 2344 (fontified t face font-lock-comment-delimiter-face) 2344 2399 (fontified t face font-lock-comment-face) 2399 2402 (fontified t) 2402 2405 (fontified t face font-lock-comment-delimiter-face) 2405 2459 (fontified t face font-lock-comment-face) 2459 2461 (fontified t) 2461 2466 (fontified t face font-lock-comment-delimiter-face) 2466 2538 (fontified t face font-lock-comment-face) 2538 2545 (fontified t) 2545 2550 (fontified t face font-lock-keyword-face) 2550 2551 (fontified t) 2551 2570 (fontified t face font-lock-function-name-face) 2570 2594 (fontified t) 2594 2597 (fontified t face font-lock-comment-delimiter-face) 2597 2662 (fontified t face font-lock-comment-face) 2662 2685 (fontified t) 2685 2688 (fontified t face font-lock-comment-delimiter-face) 2688 2707 (fontified t face font-lock-comment-face) 2707 2733 (fontified t) 2733 2734 (fontified t) 2734 2735 (fontified t) 2735 2757 (fontified t) 2757 2760 (fontified t) 2760 2763 (fontified t face font-lock-comment-delimiter-face) 2763 2849 (fontified t face font-lock-comment-face) 2849 2851 (fontified t) 2851 2855 (fontified t face font-lock-keyword-face) 2855 2867 (fontified t) 2867 2880 (fontified t face font-lock-string-face) 2880 2891 (fontified t) 2891 2916 (fontified t face font-lock-string-face) 2916 2944 (fontified t) 2944 2947 (fontified t face font-lock-comment-delimiter-face) 2947 3008 (fontified t face font-lock-comment-face) 3008 3079 (fontified t) 3079 3096 (fontified t face font-lock-string-face) 3096 3139 (fontified t) 3139 3142 (fontified t) 3142 3143 (fontified t) 3143 3146 (fontified t face font-lock-comment-delimiter-face) 3146 3176 (fontified t face font-lock-comment-face) 3176 3177 (fontified t) 3177 3180 (fontified t face font-lock-comment-delimiter-face) 3180 3198 (fontified t face font-lock-comment-face) 3198 3239 (fontified t) 3239 3242 (fontified t) 3242 3249 (fontified t face font-lock-keyword-face) 3249 3251 (fontified t) 3251 3260 (fontified t face font-lock-constant-face) 3260 3261 (fontified t) 3261 3262 (fontified t) 3262 3264 (fontified t) 3264 3306 (fontified t) 3306 3307 (fontified t) 3307 3309 (fontified t) 3309 3313 (fontified t face font-lock-string-face) 3313 3316 (fontified t) 3316 3324 (fontified t face font-lock-string-face) 3324 3326 (fontified t) 3326 3327 (fontified t) 3327 3329 (fontified t) 3329 3371 (fontified t) 3371 3372 (fontified t) 3372 3374 (fontified t) 3374 3378 (fontified t face font-lock-string-face) 3378 3381 (fontified t) 3381 3385 (fontified t face font-lock-string-face) 3385 3386 (fontified t face font-lock-string-face) 3386 3397 (fontified t face font-lock-string-face) 3397 3399 (fontified t) 3399 3400 (fontified t) 3400 3402 (fontified t) 3402 3409 (fontified t) 3409 3414 (fontified t) 3414 3415 (fontified t) 3415 3447 (fontified t) 3447 3451 (fontified t face font-lock-string-face) 3451 3452 (fontified t) 3452 3454 (fontified t) 3454 3466 (fontified t face font-lock-string-face) 3466 3468 (fontified t) 3468 3469 (fontified t) 3469 3471 (fontified t) 3471 3474 (fontified t) 3474 3483 (fontified t) 3483 3484 (fontified t) 3484 3516 (fontified t) 3516 3520 (fontified t face font-lock-string-face) 3520 3521 (fontified t) 3521 3523 (fontified t) 3523 3527 (fontified t face font-lock-string-face) 3527 3528 (fontified t face font-lock-string-face) 3528 3539 (fontified t face font-lock-string-face) 3539 3541 (fontified t) 3541 3542 (fontified t) 3542 3544 (fontified t) 3544 3586 (fontified t) 3586 3587 (fontified t) 3587 3589 (fontified t) 3589 3593 (fontified t face font-lock-string-face) 3593 3594 (fontified t) 3594 3596 (fontified t) 3596 3608 (fontified t face font-lock-string-face) 3608 3610 (fontified t) 3610 3611 (fontified t) 3611 3613 (fontified t) 3613 3655 (fontified t) 3655 3656 (fontified t) 3656 3658 (fontified t) 3658 3664 (fontified t face font-lock-string-face) 3664 3665 (fontified t) 3665 3667 (fontified t) 3667 3677 (fontified t face font-lock-string-face) 3677 3679 (fontified t) 3679 3680 (fontified t) 3680 3682 (fontified t) 3682 3724 (fontified t) 3724 3725 (fontified t) 3725 3727 (fontified t) 3727 3733 (fontified t face font-lock-string-face) 3733 3734 (fontified t) 3734 3736 (fontified t) 3736 3746 (fontified t face font-lock-string-face) 3746 3749 (fontified t) 3749 3750 (fontified t) 3750 3751 (fontified t) 3751 3762 (fontified t face font-lock-keyword-face) 3762 3763 (fontified t) 3763 3771 (fontified t face font-lock-constant-face) 3771 3772 (fontified t) 3772 3778 (fontified t face font-lock-builtin-face) 3778 3781 (fontified t) 3781 3782 (fontified t)) . 1662) (undo-tree-id5402 . -3781) (undo-tree-id5403 . -3781) (undo-tree-id5404 . -1100) (undo-tree-id5405 . -1100) (undo-tree-id5406 . -979) (undo-tree-id5407 . -979) (undo-tree-id5408 . -3749) (undo-tree-id5409 . -3749) (undo-tree-id5410 . -581) (undo-tree-id5411 . -3781) (undo-tree-id5412 . -1270) (undo-tree-id5413 . -3781) 5443) nil (25306 60858 436435 79000) 0 nil])
nil
