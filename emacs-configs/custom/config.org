#+TITLE: My Emacs Configuration
:PROPERTIES:
#+author: Abdelrahman Madkour
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args :tangle no :results silent
:END:
* TODO Go through the config and cite all the sources of information
* Early Init
#+begin_src emacs-lisp :tangle "./early-init.el"
  (setq gc-cons-percentage 0.6)
  (setq native-comp-async-report-warnings-errors 'silent) ;; native-comp warning (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  (setq idle-update-delay 1.0)
  ;; Disabling bidi (bidirectional editing stuff)
  (setq-default bidi-display-reordering 'left-to-right
		bidi-paragraph-direction 'left-to-right)
  ;; (setq bidi-inhibit-bpa t)  ; emacs 27 only - disables bidirectional parenthesis
  ;;
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)
  (setq fast-but-imprecise-scrolling t)
  (setq inhibit-compacting-font-caches t)

  ;; Window configuration
  (setq frame-inhibit-implied-resize t) ;; Supposed to hasten startup
#+end_src

* Straight
#+name: config.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
* GCMH
#+begin_src emacs-lisp
  (use-package gcmh
    :diminish gcmh-mode
    :config
    (setq gcmh-idle-delay 5
	  gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
    (gcmh-mode 1))

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-percentage 0.1))) ;; Default value for `gc-cons-percentage'

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

* General configuration
#+begin_src emacs-lisp
  ;; When emacs asks for "yes" or "no", let "y" or "n" suffice
  ;;stop bothering me about reload things from disk and just do it
  (setq revert-without-query '("pdf"))
  (setq use-short-answers t)
  (setq ns-pop-up-frames nil)
  (setq
   org-roam-notes "~/org/notes/roam-notes"
   org-ref-notes "~/org/notes/ref-notes"
   org-roam-dir "~/org/notes"
   zot-bib  "~/org/notes/ref-notes/library.bib"
   org-cite-default-bibliography (list zot-bib)
   org-cite-csl-styles-dir "~/Zotero/styles"
   org-cite-global-bibliography (list zot-bib)
   org-roam-dailies-directory "~/org/fleeting-notes"
   org-roam-directory org-roam-dir
   )

  ;;dailies template
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
       	   "* %?"
       	   :target (file+head "%<%Y-%m-%d>.org"
       			      "#+title: %<%Y-%m-%d>\n"))))
  ;; Confirm to quit
  (setq confirm-kill-emacs 'yes-or-no-p)

  (add-hook 'text-mode-hook 'visual-line-mode)
  ;; Major mode of new buffers
  (setq initial-major-mode 'org-mode)

  ;;set default font size
  (set-face-attribute 'default nil :height 150)
  ;; WINDOW -----------

  ;; Don't resize the frames in steps; it looks weird, especially in tiling window
  ;; managers, where it can leave unseemly gaps.
  (setq frame-resize-pixelwise t)

  ;; When opening a file (like double click) on Mac, use an existing frame
  (setq ns-pop-up-frames nil)

  (setq isearch-wrap-pause nil)

  ;;supposed to not ask me about git
  (setq vc-follow-symlinks nil)

  ;;make agenda current window
  (setq org-agenda-window-setup 'current-window)
  ;; But do not resize windows pixelwise, this can cause crashes in some cases
  ;; where we resize windows too quickly.
  (setq window-resize-pixelwise nil)

  ;; LINES -----------
  (setq-default truncate-lines t)

  (setq-default tab-width 4)

  (scroll-bar-mode -1)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (line-number-mode)
  (column-number-mode)
  (display-time-mode -1)
  (size-indication-mode 1)
  (frame-parameter nil 'left)

  ;;flymake stuff
  (add-hook 'prog-mode-hook 'flymake-mode)

  ;;flyspell stuff
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  (defmacro η (fnc)
    "Return function that ignores its arguments and invokes FNC."
    `(lambda (&rest _rest)
       (funcall ,fnc)))
  (advice-add 'org-deadline       :after (η #'org-save-all-org-buffers))
  (advice-add 'org-schedule       :after (η #'org-save-all-org-buffers))
  (advice-add 'org-store-log-note :after (η #'org-save-all-org-buffers))
  (advice-add 'org-todo           :after (η #'org-save-all-org-buffers))

  ;;for the love of god stop the ~s it is so trashy
  (setq backup-directory-alist `(("." . "~/.saves")))
  ;;get rid of startup screen
  (setq inhibit-startup-screen t)
#+end_src
* Evil
#+begin_src emacs-lisp
  (use-package evil
  	:init
  	;; (setq evil-want-keybinding t)
  	;; (setq evil-want-fine-undo t)
  	;; (setq evil-want-keybinding nil)
  	;; (setq evil-want-Y-yank-to-eol t)
  	(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  	(setq evil-want-keybinding nil)
  
  	:config

  	(evil-set-initial-state 'dashboard-mode 'motion)
  	(evil-set-initial-state 'debugger-mode 'motion)
  	(evil-set-initial-state 'pdf-view-mode 'motion)
  	(evil-set-initial-state 'inferior-python-mode 'emacs)
  	(evil-set-initial-state 'term-mode 'emacs)

  	;; ----- Keybindings
  	;; I tried using evil-define-key for these. Didn't work.
  	;; (define-key evil-motion-state-map "/" 'swiper)
  	(define-key evil-window-map "\C-q" 'evil-delete-buffer) ;; Maps C-w C-q to evil-delete-buffer (The first C-w puts you into evil-window-map)
  	(define-key evil-window-map "\C-w" 'kill-this-buffer)
  	(define-key evil-motion-state-map "\C-u" 'evil-scroll-up) 

  	(evil-mode 1))


  (use-package evil-goggles
  	:ensure t
  	:config
  	(evil-goggles-mode)
  	)
  ;;other evil packages
  (use-package evil-nerd-commenter
  	:after evil
  	)
  (use-package evil-surround
  	:after evil
  	:defer 2
  	:config
  	(global-evil-surround-mode 1))

  (use-package evil-collection
  	:after evil
  	:ensure t
  	:config
  	(evil-collection-init))

  (use-package evil-easymotion
  	:config
  	(setq avy-background t))

  (use-package evil-args)
  (use-package evil-visualstar)
  (use-package evil-quick-diff
  	:straight (evil-quick-diff
  			   :type git
  			   :host github
  			   :repo "rgrinberg/evil-quick-diff"
  			   )
  	:init
  	(setq evil-quick-diff-key (kbd "zx"))
  	(evil-quick-diff-install))
  (use-package exato :ensure t)
  (use-package evil-vimish-fold)
  (use-package evil-escape)
  (use-package evil-numbers)
  (use-package evil-exchange)
  (use-package evil-lion
  	:ensure t
  	:config
  	(evil-lion-mode))
  (use-package evil-indent-plus)
  (use-package evil-embrace)
  (use-package evil-snipe
  	:diminish evil-snipe-mode
  	:diminish evil-snipe-local-mode
  	:after evil
  	:config
  	(evil-snipe-mode +1))
  (use-package evil-org
  	:diminish evil-org-mode
  	:after org
  	:config
  	(add-hook 'org-mode-hook 'evil-org-mode)
  	(add-hook 'evil-org-mode-hook
  			  (lambda () (evil-org-set-key-theme))))

  (require 'evil-org-agenda)
  (setq org-modules '(org-habit))
  (setq org-habit-graph-column 110)
  (evil-org-agenda-set-keys)
  (eval-after-load 'org
  	'(org-load-modules-maybe t))
  (use-package evil-anzu :defer t)
#+end_src
** Unimpared
Adapted from doom-emacs unimpared.el
#+begin_src emacs-lisp
  ;;; editor/evil/autoload/unimpaired.el -*- lexical-binding: t; -*-

  ;; These are ported from vim-unimpaired https://github.com/tpope/vim-unimpaired
  ;; and bound in the :config default module (in +evil-bindings.el).

  ;;
  ;;; Next/Previous commands

  ;;;###autoload
  (defun +evil/next-beginning-of-method (count)
	"Jump to the beginning of the COUNT-th method/function after point."
	(interactive "p")
	(beginning-of-defun (- count)))

  ;;;###autoload
  (defun +evil/previous-beginning-of-method (count)
	"Jump to the beginning of the COUNT-th method/function before point."
	(interactive "p")
	(beginning-of-defun count))

  ;;;###autoload
  (defalias #'+evil/next-end-of-method #'end-of-defun
	"Jump to the end of the COUNT-th method/function after point.")

  ;;;###autoload
  (defun +evil/previous-end-of-method (count)
	"Jump to the end of the COUNT-th method/function before point."
	(interactive "p")
	(end-of-defun (- count)))

  ;;;###autoload
  (defun +evil/next-comment (count)
	"Jump to the beginning of the COUNT-th commented region after point."
	(interactive "p")
	(let ((orig-pt (point)))
	  (require 'newcomment)
	  (dotimes (_ (abs count))
		(cond ((> count 0)
			   (while (and (not (eobp)) (sp-point-in-comment))
				 (forward-line 1))
			   (unless (comment-search-forward (point-max) 'noerror)
				 (goto-char orig-pt)
				 (user-error "No comment after point")))
			  (t
			   (while (and (not (bobp)) (sp-point-in-comment))
				 (forward-line -1))
			   (unless (comment-search-backward nil 'noerror)
				 (goto-char orig-pt)
				 (user-error "No comment before point")))))))

  ;;;###autoload
  (defun +evil/previous-comment (count)
	"Jump to the beginning of the COUNT-th commented region before point."
	(interactive "p")
	(+evil/next-comment (- count)))

  ;;; ] SPC / [ SPC
  ;;;###autoload
  (defun +evil/insert-newline-below (count)
	"Insert COUNT blank line(s) below current line. Does not change modes."
	(interactive "p")
	(dotimes (_ count)
	  (save-excursion (evil-insert-newline-below))))

  ;;;###autoload
  (defun +evil/insert-newline-above (count)
	"Insert COUNT blank line(s) above current line. Does not change modes."
	(interactive "p")
	(dotimes (_ count)
	  (save-excursion (evil-insert-newline-above))))

  ;;; ]t / [t
  ;;;###autoload
  (defun +evil/next-frame (count)
	"Focus next frame."
	(interactive "p")
	(dotimes (_ (abs count))
	  (let ((frame (if (> count 0) (next-frame) (previous-frame))))
		(if (eq frame (selected-frame))
			(user-error "No other frame")
		  (select-frame-set-input-focus frame)))))

  ;;;###autoload
  (defun +evil/previous-frame (count)
	"Focus previous frame."
	(interactive "p")
	(+evil/next-frame (- count)))

  ;;; ]f / [f
  (defun +evil--next-file (n)
	(unless buffer-file-name
	  (user-error "Must be called from a file-visiting buffer"))
	(let* ((directory (file-name-directory buffer-file-name))
		   (filename (file-name-nondirectory buffer-file-name))
		   (files (cl-remove-if #'file-directory-p (doom-glob (file-name-directory buffer-file-name) "[!.]*")))
		   (index (cl-position filename files :test #'file-equal-p)))
	  (when (null index)
		(user-error "Couldn't find this file in current directory"))
	  (let ((index (+ index n)))
		(cond ((>= index (length files))
			   (user-error "No files after this one"))
			  ((< index 0)
			   (user-error "No files before this one"))
			  ((expand-file-name (nth index files) directory))))))

  ;;;###autoload
  (defun +evil/next-file (count)
	"Open file following this one, alphabetically, in the same directory."
	(interactive "p")
	(find-file (+evil--next-file count)))

  ;;;###autoload
  (defun +evil/previous-file (count)
	"Open file preceding this one, alphabetically, in the same directory."
	(interactive "p")
	(find-file (+evil--next-file (- count))))


  ;;
  ;;; Encoding/Decoding

  ;; NOTE For ]x / [x see :lang web
  ;; - `+web:encode-html-entities'
  ;; - `+web:decode-html-entities'

  (defun +evil--encode (beg end fn)
	(save-excursion
	  (goto-char beg)
	  (let* ((end (if (eq evil-this-type 'line) (1- end) end))
			 (text (buffer-substring-no-properties beg end)))
		(delete-region beg end)
		(insert (funcall fn text)))))

  ;;; ]u / [u
  ;;;###autoload (autoload '+evil:url-encode "editor/evil/autoload/unimpaired" nil t)
  (evil-define-operator +evil:url-encode (_count &optional beg end)
	"TODO"
	(interactive "<c><r>")
	(+evil--encode beg end #'url-encode-url))

  ;;;###autoload (autoload '+evil:url-decode "editor/evil/autoload/unimpaired" nil t)
  (evil-define-operator +evil:url-decode (_count &optional beg end)
	"TODO"
	(interactive "<c><r>")
	(+evil--encode beg end #'url-unhex-string))

  ;;; ]y / [y
  ;;;###autoload (autoload '+evil:c-string-encode "editor/evil/autoload/unimpaired" nil t)
  (evil-define-operator +evil:c-string-encode (_count &optional beg end)
	"TODO"
	(interactive "<c><r>")
	(+evil--encode
	 beg end
	 (lambda (text)
	   (replace-regexp-in-string "[\"\\]" (lambda (ch) (concat "\\" ch)) text))))

  ;;;###autoload (autoload '+evil:c-string-decode "editor/evil/autoload/unimpaired" nil t)
  (evil-define-operator +evil:c-string-decode (_count &optional beg end)
	"TODO"
	(interactive "<c><r>")
	(+evil--encode
	 beg end
	 (lambda (text)
	   (replace-regexp-in-string "\\\\[\"\\]" (lambda (str) (substring str 1)) text))))


  ;;
  ;;; Standalone

  ;;; gp
  ;;;###autoload
  (defun +evil/reselect-paste ()
	"Return to visual mode and reselect the last pasted region."
	(interactive)
	(cl-destructuring-bind (_ _ _ beg end &optional _)
		evil-last-paste
	  (evil-visual-make-selection
	   (save-excursion (goto-char beg) (point-marker))
	   end)))
#+end_src
** Textobjects
Adapted from doom emacs textobjects.el
#+begin_src emacs-lisp
  ;;;###autoload (autoload '+evil:whole-buffer-txtobj "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:whole-buffer-txtobj (count &optional _beg _end type)
	"Text object to select the whole buffer."
	(evil-range (point-min) (point-max) type))

  ;;;###autoload (autoload '+evil:defun-txtobj "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:defun-txtobj (count &optional _beg _end type)
	"Text object to select the top-level Lisp form or function definition at
  point."
	(cl-destructuring-bind (beg . end)
		(bounds-of-thing-at-point 'defun)
	  (evil-range beg end type)))

  ;;;###autoload (autoload '+evil:inner-url-txtobj "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:inner-url-txtobj (count &optional _beg _end type)
	"Text object to select the inner url at point.
  This excludes the protocol and querystring."
	(cl-destructuring-bind (beg . end)
		(bounds-of-thing-at-point 'url)
	  (evil-range
	   (save-excursion
		 (goto-char beg)
		 (re-search-forward "://" end t))
	   (save-excursion
		 (goto-char end)
		 (- (if-let (pos (re-search-backward "[?#]" beg t))
				pos
			  end)
			(if (evil-visual-state-p)
				1
			  0)))
	   type)))

  ;;;###autoload (autoload '+evil:outer-url-txtobj "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:outer-url-txtobj (count &optional _beg _end type)
	"Text object to select the whole url at point."
	(cl-destructuring-bind (beg . end)
		(bounds-of-thing-at-point 'url)
	  (evil-range
	   beg (- end (if (evil-visual-state-p) 1 0))
	   type)))

  ;;;###autoload (autoload '+evil:inner-any-quote "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:inner-any-quote (count &optional beg end type)
	"Select the closest inner quote."
	(require 'evil-textobj-anyblock)
	(let ((evil-textobj-anyblock-blocks
		   '(("'" . "'")
			 ("\"" . "\"")
			 ("`" . "`")
			 ("‘" . "’")
			 ("“" . "”"))))
	  (evil-textobj-anyblock--make-textobj beg end type count nil)))

  ;;;###autoload (autoload '+evil:outer-any-quote "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:outer-any-quote (count &optional beg end type)
	"Select the closest outer quote."
	(require 'evil-textobj-anyblock)
	(let ((evil-textobj-anyblock-blocks
		   '(("'" . "'")
			 ("\"" . "\"")
			 ("`" . "`")
			 ("‘" . "’")
			 ("“" . "”"))))
	  (evil-textobj-anyblock--make-textobj beg end type count t)))
#+end_src
** Evil-replace-with-register
#+begin_src emacs-lisp
  (use-package evil-replace-with-register
  :config
  (require 'evil-replace-with-register)
  (evil-replace-with-register-install)
  )
#+end_src
* General 
#+begin_src emacs-lisp
  (use-package general
  	:ensure t
  	:init
  	;; Create variables for leader keys for different states & uses
  	(defvar general-leader "SPC"
  	"Leader key for Evil")
  	(defvar general-leader-alt "C-SPC"
  	"Leader key for Emacs and Evil Insert states")
  	(defvar general-localleader ","
  	"Local leader key for major-mode specific commands")
  	(defvar general-localleader-alt "C-SPC ,"
  	"Local leader key for major-mode specific commands for Emacs and Evil Insert states.") 
  )

#+end_src

* Vterm
#+begin_src emacs-lisp
  (use-package vterm
	:ensure t
	:config
	(push '("find-file-other-window" find-file-other-window) vterm-eval-cmds))
  (add-hook 'vterm-mode-hook (lambda()
							   (goto-address-mode 1)))
#+end_src
* Undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree)
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree)
  (add-to-list 'undo-tree-history-directory-alist '("." . "~/.undo-tree"))
#+end_src
* Recent
#+begin_src emacs-lisp
  (use-package recentf
	:ensure nil
	:config
	(setq ;;recentf-auto-cleanup 'never
	 ;; recentf-max-menu-items 0
	 recentf-max-saved-items 200)
	;; Show home folder path as a ~
	(setq recentf-filename-handlers  
		  (append '(abbreviate-file-name) recentf-filename-handlers))
	(recentf-mode))
#+end_src
* Uniquify
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src
* Which key
#+begin_src emacs-lisp
  (use-package which-key
	:diminish which-key-mode
	:init
	(which-key-mode)
	(which-key-setup-minibuffer)
	:config
	(setq which-key-idle-delay 0.3)
	(setq which-key-prefix-prefix "◉ ")
	(setq which-key-sort-order 'which-key-key-order-alpha
		  which-key-min-display-lines 6
		  which-key-max-display-columns nil))
#+end_src
* All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons
	:if (display-graphic-p))
#+end_src
* Hydra
#+begin_src emacs-lisp
  (use-package hydra
	:defer t)
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
	:diminish company-mode
	:general
	(general-define-key :keymaps 'company-active-map
						"C-j" 'company-select-next
						"C-k" 'company-select-previous)
	:init
	;; These configurations come from Doom Emacs:
	(add-hook 'after-init-hook 'global-company-mode)
	(setq company-minimum-prefix-length 2
		  company-tooltip-limit 14
		  company-tooltip-align-annotations t
		  company-require-match 'never
		  company-global-modes '(not erc-mode message-mode help-mode gud-mode)
		  company-frontends
		  '(company-pseudo-tooltip-frontend  ; always show candidates in overlay tooltip
			company-echo-metadata-frontend)  ; show selected candidate docs in echo area
		  company-auto-complete nil
		  company-auto-complete-chars nil
		  company-dabbrev-other-buffers nil
		  company-dabbrev-ignore-case nil
		  company-dabbrev-downcase nil)

	:config
	(setq company-idle-delay 0.35)
	(add-to-list 'company-backends 'company-math-symbols-unicode)
	:custom-face
	(company-tooltip ((t (:family "Roboto Mono")))))
#+end_src
* Dired stuff
** diredfl
front lock rules for colorful dired
#+begin_src emacs-lisp
  (use-package diredfl
    :hook (dired-mode . diredfl-mode)
    )
#+end_src
** dired-git-info
Simple package for showing git info
#+begin_src emacs-lisp
  (use-package dired-git-info
    :config
    (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable)
    )
#+end_src
** Dired rsync
#+begin_src emacs-lisp
(use-package dired-rsync
  :bind (:map dired-mode-map
              ("C-c C-r" . dired-rsync)))
#+end_src

#+begin_src emacs-lisp
(use-package dired-rsync-transient
  :bind (:map dired-mode-map
              ("C-c C-x" . dired-rsync-transient)))
#+end_src
** Nerd icons dired
Nerd icons for dired
#+begin_src emacs-lisp
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src
** Fd for dired
Fd support for dired
#+begin_src emacs-lisp
  (use-package fd-dired
    :config
    (global-set-key [remap find-dired] #'fd-dired)
    )
#+end_src
** Ranger
#+begin_src emacs-lisp
  (use-package ranger
    :config
    (ranger-override-dired-mode t)
    )
#+end_src
* Super-save
#+begin_src emacs-lisp
  (use-package super-save
	:diminish super-save-mode
	:defer 2
	:config
	(setq super-save-auto-save-when-idle t
		  super-save-idle-duration 5 ;; after 5 seconds of not typing autosave
		  super-save-triggers ;; Functions after which buffers are saved (switching window, for example)
		  '(evil-window-next evil-window-prev balance-windows other-window)
		  super-save-max-buffer-size 10000000)
	(super-save-mode +1))
#+end_src
* Saveplace
#+begin_src emacs-lisp
  (use-package saveplace
	:init (setq save-place-limit 100)
	:config (save-place-mode))
#+end_src
* Yasnippet
** Doom emacs file templates
#+begin_src emacs-lisp
  ;;; editor/file-templates/autoload.el -*- lexical-binding: t; -*-
  (defun +file-templates--set (pred plist)
	(if (null (car-safe plist))
		(setq +file-templates-alist
			  (delq (assoc pred +file-templates-alist)
					+file-templates-alist))
	  (push `(,pred ,@plist) +file-templates-alist)))

  ;;;###autodef
  (defun set-file-template (pred &rest plist)
	"Register a file template.

  PRED can either be a regexp string or a major mode symbol. PLIST may contain
  these properties:

	:when FUNCTION
	  Provides a secondary predicate. This function takes no arguments and is
	  executed from within the target buffer. If it returns nil, this rule will be
	  skipped over.
	:trigger STRING|FUNCTION
	  If a string, this is the yasnippet trigger keyword used to trigger the
		target snippet.
	  If a function, this function will be run in the context of the buffer to
		insert a file template into. It is given no arguments and must insert text
		into the current buffer manually.
	  If omitted, `+file-templates-default-trigger' is used.
	:mode SYMBOL
	  What mode to get the yasnippet snippet from. If omitted, either PRED (if
	  it's a major-mode symbol) or the mode of the buffer is used.
	:project BOOL
	  If non-nil, ignore this template if this buffer isn't in a project.
	:ignore BOOL
	  If non-nil, don't expand any template for this file and don't test any other
	  file template rule against this buffer.

  \(fn PRED &key WHEN TRIGGER MODE PROJECT IGNORE)"
	(declare (indent defun))
	(defer-until! (boundp '+file-templates-alist)
	  (+file-templates--set pred plist)))

  ;;;###autodef
  (defun set-file-templates (&rest templates)
	"Like `set-file-template!', but can register multiple file templates at once.

  \(fn &rest (PRED &key WHEN TRIGGER MODE PROJECT IGNORE))"
	(defer-until! (boundp '+file-templates-alist)
	  (dolist (template templates)
		(+file-templates--set (car template) (cdr template)))))


  ;;
  ;;; Library

  ;;;###autoload
  (cl-defun +file-templates--expand (pred &key project mode trigger ignore _when)
	"Auto insert a yasnippet snippet into current file and enter insert mode (if
  evil is loaded and enabled)."
	(when (and pred (not ignore))
	  (when (if project (doom-project-p) t)
		(unless mode
		  (setq mode
				(if (and (symbolp pred) (not (booleanp pred)))
					pred
				  major-mode)))
		(unless mode
		  (user-error "Couldn't determine mode for %s file template" pred))
		(unless trigger
		  (setq trigger +file-templates-default-trigger))
		(if (functionp trigger)
			(funcall trigger)
		  (require 'yasnippet)
		  (unless yas-minor-mode
			(yas-minor-mode-on))
		  (when (and yas-minor-mode
					 (when-let
						 (template (cl-find trigger (yas--all-templates (yas--get-snippet-tables mode))
											:key #'yas--template-key :test #'equal))
					   (yas-expand-snippet (yas--template-content template)))
					 (and (featurep 'evil) evil-local-mode)
					 (and yas--active-field-overlay
						  (overlay-buffer yas--active-field-overlay)
						  (overlay-get yas--active-field-overlay 'yas--field)))
			(evil-initialize-state 'insert))))))

  ;;;###autoload
  (defun +file-templates-get-short-path ()
	"Fetches a short file path for the header in Doom module templates."
	(let ((path (file-truename (or buffer-file-name default-directory))))
	  (save-match-data
		(cond ((string-match "/modules/\\(.+\\)$" path)
			   (match-string 1 path))
			  ((file-in-directory-p path doom-emacs-dir)
			   (file-relative-name path doom-emacs-dir))
			  ((file-in-directory-p path doom-user-dir)
			   (file-relative-name path doom-user-dir))
			  ((abbreviate-file-name path))))))

  ;;;###autoload
  (defun +file-templates-module-for-path (&optional path)
	"Generate a title for a doom module's readme at PATH."
	(let ((m (doom-module-from-path (or path (buffer-file-name)))))
	  (if (eq (cdr m) 'README.org)
		  (symbol-name (car m))
		(format "%s %s" (car m) (cdr m)))))


  ;;
  ;;; Commands

  ;;;###autoload
  (defun +file-templates/insert-license ()
	"Insert a license file template into the current file."
	(interactive)
	(require 'yasnippet)
	(unless (gethash 'text-mode yas--tables)
	  (yas-reload-all t))
	(let ((templates
		   (let (yas-choose-tables-first ; avoid prompts
				 yas-choose-keys-first)
			 (cl-loop for tpl in (yas--all-templates (yas--get-snippet-tables 'text-mode))
					  for uuid = (yas--template-uuid tpl)
					  if (string-prefix-p "__license-" uuid)
					  collect (cons (string-remove-prefix "__license-" uuid) tpl)))))
	  (when-let (uuid (yas-choose-value (mapcar #'car templates)))
		(yas-expand-snippet (cdr (assoc uuid templates))))))

  ;;;###autoload
  (defun +file-templates/debug ()
	"Tests the current buffer and outputs the file template rule most appropriate
  for it. This is used for testing."
	(interactive)
	(cl-destructuring-bind (pred &rest plist &key trigger mode &allow-other-keys)
		(or (cl-find-if #'+file-template-p +file-templates-alist)
			(user-error "Found no file template for this file"))
	  (if (or (functionp trigger)
			  (cl-find trigger
					   (yas--all-templates
						(yas--get-snippet-tables
						 mode))
					   :key #'yas--template-key :test #'equal))
		  (message "Found %s" (cons pred plist))
		(message "Found rule, but can't find associated snippet: %s" (cons pred plist)))))
;;; editor/file-templates/config.el -*- lexical-binding: t; -*-

(defvar +file-templates-dir
  (expand-file-name "templates/" (file-name-directory (or load-file-name (buffer-file-name))))
  "The path to a directory of yasnippet folders to use for file templates.")

(defvar +file-templates-default-trigger "__"
  "The default yasnippet trigger key (a string) for file template rules that
don't have a :trigger property in `+file-templates-alist'.")

(defvar +file-templates-inhibit nil
  "If non-nil, inhibit file template expansion.")

(defvar +file-templates-alist
  '(;; General
    (gitignore-mode)
    (dockerfile-mode)
    ("/docker-compose\\.yml$" :mode yaml-mode)
    ("/Makefile$"             :mode makefile-gmake-mode)
    ;; elisp
    ("/\\.dir-locals\\.el$")
    ("/\\.doomrc$"
     :trigger "__doomrc"
     :mode emacs-lisp-mode)
    ("/packages\\.el$" :when +file-templates-in-emacs-dirs-p
     :trigger "__doom-packages"
     :mode emacs-lisp-mode)
    ("/doctor\\.el$" :when +file-templates-in-emacs-dirs-p
     :trigger "__doom-doctor"
     :mode emacs-lisp-mode)
    ("/test/.+\\.el$" :when +file-templates-in-emacs-dirs-p
     :trigger "__doom-test"
     :mode emacs-lisp-mode)
    ("\\.el$" :when +file-templates-in-emacs-dirs-p
     :trigger "__doom-module"
     :mode emacs-lisp-mode)
    ("-test\\.el$" :mode emacs-ert-mode)
    (emacs-lisp-mode :trigger "__package")
    (snippet-mode)
    ;; C/C++
    ("/main\\.c\\(?:c\\|pp\\)$"   :trigger "__main.cpp"    :mode c++-mode)
    ("/win32_\\.c\\(?:c\\|pp\\)$" :trigger "__winmain.cpp" :mode c++-mode)
    ("\\.c\\(?:c\\|pp\\)$"        :trigger "__cpp" :mode c++-mode)
    ("\\.h\\(?:h\\|pp\\|xx\\)$"   :trigger "__hpp" :mode c++-mode)
    ("\\.h$" :trigger "__h" :mode c-mode)
    (c-mode  :trigger "__c")
    ;; direnv
    ("/\\.envrc$" :trigger "__envrc" :mode direnv-envrc-mode)
    ;; go
    ("/main\\.go$" :trigger "__main.go" :mode go-mode :project t)
    (go-mode :trigger "__.go")
    ;; web-mode
    ("/normalize\\.scss$" :trigger "__normalize.scss" :mode scss-mode)
    ("/master\\.scss$" :trigger "__master.scss" :mode scss-mode)
    ("\\.html$" :trigger "__.html" :mode web-mode)
    (scss-mode)
    ;; java
    ("/main\\.java$" :trigger "__main" :mode java-mode)
    ("/build\\.gradle$" :trigger "__build.gradle" :mode android-mode)
    ("/src/.+\\.java$" :mode java-mode)
    ;; javascript
    ("/package\\.json$"        :trigger "__package.json" :mode json-mode)
    ("/bower\\.json$"          :trigger "__bower.json" :mode json-mode)
    ("/gulpfile\\.js$"         :trigger "__gulpfile.js" :mode js-mode)
    ("/webpack\\.config\\.js$" :trigger "__webpack.config.js" :mode js-mode)
    ;; Lua
    ("/main\\.lua$" :trigger "__main.lua" :mode love-mode)
    ("/conf\\.lua$" :trigger "__conf.lua" :mode love-mode)
    ;; Markdown
    (markdown-mode)
    ;; Markdown
    (nxml-mode)
    ;; Nix
    ("/shell\\.nix$" :trigger "__shell.nix")
    (nix-mode)
    ;; Org
    (org-journal-mode :ignore t)
    (org-mode)
    ;; PHP
    ("\\.class\\.php$" :trigger "__.class.php" :mode php-mode)
    (php-mode)
    ;; Python
    ;; TODO ("tests?/test_.+\\.py$" :trigger "__" :mode nose-mode)
    ;; TODO ("/setup\\.py$" :trigger "__setup.py" :mode python-mode)
    (python-mode)
    ;; Ruby
    ("/lib/.+\\.rb$"      :trigger "__module"   :mode ruby-mode :project t)
    ("/spec_helper\\.rb$" :trigger "__helper"   :mode rspec-mode :project t)
    ("_spec\\.rb$"                              :mode rspec-mode :project t)
    ("/\\.rspec$"         :trigger "__.rspec"   :mode rspec-mode :project t)
    ("\\.gemspec$"        :trigger "__.gemspec" :mode ruby-mode :project t)
    ("/Gemfile$"          :trigger "__Gemfile"  :mode ruby-mode :project t)
    ("/Rakefile$"         :trigger "__Rakefile" :mode ruby-mode :project t)
    (ruby-mode)
    ;; Rust
    ("/Cargo\\.toml$" :trigger "__Cargo.toml" :mode rust-mode)
    ("/main\\.rs$" :trigger "__main.rs" :mode rust-mode)
    ;; Slim
    ("/\\(?:index\\|main\\)\\.slim$" :mode slim-mode)
    ;; Shell scripts
    ("\\.zunit$" :trigger "__zunit" :mode sh-mode)
    (fish-mode)
    (sh-mode)
    ;; Solidity
    (solidity-mode :trigger "__sol"))
  "An alist of file template rules. The CAR of each rule is either a major mode
symbol or regexp string. The CDR is a plist. See `set-file-template!' for more
information.")


;;
;;; Library

(defun +file-templates-in-emacs-dirs-p (file)
  "Returns t if FILE is in Doom or your private directory."
  (or (file-in-directory-p file doom-user-dir)
      (file-in-directory-p file doom-emacs-dir)))

(defun +file-template-p (rule)
  "Return t if RULE applies to the current buffer."
  (let ((pred (car rule))
        (plist (cdr rule)))
    (and (or (and (symbolp pred)
                  (eq major-mode pred))
             (and (stringp pred)
                  (stringp buffer-file-name)
                  (string-match-p pred buffer-file-name)))
         (or (not (plist-member plist :when))
             (funcall (plist-get plist :when)
                      buffer-file-name))
         rule)))

(defun +file-templates-check-h ()
  "Check if the current buffer is a candidate for file template expansion. It
must be non-read-only, empty, and there must be a rule in
`+file-templates-alist' that applies to it."
  (and (not +file-templates-inhibit)
       buffer-file-name        ; this buffer represents a file and
       (not buffer-read-only)  ; ...isn't read-only
       (bobp) (eobp)           ; ...is empty
       (not (member (substring (buffer-name) 0 1) '("*" " ")))  ; ...isn't a "special" buffer
       (not (bound-and-true-p org-capture-current-plist))  ; ...isn't an org-capture buffer
       (not (file-exists-p buffer-file-name))  ; ...is a new file
       (not (buffer-modified-p))    ; ...hasn't been modified
       (null (buffer-base-buffer))  ; ...isn't an indirect clone
       (when-let (rule (cl-find-if #'+file-template-p +file-templates-alist))
         (apply #'+file-templates--expand rule))))


#+end_src
** Regular Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
	:diminish yas-minor-mode
	:defer 5
	:config
	;; (setq yas-snippet-dirs (list (expand-file-name "snippets" jib/emacs-stuff)))
	(yas-global-mode 1)
	(add-to-list 'yas-snippet-dirs '+file-templates-dir 'append #'eq)
	(setq yas-prompt-functions (delq #'yas-dropdown-prompt yas-prompt-functions)
		  yas-snippet-dirs '(+file-templates-dir))
	;; Ensure file templates in `+file-templates-dir' are visible
	(yas-reload-all)) ;; or M-x yas-reload-all if you've started YASnippet already.
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change)) 
  (use-package yasnippet-snippets)
#+end_src
* mixed-pitch 
#+begin_src emacs-lisp
  (use-package mixed-pitch
	:defer t
	:config
	(setq mixed-pitch-set-height nil)
	(dolist (face '(org-date org-priority org-tag org-special-keyword)) ;; Some extra faces I like to be fixed-pitch
	  (add-to-list 'mixed-pitch-fixed-pitch-faces face)))
#+end_src
* Hide-mode-line
#+begin_src emacs-lisp
  (use-package hide-mode-line
	:commands (hide-mode-line-mode))
#+end_src
* Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
	:config
	(doom-modeline-mode)
	(setq doom-modeline-buffer-file-name-style 'auto ;; Just show file name (no path)
		  doom-modeline-enable-word-count t
		  doom-modeline-buffer-encoding nil
		  doom-modeline-icon t ;; Enable/disable all icons
		  doom-modeline-modal-icon t ;; Icon for Evil mode
		  doom-modeline-major-mode-icon t
		  doom-modeline-major-mode-color-icon t
		  doom-modeline-bar-width 3))
#+end_src
* Vetico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
	:init
	(vertico-mode)

	;; Different scroll margin
	;; (setq vertico-scroll-margin 0)

	;; Show more candidates
	;; (setq vertico-count 20)

	;; Grow and shrink the Vertico minibuffer
	;; (setq vertico-resize t)

	;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
	;; (setq vertico-cycle t)
	)
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
	:init
	(savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
	(defun crm-indicator (args)
	  (cons (format "[CRM%s] %s"
					(replace-regexp-in-string
					 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
					 crm-separator)
					(car args))
			(cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
		  '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	;; (setq read-extended-command-predicate
	;;       #'command-completion-default-include-p)

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))
#+end_src
* Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
	:ensure t
	:config
	(marginalia-mode))
#+end_src
* Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
	;; Replace bindings. Lazily loaded due by `use-package'.
	:bind (;; C-c bindings (mode-specific-map)
		   ("C-c h" . consult-history)
		   ("C-c m" . consult-mode-command)
		   ("C-c k" . consult-kmacro)
		   ;; C-x bindings (ctl-x-map)
		   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
		   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
		   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
		   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
		   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
		   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
		   ;; Custom M-# bindings for fast register access
		   ("M-#" . consult-register-load)
		   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
		   ("C-M-#" . consult-register)
		   ;; Other custom bindings
		   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
		   ("<help> a" . consult-apropos)            ;; orig. apropos-command
		   ;; M-g bindings (goto-map)
		   ("M-g e" . consult-compile-error)
		   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
		   ("M-g g" . consult-goto-line)             ;; orig. goto-line
		   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
		   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
		   ("M-g m" . consult-mark)
		   ("M-g k" . consult-global-mark)
		   ("M-g i" . consult-imenu)
		   ("M-g I" . consult-imenu-multi)
		   ;; M-s bindings (search-map)
		   ("M-s d" . consult-find)
		   ("M-s D" . consult-locate)
		   ("M-s g" . consult-grep)
		   ("M-s G" . consult-git-grep)
		   ("M-s r" . consult-ripgrep)
		   ("M-s l" . consult-line)
		   ("M-s L" . consult-line-multi)
		   ("M-s m" . consult-multi-occur)
		   ("M-s k" . consult-keep-lines)
		   ("M-s u" . consult-focus-lines)
  

		   ;; Isearch integration
		   ("M-s e" . consult-isearch-history)
		   :map isearch-mode-map
		   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
		   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
		   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
		   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
		   ;; Minibuffer history
		   :map minibuffer-local-map
		   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
		   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

	;; Enable automatic preview at point in the *Completions* buffer. This is
	;; relevant when you use the default completion UI.
	:hook (completion-list-mode . consult-preview-at-point-mode)

	;; The :init configuration is always executed (Not lazy)
	:init

	;; Optionally configure the register formatting. This improves the register
	;; preview for `consult-register', `consult-register-load',
	;; `consult-register-store' and the Emacs built-ins.
	(setq register-preview-delay 0.5
		  register-preview-function #'consult-register-format)

	;; Optionally tweak the register preview window.
	;; This adds thin lines, sorting and hides the mode line of the window.
	(advice-add #'register-preview :override #'consult-register-window)

	;; Use Consult to select xref locations with preview
	(setq xref-show-xrefs-function #'consult-xref
		  xref-show-definitions-function #'consult-xref)

	;; Configure other variables and modes in the :config section,
	;; after lazily loading the package.
	:config

	;; Optionally configure preview. The default value
	;; is 'any, such that any key triggers the preview.
	;; (setq consult-preview-key 'any)
	;; (setq consult-preview-key (kbd "M-."))
	;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
	;; For some commands and buffer sources it is useful to configure the
	;; :preview-key on a per-command basis using the `consult-customize' macro.
	;; (consult-customize
	;;  consult-theme
	;;  :preview-key '(:debounce 0.2 any)
	;;  consult-ripgrep consult-git-grep consult-grep
	;;  consult-bookmark consult-recent-file consult-xref
	;;  consult--source-bookmark consult--source-recent-file
	;;  ponsult--source-project-recent-file
	;;  :preview-key (kbd "M-."))

	;; Optionally configure the narrowing key.
	;; Both < and C-+ work reasonably well.
	(setq consult-narrow-key "<") ;; (kbd "C-+")

	;; Optionally make narrowing help available in the minibuffer.
	;; You may want to use `embark-prefix-help-command' or which-key instead.
	;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

	;; By default `consult-project-function' uses `project-root' from project.el.
	;; Optionally configure a different project root function.
	;; There are multiple reasonable alternatives to chose from.
	;;;; 1. project.el (the default)
	;; (setq consult-project-function #'consult--default-project--function)
	;;;; 2. projectile.el (projectile-project-root)
	;; (autoload 'projectile-project-root "projectile")
	;; (setq consult-project-function (lambda (_) (projectile-project-root)))
	;;;; 3. vc.el (vc-root-dir)
	;; (setq consult-project-function (lambda (_) (vc-root-dir)))
	;;;; 4. locate-dominating-file
	;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
	)
#+end_src
* Consult Flycheck
#+begin_src emacs-lisp
  (use-package consult-flycheck)
#+end_src
* Consult-dash
#+begin_src emacs-lisp
  (use-package consult-dash
:config
(setq counsel-dash-docsets-path "~/.docset")
(setq counsel-dash-docsets-url "https://raw.github.com/Kapeli/feeds/master")
(setq counsel-dash-min-length 3)
(setq counsel-dash-candidate-format "%d %n (%t)")
(setq counsel-dash-enable-debugging nil)
(setq counsel-dash-browser-func 'browse-url)
(setq counsel-dash-ignored-docsets nil))
#+end_src
* Embark
#+begin_src emacs-lisp
  (use-package embark
	:ensure t

	:bind
	(("C-." . embark-act)         ;; pick some comfortable binding
	 ("C-;" . embark-dwim)        ;; good alternative: M-.
	 ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

	:init

	;; Optionally replace the key help with a completing-read interface
	(setq prefix-help-command #'embark-prefix-help-command)

	:config

	;; Hide the mode line of the Embark live/completions buffers
	(add-to-list 'display-buffer-alist
				 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
				   nil
				   (window-parameters (mode-line-format . none)))))

										  ;
#+end_src
* Embark-consult
#+begin_src emacs-lisp
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
	:ensure t
	:after (embark consult)
	:demand t ; only necessary if you have the hook below
	;; if you want to have consult previews as you move around an
	;; auto-updating embark collect buffer
	:hook
	(embark-collect-mode . consult-preview-at-point-mode))
#+end_src
* Orderless
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
	:init
	;; Configure a custom style dispatcher (see the Consult wiki)
	;; (setq orderless-style-dispatchers '(+orderless-dispatch)
	;;       orderless-component-separator #'orderless-escapable-split-on-space)
	(setq completion-styles '(orderless basic)
		  completion-category-defaults nil
		  completion-category-overrides '((file (styles partial-completion)))))
#+end_src
* Smart-parens
#+begin_src emacs-lisp
  (use-package smartparens
	:diminish smartparens-mode
	:defer 1
	:config
	;; Load default smartparens rules for various languages
	(require 'smartparens-config)
	(setq sp-max-prefix-length 25)
	(setq sp-max-pair-length 4)
	(setq sp-highlight-pair-overlay nil
		  sp-highlight-wrap-overlay nil
		  sp-highlight-wrap-tag-overlay nil)

	(with-eval-after-load 'evil
	  (setq sp-show-pair-from-inside t)
	  (setq sp-cancel-autoskip-on-backward-movement nil)
	  (setq sp-pair-overlay-keymap (make-sparse-keymap)))

	(let ((unless-list '(sp-point-before-word-p
						 sp-point-after-word-p
						 sp-point-before-same-p)))
	  (sp-pair "'"  nil :unless unless-list)
	  (sp-pair "\"" nil :unless unless-list))

	;; In lisps ( should open a new form if before another parenthesis
	(sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))

	;; Don't do square-bracket space-expansion where it doesn't make sense to
	(sp-local-pair '(emacs-lisp-mode org-mode markdown-mode gfm-mode)
				   "[" nil :post-handlers '(:rem ("| " "SPC")))


	(dolist (brace '("(" "{" "["))
	  (sp-pair brace nil
			   :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
			   ;; Don't autopair opening braces if before a word character or
			   ;; other opening brace. The rationale: it interferes with manual
			   ;; balancing of braces, and is odd form to have s-exps with no
			   ;; whitespace in between, e.g. ()()(). Insert whitespace if
			   ;; genuinely want to start a new form in the middle of a word.
			   :unless '(sp-point-before-word-p sp-point-before-same-p)))
	(smartparens-global-mode t))
#+end_src
* Projectile
#+begin_src emacs-lisp
  (use-package projectile
  :ensure t  ; I have `use-package-always-ensure'
  :defer t   ; I have `use-package-always-defer'
  :hook
  (after-init . projectile-global-mode)
  :init
  (setq-default
   projectile-cache-file (expand-file-name ".projectile-cache" user-emacs-directory)
   projectile-known-projects-file (expand-file-name ".projectile-bookmarks" user-emacs-directory))
  :custom
  (projectile-enable-caching t)
  (projectile-track-known-projects-automatically nil))
#+end_src
* Flyspell
#+begin_src emacs-lisp

  ;; "Enable Flyspell mode, which highlights all misspelled words. "
  (use-package flyspell
	:config

	(add-to-list 'ispell-skip-region-alist '("~" "~"))
	(add-to-list 'ispell-skip-region-alist '("=" "="))
	(add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
	(add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
	(add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
	(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))

	(setq ispell-extra-args '("--sug-mode=ultra"))

	(setq flyspell-issue-welcome-flag nil
		  flyspell-issue-message-flag nil)

	:general ;; Switches correct word from middle click to right click
	(general-define-key :keymaps 'flyspell-mouse-map
						"<mouse-3>" #'ispell-word
						"<mouse-2>" nil)
	(general-define-key :keymaps 'evil-motion-state-map
						"zz" #'ispell-word)
	)

  (use-package flyspell-correct
	:after flyspell
	:bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit :defer t)
  (use-package magit-todos :defer t)
#+end_src
* Diff-hl
Highlight the diffs of the past commit in a file
#+begin_src emacs-lisp
  (use-package diff-hl
	:config
	(global-diff-hl-mode))
#+end_src
* Unfill
#+begin_src emacs-lisp
  (use-package unfill :defer t)
#+end_src
* Jinx
#+begin_src emacs-lisp
(use-package jinx
  :hook (emacs-startup . global-jinx-mode)
  :bind ([remap ispell-word] . jinx-correct))
#+end_src
* Centered-cursor-mode
#+begin_src emacs-lisp
  (use-package centered-cursor-mode :diminish centered-cursor-mode)
#+end_src
* Restart emacs
#+begin_src emacs-lisp
  (use-package restart-emacs :defer t)
#+end_src
* Diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
* mw-Thesaurus
#+begin_src emacs-lisp
  (use-package mw-thesaurus
	:defer t
	:config
	(add-hook 'mw-thesaurus-mode-hook (lambda () (define-key evil-normal-state-local-map (kbd "q") 'mw-thesaurus--quit))))
#+end_src
* EMMS
#+begin_src emacs-lisp
  (use-package emms
  	:config
  	(emms-all)
  	(setq emms-source-file-default-directory '"~/Music/")
  	(emms-default-players)
  	)
#+end_src
* Deft
#+begin_src emacs-lisp
  (defun a3madkour/deft-kill ()
	(kill-buffer "*Deft*"))
  (defun a3madkour/deft-evil-fix ()
	(evil-insert-state)
	(centered-cursor-mode))
  (use-package deft
	:config
	(defun cf/deft-parse-title (file contents)
	  "Parse the given FILE and CONTENTS and determine the title.
	If `deft-use-filename-as-title' is nil, the title is taken to
	be the first non-empty line of the FILE.  Else the base name of the FILE is
	used as title."
	  (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
		(if begin
			(string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
		  (deft-base-filename file))))
	(advice-add 'deft-parse-title :override #'cf/deft-parse-title)
	(setq deft-strip-summary-regexp
		  (concat "\\("
				  "[\n\t]" ;; blank
				  "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
				  "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n" ;; org-roam ID
				  "\\|\\[\\[\\(.*\\]\\)" ;; any link 
				  "\\)"))
	(setq deft-directory org-roam-notes
		  deft-extensions '("org" "txt")
		  deft-recursive t
		  deft-file-limit 40
		  deft-use-filename-as-title t)

	(add-hook 'deft-open-file-hook 'a3madkour/deft-kill) ;; Once a file is opened, kill Deft
	(add-hook 'deft-mode-hook 'a3madkour/deft-evil-fix) ;; Goes into insert mode automaticlly in Deft

	;; Removes :PROPERTIES: from descriptions
	;; (setq deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
	:general

	(general-define-key :states 'normal :keymaps 'deft-mode-map
						;; 'q' kills Deft in normal mode
						"q" 'kill-this-buffer)

	(general-define-key :states 'insert :keymaps 'deft-mode-map
						"C-j" 'next-line
						"C-k" 'previous-line)
	)


#+end_src
* PDF-Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :mode  ("\\.pdf\\'" . pdf-view-mode)
    :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1) (auto-revert-mode 1)))
    :config
    (pdf-loader-install)
    (push 'pdf-view-midnight-minor-mode pdf-tools-enabled-modes)
    (setq pdf-view-use-scaling t
  		pdf-view-use-imagemagick nil)

    ;; (setq-default pdf-view-display-size 'fit-height)
    ;; (setq pdf-view-continuous t) ;; Makes it so scrolling down to the bottom/top of a page doesn't switch to the next page
    (setq pdf-view-midnight-colors '("#ffffff" . "#121212" )) ;; I use midnight mode as dark mode, dark mode doesn't seem to work
    :general
    (general-define-key :states 'motion :keymaps 'pdf-view-mode-map
  					  "j" 'pdf-view-next-page
  					  "k" 'pdf-view-previous-page

    					  "C-j" 'pdf-view-next-line-or-next-page
    					  "C-k" 'pdf-view-previous-line-or-previous-page

    					  ;; Arrows for movement as well
    					  (kbd "<down>") 'pdf-view-next-line-or-next-page
    					  (kbd "<up>") 'pdf-view-previous-line-or-previous-page

    					  (kbd "<down>") 'pdf-view-next-line-or-next-page
    					  (kbd "<up>") 'pdf-view-previous-line-or-previous-page

    					  (kbd "<left>") 'image-backward-hscroll
    					  (kbd "<right>") 'image-forward-hscroll

    					  "H" 'pdf-view-fit-height-to-window
    					  "0" 'pdf-view-fit-height-to-window
    					  "W" 'pdf-view-fit-width-to-window
    					  "=" 'pdf-view-enlarge
    					  "-" 'pdf-view-shrink

    					  "Q" 'quit-window
    					  "q" 'kill-this-buffer
  					  "g" 'revert-buffer

    					  )


    )
#+end_src
* Popper
#+begin_src emacs-lisp
  (use-package popper
	:bind (("C-`"   . popper-toggle-latest)
		   ("M-`"   . popper-cycle)
		   ("C-M-`" . popper-toggle-type))
	:init
	(setq popper-reference-buffers
		  '("\\*Messages\\*"
			"Output\\*$"
			"\\*Warnings\\*"
			help-mode
			compilation-mode))
	(popper-mode +1))

#+end_src
* Dumb Jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq xref-show-definitions-function #'xref-show-definitions-completing-read))
#+end_src
* Rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
	:defer t)
#+end_src
* Kurecolor
#+begin_src emacs-lisp
  (use-package kurecolor)
#+end_src
* Editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
	:ensure t
	:config
	(editorconfig-mode 1))
#+end_src 
* Hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
	:defer t
	:hook (prog-mode . hl-todo-mode)
	:config
	(setq hl-todo-keyword-faces
		  '(("TODO"   . "#FF0000")
			("FIXME"  . "#FF4500")
			("DEBUG"  . "#A020F0")
			("WIP"   . "#1E90FF"))))
#+end_src
* Eshell-git-prompt
#+begin_src emacs-lisp
  (use-package eshell-git-prompt
	:config
	(eshell-git-prompt-use-theme 'powerline)
	)
#+end_src
* Command-log-mode
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
* Pulsar
#+begin_src emacs-lisp
  (use-package pulsar
	:config
	(setq pulsar-pulse-functions
		  ;; NOTE 2022-04-09: The commented out functions are from before
		  ;; the introduction of `pulsar-pulse-on-window-change'.  Try that
		  ;; instead.
		  '(recenter-top-bottom
			move-to-window-line-top-bottom
			reposition-window
			;; bookmark-jump
			;; other-window
			;; delete-window
			;; delete-other-windows
			forward-page
			consult-imenu
			backward-page
			scroll-up-command
			scroll-down-command
			;; windmove-right
			;; windmove-left
			;; windmove-up
			;; windmove-down
			;; windmove-swap-states-right
			;; windmove-swap-states-left
			;; windmove-swap-states-up
			;; windmove-swap-states-down
			;; tab-new
			;; tab-close
			;; tab-next
			org-next-visible-heading
			org-previous-visible-heading
			org-forward-heading-same-level
			org-backward-heading-same-level
			outline-backward-same-level
			outline-forward-same-level
			outline-next-visible-heading
			outline-previous-visible-heading
			outline-up-heading))

	(setq pulsar-pulse-on-window-change t)
	(setq pulsar-pulse t)
	(setq pulsar-delay 0.055)
	(setq pulsar-iterations 10)
	(setq pulsar-face 'pulsar-magenta)
	(setq pulsar-highlight-face 'pulsar-yellow)

	(pulsar-global-mode 1)
	)
#+end_src
* Academic Phrases
#+begin_src emacs-lisp
  (use-package academic-phrases)
#+end_src
* Fountain-mode
#+begin_src emacs-lisp
  (use-package fountain-mode)
#+end_src
* Ripgrep
#+begin_src emacs-lisp
  (use-package rg)
#+end_src
* Dash Docs
#+begin_src emacs-lisp
  (use-package dash-docs
	:config
	(setq dash-docs-docsets-path "~/.docsets")
	(setq installed-langs (dash-docs-installed-docsets))
	;;figure out to convert spaces into underscores when installing the docs
	(setq docset-langs '("Rust" "Emacs_Lisp" "JavaScript" "C" "Bash" "Vim" "SQLite" "PostgreSQL" "OpenGL_4" "OCaml" "LaTeX" "Docker" "C++" "HTML" "SVG" "CSS"  "Haskell" "React" "D3JS"))
	(dolist (lang docset-langs)
	  (when (null (member lang installed-langs))
		(dash-docs-install-docset lang))))
#+end_src
* Define word
#+begin_src emacs-lisp
(use-package define-word)
#+end_src
* Format all
#+begin_src emacs-lisp
  (use-package format-all)
#+end_src
* Lsp
#+begin_src emacs-lisp
  ;; (use-package lsp-mode
  ;; 	:init
  ;; 	;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  ;; 	;; (setq lsp-keymap-prefix "C-c l")
  ;; 	:hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
  ;; 		   (web-mode . lsp)
  ;; 		   (rustic-mode . lsp)
  ;; 		   (python-mode . lsp)
  ;; 		   (emmet-mode . lsp)
  ;; 		   ;; if you want which-key integration
  ;; 		   (lsp-mode . lsp-ui-mode)
  ;; 		   (lsp-mode . lsp-enable-which-key-integration))
  ;; 	:commands lsp
  ;; 	:custom
  ;; 	;; what to use when checking on-save. "check" is default, I prefer clippy
  ;; 	(lsp-rust-analyzer-cargo-watch-command "clippy")
  ;; 	(lsp-eldoc-render-all t)
  ;; 	(lsp-idle-delay 0.6)
  ;; 	;; enable / disable the hints as you prefer:
  ;; 	(lsp-rust-analyzer-server-display-inlay-hints t)
  ;; 	(lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  ;; 	(lsp-rust-analyzer-display-chaining-hints t)
  ;; 	(lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  ;; 	(lsp-rust-analyzer-display-closure-return-type-hints t)
  ;; 	;; (lsp-rust-analyzer-display-parameter-hints nil)
  ;; 	;; (lsp-rust-analyzer-display-reborrow-hints nil)
  ;; 	)

  ;; (use-package lsp-ui
  ;; 	:ensure
  ;; 	:commands lsp-ui-mode
  ;; 	:custom
  ;; 	(lsp-ui-peek-always-show t)
  ;; 	(lsp-ui-sideline-show-hover t)
  ;; 	(lsp-ui-doc-enable nil))

  ;; (use-package consult-lsp)
  ;; (use-package eglot)
  ;; (use-package dap-mode
  ;; 	:after lsp-mode
  ;; 	:commands dap-debug
  ;; 	:hook ((python-mode . dap-ui-mode) (python-mode . dap-mode))
  ;; 	:config
  ;; 	(dap-auto-configure-mode)
  ;; 	(require 'dap-python)
  ;; 	(require 'dap-gdb-lldb)
  ;; 	(setq dap-python-debugger 'debugpy)
  ;; 	(add-hook 'dap-stopped-hook
  ;; 			  (lambda (arg) (call-interactively #'dap-hydra)))
  ;; 	(dap-register-debug-template "Rust::GDB Run Configuration"
  ;; 								 (list :type "gdb"
  ;; 									   :request "launch"
  ;; 									   :name "GDB::Run"
  ;; 									   :gdbpath "rust-gdb"
  ;; 									   :target nil
  ;; 									   :cwd nil)))
#+end_src
* Perspective
#+begin_src emacs-lisp
  (use-package perspective
	:bind
	("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
	:custom
	(persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
	:init
	(persp-mode))
#+end_src
* Powerthesaurus
#+begin_src emacs-lisp
(use-package powerthesaurus)
#+end_src
* Language Tool
#+begin_src emacs-lisp
  (use-package langtool
  :config
  (setq langtool-default-language "en-US")
  (setq langtool-bin "languagetool")
  )
#+end_src
* Language Packages
** Rust
#+begin_src emacs-lisp
  (use-package rustic
	:config
	(setq rustic-lsp-client 'eglot)
	;; (setq rustic-analyzer-command '("~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rust-analyzer"))
	)
#+end_src
** GDScript
#+begin_src emacs-lisp
  (use-package gdscript-mode
	:hook (gdscript-mode . eglot-ensure)
	:custom (gdscript-eglot-version 3)
	:config
	;; (setq treesit-extra-load-path '("~/emacs-configs/custom/tree-sitter-gdscript/src/"))
	)
#+end_src
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode)
  ;; (use-package lsp-haskell)
#+end_src
** Agda
Run agda-mode setup first
#+begin_src emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package ein
    :config
    (setq ein:output-area-inlined-images t))
  (use-package python-mode)
  (use-package sphinx-doc
    :hook
    (python-mode . sphinx-doc-mode))
  (use-package py-isort)
  (use-package pyimport)
  (use-package python-pytest)
  (use-package conda)
  (use-package anaconda-mode)

  ;; (use-package lsp-pyright
  ;; 	:ensure t
  ;; 	:hook (python-mode . (lambda ()
  ;; 						   (require 'lsp-pyright)
  ;; 						   (lsp))))  ; or lsp-deferred
#+end_src
** Prolog
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
#+end_src
** C/C++
#+begin_src emacs-lisp
  (use-package demangle-mode)

  ;; (use-package ccls
  ;; 	:hook ((c-mode c++-mode objc-mode cuda-mode) .
  ;; 		   (lambda () (require 'ccls) (lsp))))
  
  (use-package disaster)
  (use-package modern-cpp-font-lock)
#+end_src
** C#
#+begin_src emacs-lisp
  (use-package csproj-mode)
  ;; (use-package sln-mode)
  ;;Unity stuff'
  (use-package shader-mode)
#+end_src
** Emacs lisp
*** Elisp def
#+begin_src emacs-lisp
  (use-package elisp-def)
#+end_src
*** Elfmt
#+begin_src emacs-lisp
  (use-package elfmt
    :straight (:type git :host github :repo "riscy/elfmt")
    :config
    (elfmt-global-mode)
    )
#+end_src
** Latex
#+begin_src emacs-lisp
  (use-package auctex 
	:ensure nil
	:defer t
	:init
	(setq TeX-engine 'xetex ;; Use XeTeX
		  latex-run-command "xetex")

	(setq TeX-parse-self t ; parse on load
		  TeX-auto-save t  ; parse on save
		  ;; Use directories in a hidden away folder for AUCTeX files.
		  TeX-auto-local (concat user-emacs-directory "auctex/auto/")
		  TeX-style-local (concat user-emacs-directory "auctex/style/")

		  TeX-source-correlate-mode t
		  TeX-source-correlate-method 'synctex

		  TeX-show-compilation nil

		  ;; Don't start the Emacs server when correlating sources.
		  ;; TeX-source-correlate-start-server nil

		  ;; Automatically insert braces after sub/superscript in `LaTeX-math-mode'.
		  TeX-electric-sub-and-superscript t
		  ;; Just save, don't ask before each compilation.
		  TeX-save-query nil)

	;; To use pdfview with auctex:
	(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		  TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
		  TeX-source-correlate-start-server t)
	:general
	(general-define-key
	 :prefix ","
	 :states 'normal
	 :keymaps 'LaTeX-mode-map
	 "" nil
	 "a" '(TeX-command-run-all :which-key "TeX run all")
	 "c" '(TeX-command-master :which-key "TeX-command-master")
	 "c" '(TeX-command-master :which-key "TeX-command-master")
	 "e" '(LaTeX-environment :which-key "Insert environment")
	 "s" '(LaTeX-section :which-key "Insert section")
	 "m" '(TeX-insert-macro :which-key "Insert macro")
	 )

	)

  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer) ;; Standard way

  (use-package company-auctex
	:after auctex
	:init
	(add-to-list 'company-backends 'company-auctex)
	(company-auctex-init))

  (use-package latex-preview-pane)
  (use-package evil-tex
	:config
	(add-hook 'LaTeX-mode-hook #'evil-tex-mode))

  (use-package cdlatex
	:hook (org-mode . org-cdlatex-mode)
	:hook (tex-mode . cdlatex-mode))

  (use-package company-auctex)
  (use-package company-reftex)
  (use-package company-math)
  (use-package adaptive-wrap
	:hook (LaTeX-mode . adaptive-wrap-prefix-mode)
	:init (setq-default adaptive-wrap-extra-indent 0))
  (use-package auctex-latexmk
	:config
	(setq auctex-latexmk-inherit-TeX-PDF-mode t)
	(auctex-latexmk-setup)
	)
#+end_src
** Lua
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src
** Web
#+begin_src emacs-lisp
  (use-package emmet-mode
	:config
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . emmet-mode))
	(add-to-list 'auto-mode-alist '("\\.phtml\\'" . emmet-mode))
	(add-to-list 'auto-mode-alist '("\\.css\\'" . emmet-mode)))

  ;; (use-package haml-mode)
  ;; (use-package company-web)
  ;; (use-package impatient-mode)
  ;; (use-package css-mode)
  ;; (use-package com-css-sort)
  ;; (use-package less-css-mode)
  ;; (use-package sass-mode)
  ;; (use-package sws-mode)
  (use-package web-mode
	:config
	(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.ts?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
	(setq web-mode-enable-auto-pairing t)
	(setq web-mode-enable-auto-opening t)
	(setq web-mode-enable-auto-closing t)
	)
#+end_src
** Javascript and its ilk
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ts?\\'" . tsx-ts-mode))
  (use-package npm-mode)
  (use-package rjsx-mode)
  (use-package js2-refactor
    :hook ((js2-mode rjsx-mode) . js2-refactor-mode))

  ;; if you use treesitter based typescript-ts-mode (emacs 29+)
  (use-package tide
    :ensure t
    :after (company flycheck)
    :hook (
           (tsx-ts-mode . tide-setup)
           (tsx-ts-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+end_src
* Org-super-agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
	:after org
	:config
	(setq org-super-agenda-header-map nil) 
	(setq org-super-agenda-groups
		  '((:auto-dir-name t)))
	(org-agenda-list)
	(org-super-agenda-mode))
#+end_src
* Citar
#+begin_src emacs-lisp
  (defun citar-org-format-note-madkour (key entry)
	"Format a note from KEY and ENTRY."
	(let* ((template (citar--get-template 'note))
		   (note-meta (when template
						(citar-format--entry template entry)))
		   (template-path (citar--get-template 'note-file))
		   (note-path (when template-path
						(citar-format--entry template-path entry)))
		   (note-tags (cdr (citar-get-field-with-value '("keywords") key)))
		   (filepath (expand-file-name
					  (concat key ".org")
					  (car citar-notes-paths)))
		   (buffer (find-file filepath)))
	  (with-current-buffer buffer
		;; This just overrides other template insertion.
		(erase-buffer)
		(citar-org-roam-make-preamble key)
		(insert "#+title: ")
		(when template (insert note-meta))
		(insert "\n#+filetags::")
		(insert note-tags)
		(insert "\n* Notes\n:PROPERTIES:\n:NOTER_DOCUMENT: ")
		(when template-path (insert note-path))
		(insert "\n:END:\n")
		(insert "\n\n|\n\n#+print_bibliography:")
		(search-backward "|")
		(delete-char 1)
		(when (fboundp 'evil-insert)
		  (evil-insert 1)))))


  (use-package citar
	:no-require
	:custom
	(citar-templates
	 '((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
	   (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
	   (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
	   (note . "Notes on ${author editor}, ${title}")
	   (note-file . "${file}")))
	(org-cite-global-bibliography (list zot-bib))
	(org-cite-insert-processor 'citar)
	(org-cite-follow-processor 'citar)
	(citar-note-format-function 'citar-org-format-note-madkour)
	(org-cite-activate-processor 'citar)
	(citar-bibliography org-cite-global-bibliography)
	(citar-notes-paths (list org-ref-notes))
	;; optional: org-cite-insert is also bound to C-c C-x C-@
	:bind
	(:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

  (use-package citar-embark
	:after citar embark
	:no-require
	:config (citar-embark-mode))
  (setq citar-at-point-function 'embark-act)

#+end_src
* Org-Mode
#+begin_src emacs-lisp
  (defun a3madkour/clear-latex-temp-files ()
    (shell-command "rm -rf *.tex *.prv preview.fmt"))

  (defun a3madkour/org-noter-insert-subheading-note()
    (interactive)
    (org-noter-insert-note)
    (org-insert-subheading t)
    (let* ((location (org-noter--doc-approx-location (or nil 'interactive) (gv-ref force-new))))
      (org-entry-put nil org-noter-property-note-location (org-noter--pretty-print-location location))
  	)
    )

  (defun a3madkour/export-to-latex-on-save (filename)
    (when (string= (buffer-name) filename)
  	;; (org-open-file (org-latex-export-to-pdf))
  	(org-latex-export-to-pdf)
  	(a3madkour/clear-latex-temp-files)))

  (defun a3madkour/export-to-latex-on-save-and-open (filename)
    (when (string= (buffer-name) filename)
  	(org-open-file (org-latex-export-to-pdf))
  	(a3madkour/clear-latex-temp-files)))


  (defun a3madkour/org-font-setup ()
    ;; (set-face-attribute 'org-document-title nil :height 1.1) ;; Bigger titles, smaller drawers
    (set-face-attribute 'org-checkbox-statistics-done nil :inherit 'org-done :foreground "green3") ;; Makes org done checkboxes green
    ;; (set-face-attribute 'org-drawer nil :inherit 'fixed-pitch :inherit 'shadow :height 0.6 :foreground nil) ;; Makes org-drawer way smaller
    ;; (set-face-attribute 'org-ellipsis nil :inherit 'shadow :height 0.8) ;; Makes org-ellipsis shadow (blends in better)
    (set-face-attribute 'org-scheduled-today nil :weight 'normal) ;; Removes bold from org-scheduled-today
    (set-face-attribute 'org-super-agenda-header nil :inherit 'org-agenda-structure :weight 'bold) ;; Bolds org-super-agenda headers
    (set-face-attribute 'org-scheduled-previously nil :background "red") ;; Bolds org-super-agenda headers

    ;; Here I set things that need it to be fixed-pitch, just in case the font I am using isn't monospace.
    ;; (dolist (face '(org-list-dt org-tag org-todo org-table org-checkbox org-priority org-date org-verbatim org-special-keyword))
    ;;   (set-face-attribute `,face nil :inherit 'fixed-pitch))

    ;; (dolist (face '(org-code org-verbatim org-meta-line))
    ;;   (set-face-attribute `,face nil :inherit 'shadow :inherit 'fixed-pitch))
    )
  (use-package org
    :hook (org-mode . a3madkour/org-font-setup)
    :hook (org-agenda-mode . org-super-agenda-mode) ;; Start org-super-agenda
    :hook (org-capture-mode . evil-insert-state) ;; Start org-capture in Insert state by default
    :diminish org-indent-mode
    :diminish visual-line-mode
    :config
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    ;;figure out how to get to the category and see if it is a habit beeing added or a task
    (defun a3madkour/org-set-effort ()
  	(org-set-effort)
  	())

    (defun a3madkour/add-scheduled-todo ()
  	(interactive)
  	(let ((selected-date (org-read-date)))
  	  (org-insert-todo-heading-respect-content nil)
  	  (call-interactively 'org-set-effort)
  	  (org-schedule nil selected-date)))

    (defun a3madkour/org-insert-subheading-respect-content (&optional)
  	(interactive)
  	(let ((org-insert-heading-respect-content t))
  	  (org-insert-todo-subheading t)))

    (defun a3madkour/add-new-org-datetree-headline (selected-date)
  	(save-excursion
  	  (let* ((parsed-string (nthcdr 3 (org-parse-time-string selected-date)))
  			 (new-date (list (nth 1 parsed-string) (car parsed-string) (nth 2 parsed-string))))
  		(org-datetree-find-date-create new-date)
  		(nth 4 (org-heading-components)))))

    (defun a3madkour/add-scheduled-headline-todo ()
  	(interactive)
  	(let* ((selected-date (org-read-date))
  		   (headline (a3madkour/add-new-org-datetree-headline selected-date))
  		   (new_pos (org-find-exact-headline-in-buffer headline)))
  	  (goto-char (+ 1 new_pos))
  	  (a3madkour/org-insert-subheading-respect-content )
  	  (call-interactively 'org-set-effort)
  	  (org-schedule nil selected-date)
  	  ))


    (defun a3madkour/refile-to (file headline selected-date)
  	"Move current headline to specified location"
  	(let ((pos (save-excursion
  				 (find-file file)
  				 (let ((new_pos (org-find-exact-headline-in-buffer headline)))
  				   (org-schedule nil selected-date)
  				   new_pos)
  				 )))
  	  (org-refile nil nil (list headline file nil pos))))

    (defun a3madkour/refile-and-schedule ()
  	(interactive)
  	(let ((selected-date (org-read-date)))
  	  (a3madkour/refile-to buffer-file-name (a3madkour/add-new-org-datetree-headline selected-date) selected-date)))

    (defun a3madkour/file-with-current-date (path)
  	(expand-file-name (format "%s.org"
  							  (format-time-string "%Y-%m-%d")) path))

    ;;agenda dir
    (setq org-agenda-files '("~/org/CS" "~/org/Academic" "~/org/Artistic" "~/org/Health" "~/org/Intellectual"))

    (setq org-capture-templates
  		'(("c" "CS")
  		  ("ct" "Todo" entry (file+datetree "~/org/CS/todo.org")
  		   "* TODO %? %(a3madkour/org-set-effort)\nSCHEDULED: %t" :time-prompt t)
  		  ("cu" "Unscheduled" entry (file+headline "~/org/CS/todo.org" "Unscheduled")
  		   "* TODO %? %(a3madkour/org-set-effort)\n")
  		  ("ch" "Habit" entry (file "~/org/CS/habits.org")
  		   "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

  		  ("a" "Academic")
  		  ("at" "Todo" entry (file+datetree "~/org/Academic/todo.org")
  		   "* TODO %? %(a3madkour/org-set-effort)\nSCHEDULED: %t" :time-prompt t)
  		  ("au" "Unscheduled" entry (file+headline "~/org/Academic/todo.org" "Unscheduled")
  		   "* TODO %? %(a3madkour/org-set-effort)\n")
  		  ("ah" "Habit" entry (file "~/org/Academic/habits.org")
  		   "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

  		  ("r" "Artistic")
  		  ("rt" "Todo" entry (file+datetree "~/org/Artistic/todo.org")
  		   "* TODO %? %(a3madkour/org-set-effort)\nSCHEDULED: %t" :time-prompt t)
  		  ("ru" "Unscheduled" entry (file+headline "~/org/Artistic/todo.org" "Unscheduled")
  		   "* TODO %? %(a3madkour/org-set-effort)\n")
  		  ("rh" "Habit" entry (file "~/org/Artistic/habits.org")
  		   "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

  		  ("h" "Health")
  		  ("ht" "Todo" entry (file+datetree "~/org/Health/todo.org")
  		   "* TODO %? %(a3madkour/org-set-effort)\nSCHEDULED: %t" :time-prompt t)
  		  ("hu" "Unscheduled" entry (file+headline "~/org/Health/todo.org" "Unscheduled")
  		   "* TODO %? %(a3madkour/org-set-effort)\n")
  		  ("hh" "Habit" entry (file "~/org/Health/habits.org")
  		   "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

  		  ("i" "Intellectual")
  		  ("it" "Todo" entry (file+datetree "~/org/Intellectual/todo.org")
  		   "* TODO %? %(a3madkour/org-set-effort)\nSCHEDULED: %t" :time-prompt t)
  		  ("iu" "Unscheduled" entry (file+headline "~/org/Intellectual/todo.org" "Unscheduled")
  		   "* TODO %? %(a3madkour/org-set-effort)\n")
  		  ("ih" "Habit" entry (file "~/org/Intellectual/habits.org")
  		   "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

  		  ("b" "Manual Book" entry (file "~/org/reading-list.org")
  		   "* %^{TITLE}\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n:END:%^{AUTHOR}p\n%?" :empty-lines 1)

  		  ("g" "Game idea" entry (file+headline "~/org/ideas.org" "Game")
  		   "* %?\n")
  		  ("p" "Paper idea" entry (file+headline "~/org/ideas.org" "Paper")
  		   "* %?\n")
  		  ("s" "Software idea" entry (file+headline "~/org/ideas.org" "App")
  		   "* %?\n")
  		  ("v" "Video idea" entry (file+headline "~/org/ideas.org" "Video")
  		   "* %?\n")
  		  ("w" "Vague idea" entry (file+headline "~/org/ideas.org" "Vague af")
  		   "* %?\n")
  		  ("f" "Fleeting note" entry (file (lambda () (a3madkour/file-with-current-date "~/org/fleeting-notes")) )
  		   "* %?\n")
  		  )
  		)
    )
#+end_src

* Org-Babel
** Ob-Async
#+begin_src emacs-lisp
  (use-package ob-async)
#+end_src
** Ob-http
#+begin_src emacs-lisp 
(use-package ob-http)
#+end_src

** Final Setup
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (awk . t)
     (calc . t)
     (haskell . t)
     (latex . t)
     ;;(ledger . t)
     (gnuplot . t)
     (C . t)
     (js . t)
     (http . t)
     (shell . t)
     ;;    (ipython .t)
     ))
(setq org-src-preserve-indentation t  ; use native major-mode indentation
	org-src-tab-acts-natively t     ; we do this ourselves
	;; You don't need my permission (just be careful, mkay?)
	org-confirm-babel-evaluate nil
	org-link-elisp-confirm-function nil
	;; Show src buffer in popup, and don't monopolize the frame
	org-src-window-setup 'other-window
	;; Our :lang common-lisp module uses sly, so...
	org-babel-lisp-eval-fn #'sly-eval)
#+end_src
* Org-ql
#+begin_src emacs-lisp
  (use-package org-ql
	:general
	(general-define-key :keymaps 'org-ql-view-map
						"q" 'kill-buffer-and-window))
#+end_src
* Org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
	:hook (org-mode . org-bullets-mode))
#+end_src
* Org-fancy-priorities
#+begin_src emacs-lisp
(use-package org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("IDEAL" "DOABLE" "G4N" )))
#+end_src
* Org roam
#+begin_src emacs-lisp
  (use-package org-roam
    :config
    (org-roam-db-autosync-mode)
    )
#+end_src
* Org noter
#+begin_src emacs-lisp
  (use-package org-noter
	:config
	(setq org-noter-always-create-frame nil)
	(setq org-noter-kill-frame-at-session-end nil)
	)
#+end_src
* Org-Journal
#+begin_src emacs-lisp
  (use-package org-journal
	:config
	(setq org-journal-dir "~/org/Journal"))
#+end_src
* Org-pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro)
#+end_src
* Org-transclusion
#+begin_src emacs-lisp
  (use-package org-transclusion)
#+end_src
* Org-book
#+begin_src emacs-lisp
  (use-package org-books
	:config
	(setq org-books-file "~/org/reading-list.org")
	)
#+end_src
* Org PDFtools
#+begin_src emacs-lisp
  (use-package org-pdftools
	:hook (org-load . org-pdftools-setup-link ))
#+end_src
* Org appear
#+begin_src emacs-lisp
  (use-package org-appear
	:hook
	(org-mode . org-appear-mode)
	:config
	(setq org-appear-autolinks t)
	)
#+end_src
* Org modern
#+begin_src emacs-lisp
  ;; (use-package org-modern
  ;; 	:hook
  ;; 	(org-mode . org-modern-mode)
  ;; 	(org-agenda-finalize org-modern-agenda)
  ;; 	:config
  ;; 	(setq
  ;; 	 ;; Edit settings
  ;; 	 org-auto-align-tags nil
  ;; 	 ;; org-tags-column 0
  ;; 	 org-catch-invisible-edits 'show-and-error
  ;; 	 org-special-ctrl-a/e t
  ;; 	 org-insert-heading-respect-content t

  ;; 	 ;; Org styling, hide markup etc.
  ;; 	 ;; org-hide-emphasis-markers t
  ;; 	 org-pretty-entities t
  ;; 	 org-ellipsis "…"

  ;; 	 ;; Agenda styling
  ;; 	 org-agenda-tags-column 0
  ;; 	 org-agenda-block-separator ?─
  ;; 	 org-agenda-time-grid
  ;; 	 '((daily today require-timed)
  ;; 	   (800 1000 1200 1400 1600 1800 2000)
  ;; 	   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
  ;; 	 org-agenda-current-time-string
  ;; 	 "⭠ now ─────────────────────────────────────────────────")

  ;; 	(global-org-modern-mode)
  ;; 	)
#+end_src
* Org Special block extras
#+begin_src emacs-lisp
(use-package org-special-block-extras
  :ensure t
  :hook (org-mode . org-special-block-extras-mode)
  ;; All relevant Lisp functions are prefixed ‘o-’; e.g., `o-docs-insert'.
  :custom
    (o-docs-libraries
     '("~/org-special-block-extras/documentation.org")
     "The places where I keep my ‘#+documentation’"))
#+end_src
* Org music
#+begin_src emacs-lisp
  ;; Org-Music Mode
  ;; (use-package org-music
  ;; 	:straight (:type git :host github :repo "debanjum/org-music")
  ;; 	:init (progn
  ;; 			(setq
  ;; 			 org-music-file "~/org/Music.org"
  ;; 			 org-music-media-directory "~/Music/OrgMusic/"
  ;; 			 org-music-operating-system "linux")))
#+end_src
* Org Chef
#+begin_src emacs-lisp
  (use-package org-chef
  :ensure t)
#+end_src
* Exporting to website
Setting the pipeline for exporting the notes to the website dir
#+begin_src emacs-lisp 
  (setq website-notes-dir "~/Workspace/website/notes")
  (setq blog-dir "~/Workspace/website/blog")
  (require 'ox-publish)
  (setq org-publish-project-alist
  	  `(
  		("org-notes"
  		 :base-directory "~/org/notes/roam-notes"
  		 :publishing-directory ,website-notes-dir
  		 :recursive t
  		 :publishing-function org-html-publish-to-html
  		 :auto-preamble t
  		 )
	("blog"
	   :base-directory "~/org/blog"
	   :publishing-directory ,blog-dir
	   :recursive t
	   :publishing-function org-html-publish-to-html
	   )
  		))
#+end_src
* Crux
#+begin_src emacs-lisp
  (use-package crux)
#+end_src
* Org web-tools
#+begin_src emacs-lisp
(use-package org-web-tools)
#+end_src
* Org-pandoc-import
#+begin_src emacs-lisp
(use-package org-pandoc-import
  :straight (:host github
             :repo "tecosaur/org-pandoc-import"
             :files ("*.el" "filters" "preprocessors")))
#+end_src
* Org-glossary
#+begin_src emacs-lisp
(use-package org-glossary
  :straight (:host github :repo "tecosaur/org-glossary"))
#+end_src
* Ox-pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc)
#+end_src
* Org-clock-csv
#+begin_src emacs-lisp
  (use-package org-clock-csv)
#+end_src
* Lexic
#+begin_src emacs-lisp
(use-package lexic)
#+end_src
* String inflection
#+begin_src emacs-lisp
	(use-package string-inflection)
#+end_src
* Polymode
#+begin_src emacs-lisp
  (use-package poly-markdown
  :ensure t)
  ;; (use-package poly-org
  ;; :ensure t)
#+end_src
* Keycast
#+begin_src emacs-lisp
  (defun +toggle-keycast()
	(interactive)
	(if (member '("" keycast-mode-line " ") global-mode-string)
		(progn (setq global-mode-string (delete '("" keycast-mode-line " ") global-mode-string))
			   (remove-hook 'pre-command-hook 'keycast--update)
			   (message "Keycast OFF"))
	  (add-to-list 'global-mode-string '("" keycast-mode-line " "))
	  (add-hook 'pre-command-hook 'keycast--update t)
	  (message "Keycast ON")))
  (use-package keycast
	:bind ("C-c t k" . +toggle-keycast))
#+end_src
* Elfeed
#+begin_src emacs-lisp
(use-package elfeed)
(use-package elfeed-goodies)
(use-package elfeed-org)
#+end_src
* Combobulate
#+begin_src emacs-lisp
  ;; `M-x combobulate' (default: `C-c o o') to start using Combobulate
  ;; (use-package treesit
  ;;   :straight nil
  ;;   :preface
  ;;   (defun mp-setup-install-grammars ()
  ;;     "Install Tree-sitter grammars if they are absent."
  ;;     (interactive)
  ;;     (dolist (grammar
  ;;              '((css "https://github.com/tree-sitter/tree-sitter-css")
  ;;                (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
  ;;                (python "https://github.com/tree-sitter/tree-sitter-python")
  ;;                (rust "https://github.com/tree-sitter/tree-sitter-rust")
  ;;                (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
  ;;                (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
  ;;       (add-to-list 'treesit-language-source-alist grammar)
  ;;       ;; Only install `grammar' if we don't already have it
  ;;       ;; installed. However, if you want to *update* a grammar then
  ;;       ;; this obviously prevents that from happening.
  ;;       (unless (treesit-language-available-p (car grammar))
  ;;         (treesit-install-language-grammar (car grammar)))))

  ;;   ;; Optional, but recommended. Tree-sitter enabled major modes are
  ;;   ;; distinct from their ordinary counterparts.
  ;;   ;;
  ;;   ;; You can remap major modes with `major-mode-remap-alist'. Note
  ;;   ;; that this does *not* extend to hooks! Make sure you migrate them
  ;;   ;; also
  ;;   (dolist (mapping '((python-mode . python-ts-mode)
  ;;                      (css-mode . css-ts-mode)
  ;;                      (typescript-mode . tsx-ts-mode)
  ;;                      (js-mode . js-ts-mode)
  ;;                      (css-mode . css-ts-mode)
  ;;                      (yaml-mode . yaml-ts-mode)))
  ;;     (add-to-list 'major-mode-remap-alist mapping))

  ;;   :config
  ;;   (mp-setup-install-grammars)
  ;;   )
  ;;   ;; Do not forget to customize Combobulate to your liking:
  ;;   ;;
  ;;   ;;  M-x customize-group RET combobulate RET
  ;;   ;;
  ;;   (use-package combobulate
  ;; 	:straight (combobulate
  ;; 			   :type git
  ;; 			   :host github
  ;; 			   :repo "mickeynp/combobulate"
  ;; 			   )
  ;;     :preface
  ;;     ;; You can customize Combobulate's key prefix here.
  ;;     ;; Note that you may have to restart Emacs for this to take effect!
  ;;     (setq combobulate-key-prefix "C-c o")

  ;;     ;; Optional, but recommended.
  ;;     ;;
  ;;     ;; You can manually enable Combobulate with `M-x
  ;;     ;; combobulate-mode'.
  ;;     :hook ((python-ts-mode . combobulate-mode)
  ;;            (js-ts-mode . combobulate-mode)
  ;;            (css-ts-mode . combobulate-mode)
  ;;            (yaml-ts-mode . combobulate-mode)
  ;;            (typescript-ts-mode . combobulate-mode)
  ;;            (tsx-ts-mode . combobulate-mode))
  ;;     ;; Amend this to the directory where you keep Combobulate's source
  ;;     ;; code.
  ;; )
#+end_src
* EditorConfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src
* Citproc
#+begin_src emacs-lisp
  (use-package citeproc)
#+end_src
* Outshine
#+begin_src emacs-lisp
  (use-package outshine)
#+end_src
* Mu4e
#+begin_src emacs-lisp
  (use-package mu4e-alert)
  (require 'mu4e)
  (setq mu4e-context-policy 'ask-if-none
  	  mu4e-compose-context-policy 'always-ask)
  (let ((context (make-mu4e-context
  				:name "Personal"
  				:enter-func
  				(lambda () (mu4e-message "Switched to Personal"))
  				:leave-func
  				(lambda () (progn (setq +mu4e-personal-addresses nil)
  								  (mu4e-clear-caches)))
  				:match-func
  				(lambda (msg)
  				  (when msg
  					(string-prefix-p (format "/Personal" )
  									 (mu4e-message-field msg :maildir) t)))
  				:vars
  				'((mu4e-sent-folder       . "/gmail/[Gmail]/Sent Mail")
  				  (mu4e-drafts-folder     . "/gmail/[Gmail]/Drafts")
  				  (mu4e-trash-folder      . "/gmail/[Gmail]/Trash")
  				  (mu4e-refile-folder     . "/gmail/[Gmail]/All Mail")
  				  (user-mail-address     . "a3madkour@gmail.com")
  				  (user-full-name     . "Abdelrahman Madkour")
  				  (smtpmail-smtp-server . "smtp.gmail.com")
  				  (smtpmail-stream-type . starttls)
  				  (smtpmail-smtp-service . 587)
  				  (smtpmail-smtp-user     . "a3madkour@gmail.com"))
  				)))
    (add-to-list 'mu4e-contexts context))
  ;;(add-to-list 'mu4e-user-mail-address-list "a3madkour@gmail.com"))


  (let ((context (make-mu4e-context
  				:name "Work"
  				:enter-func
  				(lambda () (mu4e-message "Switched to Work"))
  				:leave-func
  				(lambda () (progn (setq +mu4e-personal-addresses nil)
  								  (mu4e-clear-caches)))
  				:match-func
  				(lambda (msg)
  				  (when msg
  					(string-prefix-p (format "/Work" )
  									 (mu4e-message-field msg :maildir) t)))
  				:vars
  				'((mu4e-sent-folder       . "/work/Sent")
  				  (mu4e-drafts-folder     . "/work/Drafts")
  				  (mu4e-trash-folder      . "/work/Trash")
  				  (mu4e-refile-folder     . "/work/Archive")
  				  (user-mail-address     . "madkour.a@northeastern.edu")
  				  (user-full-name     . "Abdelrahman Madkour")
  				  (smtpmail-smtp-server . "smtp.office365.com")
  				  (smtpmail-stream-type . starttls)
  				  (smtpmail-smtp-service . 1025)
  				  (smtpmail-smtp-user     . "madkour.a@northeastern.edu"))
  				)))
    (add-to-list 'mu4e-contexts context))
  ;;(add-to-list 'mu4e-user-mail-address-list "a3madkour@gmail.com"))

  ;; ;; refresh mbsync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/.mail")
  ;; use pass to store passwords
  ;; file auth looks for is ~/.password-store/<smtp.host.tld>:<port>/<name>
  (auth-source-pass-enable)
  (setq auth-sources '(password-store))
  (setq auth-source-debug t)
  (setq auth-source-do-cache nil)
  ;; no reply to self
  (setq mu4e-compose-dont-reply-to-self t)
  (setq mu4e-compose-keep-self-cc nil)
  ;; moving messages renames files to avoid errors
  (setq mu4e-change-filenames-when-moving t)
  ;; Configure the function to use for sending mail
  (setq message-send-mail-function 'smtpmail-send-it)
  ;; (setq smtpmail-stream-type 'starttls)
  ;; (setq smtpmail-default-smtp-server "smtp.gmail.com")
  ;; (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587)
  (setq smtpmail-debug-info t)
  ;; Display options
  (setq mu4e-view-show-images t)
  (setq mu4e-view-show-addresses 't)
  ;; Composing mail
  (setq mu4e-compose-dont-reply-to-self t)
  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
  ;; Don't ask for a 'context' upon opening mu4e
  (setq mu4e-context-policy 'pick-first)
  ;; Don't ask to quit... why is this the default?
  (setq mu4e-confirm-quit nil)
#+end_src
* Dape
Debuging adapter protocol for emacs
#+begin_src emacs-lisp
(use-package dape
  ;; To use window configuration like gud (gdb-mi)
  :init
  (setq dape-buffer-window-arrangement 'gud)

  :config
  ;; Info buffers to the right
  (setq dape-buffer-window-arrangement 'right)

  ;; To not display info and/or buffers on startup
  (remove-hook 'dape-on-start-hooks 'dape-info)
  (remove-hook 'dape-on-start-hooks 'dape-repl)

  ;; To display info and/or repl buffers on stopped
  (add-hook 'dape-on-stopped-hooks 'dape-info)
  (add-hook 'dape-on-stopped-hooks 'dape-repl)

  ;; By default dape uses gdb keybinding prefix
  ;; If you do not want to use any prefix, set it to nil.
  ;; (setq dape-key-prefix "\C-x\C-a")
  (setq dape-key-prefix 'nil)

  ;; Kill compile buffer on build success
  (add-hook 'dape-compile-compile-hooks 'kill-buffer)

  ;; Save buffers on startup, useful for interpreted languages
  (add-hook 'dape-on-start-hooks
            (defun dape--save-on-start ()
              (save-some-buffers t t)))

  ;; Projectile users
  (setq dape-cwd-fn 'projectile-project-root)
  )
#+end_src
* Themes
#+begin_src emacs-lisp
  (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
		  doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-molokai t)

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)
	;; Enable custom neotree theme (all-the-icons must be installed!)
	(doom-themes-neotree-config)
	;; or for treemacs users
	;; (setq doom-themes-treemacs-theme "doom-molokai") ; use "doom-colors" for less minimal icon theme
	(doom-themes-treemacs-config)
	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config))
#+end_src
* My functions
#+NAME: my_funcs
#+begin_src emacs-lisp
  (defun a3madkour/store-region-lines-to-register()
    (interactive)
    (let* ((start (line-number-at-pos (region-beginning)))
		 (end (line-number-at-pos (region-end))))
	(set-register 1 (format " :lines %d-%d" start end))))

  (defun a3madkour/persp-org-roam-dailies-go-to-today ()
    (save-excursion
  	(org-roam-dailies-goto-today)
  	(buffer-file-name)))

  (defun a3madkour/add-transclusion-from-link (&optional arg)
    (interactive "P")
    (let* ((
  		  auto-transclude-p (if (or (not arg) (numberp arg)) org-transclusion-mode
  							  ;; if `universal-argument' is passed,
  							  ;; reverse nil/t when
                                (if org-transclusion-mode nil t))))
  	(insert (format "#+transclude: "))
  	(org-insert-link)
  	(when (and (numberp arg)
                 (> arg 0)
                 (<= arg 9))
        (end-of-line)
        (insert (format " :level %d" arg)))
      (when auto-transclude-p (org-transclusion-add))))


  (defun a3madkour/make-project (&optional dir)
    (interactive)
    (let* ((dir-path (if dir (read-directory-name "Select Project Directory" dir) (read-directory-name "Select Project Directory") ))
      	 )
  	(message dir-path)
  	(projectile-add-known-project dir-path)
      (magit-init dir-path)
      (make-empty-file (concat dir-path "/README.org"))))


  (defun a3madkour/make-ws-project ()
    (interactive)
    (let ((dir-path "~/Workspace/"))
      (a3madkour/make-project dir-path)
      ))



#+end_src
** Adapted from doom
#+begin_src emacs-lisp
	;;;###autoload
	(defun +default/insert-file-path (arg)
	  "Insert the file name (absolute path if prefix ARG).
	If `buffer-file-name' isn't set, uses `default-directory'."
	  (interactive "P")
	  (let ((path (or buffer-file-name default-directory)))
		(insert
		 (if arg
			 (abbreviate-file-name path)
		   (file-name-nondirectory path)))))
	;;;###autoload
(defun +default/insert-all-path (arg)
  (interactive "P")
    (+default/insert-file-path 1))
#+end_src

* Keybindings
#+begin_src emacs-lisp
(general-define-key
 :states '(normal motion visual insert)
 :keymaps 'override
 :prefix general-leader
 :non-normal-prefix general-leader-alt

 ;; Top level functions

 ;;consult has to have its own bind because fuck you
 "/" 'consult-ripgrep
 ";" 'deft
 ":" 'project-find-file
 "." 'find-file
 "," 'consult-recent-file
 "TAB"
 '(perspective-map :which-key "perspective map")
 "q"
 '(save-buffers-kill-terminal :which-key "quit emacs")
 "j"
 '(jump-to-register :which-key "registers")
 "x" 'org-capture
 "a" 'embark-act

 ;; Defaults and debugging
 "d"
 '(nil  :which-key "defaults")
 "dP"
 '((lambda () (interactive) (persp-state-load "~/default-persp"))
   :which-key "load default persp")
 "dd"
 '(dape :which-key "dape run")
 "db"
 '(dape-breakpoint-toggle :which-key "dape breakpoint")
 "dn"
 '(dape-next :which-key "dape next")
 "ds"
 '(dape-step-in :which-key "dape step in")
 "do"
 '(dape-step-out :which-key "dape step out")
 "dc"
 '(dape-continue :which-key "dape continue")
 "dr"
 '(dape-restart :which-key "dape restart")
 "dq"
 '(dape-quit :which-key "dape quit")
 "dp"
 '(dape-pause :which-key "dape pause")
 "dR"
 '(dape-repl :which-key "dape repl")
 "dx"
 '(dape-evaluate-expression :which-key "dape evaluate expression")
 "dm"
 '(dape-read-memory :which-key "dape read bytes at memory address")
 "dB"
 '(dape-breakpoint-remove-all :which-key "dape remove all breakpoints")
 "de"
 '(dape-breakpoint-expression :which-key "dape breakpoints expression")
 ;; Quit
 "q"
 '(nil :which-key "quit")
 "qq"
 '(save-buffers-kill-terminal :which-key "quit emacs")
 ;; Buffers
 "b"
 '(nil :which-key "buffer")
 "bb"
 '(consult-buffer :which-key "switch buffers")
 "bd"
 '(kill-this-buffer :which-key "delete buffer")
 "bi"
 '(ibuffer  :which-key "ibuffer")
 "br"
 '(revert-buffer :which-key "revert buffer")

 ;; Files
 "f"
 '(nil :which-key "files")
 "fb"
 '(consult-bookmark :which-key "bookmarks")
 "ff"
 '(find-file :which-key "find file")
 "fd"
 '(dired :which-key "dired")
 "fr"
 '(consult-recent-file :which-key "recent files")
 "fR"
 '(rename-file :which-key "rename file")
 "fs"
 '(save-buffer :which-key "save buffer")
 "fS"
 '(evil-write-all :which-key "save all buffers")

 ;; Emms and email
 "e"
 '(nil :which-key "emms")
 "ee"
 '(emms :which-key "emms launch")
 "ep"
 '(emms-pause :which-key "emms pause")
 "ef"
 '(emms-play-find :which-key "emms play find")
 "em"
 '(mu4e :which-key "mu4e")

 ;; Help/emacs
 "h"
 '(nil :which-key "help/emacs")

 "hv"
 '(describe-variable :which-key "des. variable")
 "hb"
 '(describe-bindings :which-key "des. bindings")
 "hM"
 '(describe-mode :which-key "des. mode")
 "hc"
 '(describe-char :which-key "des. character")
 "hf"
 '(describe-function :which-key "des. func")
 "hF"
 '(describe-face :which-key "des. face")
 "hk"
 '(describe-key :which-key "des. key")
 "hi"
 '(info :which-key "info")

 ;; Git
 "g"
 '(nil :which-key "magit")
 "gg"
 '(magit-status :which-key "magit status")

 ;; Open
 "ot"
 '(vterm-other-window :which-key "Open vterm in another window")
 "oT"
 '(vterm :which-key "Open vterm in the same window")
 "oa"
 '(org-agenda :which-key "org-agenda")

 ;; Toggles
 "t"
 '(nil :which-key "toggles")
 "tt"
 '(toggle-truncate-lines :which-key "truncate lines")
 "tv"
 '(visual-line-mode :which-key "visual line mode")
 "tn"
 '(display-line-numbers-mode :which-key "display line numbers")
 "ta"
 '(mixed-pitch-mode :which-key "variable pitch mode")
 "tc"
 '(visual-fill-column-mode :which-key "visual fill column mode")
 "ty"
 '(load-theme :which-key "load theme")
 "tR"
 '(read-only-mode :which-key "read only mode")
 "tI"
 '(toggle-input-method :which-key "toggle input method")
 "tr"
 '(display-fill-column-indicator-mode :which-key "fill column indicator")
 "tm"
 '(hide-mode-line-mode :which-key "hide modeline mode")
 "tk"
 '(+toggle-keycast :which-key "toggle keycast")

 ;;Search and store
 "s"
 '(nil :which-key "Search and store")
 "sb"
 '(consult-line :which-key "search buffer")
 "sd"
 '(consult-dash :which-key "search docsets")
 "sl"
 '(org-store-link :which-key "org-store-link")
 "sr"
 '(a3madkour/store-region-lines-to-register :which-key "store-region-to-register 1")
 "sf"
 '(org-ql-find :which-key "org-ql-find")
 "sa"
 '(org-ql-find-in-agenda :which-key "org-ql in agenda")
 "ss"
 '(org-ql-search :which-key "org-ql search")
 ;; org ql views
 "v"
 '(nil :which-key "ql views")
 "vv"
 '(org-ql-view :which-key "org ql views")
 "vs"
 '(org-ql-view-sidebar :which-key "org ql view sidebar")
 ;; Windows
 "w"
 '(nil :which-key "window")
 ;; "wm" '(jib/toggle-maximize-buffer :which-key "maximize buffer")
 "wN"
 '(make-frame :which-key "make frame")
 "wd"
 '(evil-window-delete :which-key "delete window")
 "ws"
 '(split-window-vertically :which-key "split below")
 "wv"
 '(split-window-horizontally :which-key "split right")
 "wl"
 '(evil-window-right :which-key "evil-window-right")
 "wh"
 '(evil-window-left :which-key "evil-window-left")
 "wj"
 '(evil-window-down :which-key "evil-window-down")
 "wk"
 '(evil-window-up :which-key "evil-window-up")
 "wz"
 '(text-scale-adjust :which-key "text zoom")

 ;;org-roam
 "r"
 '(nil :which-key "org-roam")
 "rD" #'org-roam-demote-entire-buffer
 "rf" #'org-roam-node-find
 "rt"
 '(org-roam-dailies-goto-today :which-key "Goto today")
 "rr" #'org-roam-ref-find
 "rt"
 '(org-roam-dailies-goto-today :which-key "Goto today")
 "rg" #'org-roam-graph
 "ri" #'org-roam-node-insert
 "rI" #'org-id-get-create
 "rm" #'org-roam-buffer-toggle
 "rM" #'org-roam-buffer-display-dedicated
 "rn" #'org-roam-capture
 "rF" #'org-roam-refile
 "rR" #'org-roam-link-replace-all
 "rd"
 '(nil :which-key "by date")
 "rdb"
 '(org-roam-dailies-goto-previous-note :which-key "Goto previous note")
 "rdd"
 '(org-roam-dailies-goto-date :which-key "Goto date")
 "rdD"
 '(org-roam-dailies-capture-date :which-key "Capture date")
 "rdf"
 '(org-roam-dailies-goto-next-note :which-key "Goto next note")
 "rdm"
 '(org-roam-dailies-goto-tomorrow :which-key "Goto tomorrow")
 "rdM"
 '(org-roam-dailies-capture-tomorrow :which-key "Capture tomorrow")
 "rdn"
 '(org-roam-dailies-capture-today :which-key "Capture today")
 "rdt"
 '(org-roam-dailies-goto-today :which-key "Goto today")
 "rdT"
 '(org-roam-dailies-capture-today :which-key "Capture today")
 "rdy"
 '(org-roam-dailies-goto-yesterday :which-key "Goto yesterday")
 "rdY"
 '(org-roam-dailies-capture-yesterday :which-key "Capture yesterday")
 "rd-"
 '(org-roam-dailies-find-directory :which-key "Find directory")
 "ro"
 '(nil :which-key "node properties")
 "roa" #'org-roam-alias-add
 "roA" #'org-roam-alias-remove
 "rot" #'org-roam-tag-add
 "roT" #'org-roam-tag-remove
 "ror" #'org-roam-ref-add
 "roR" #'org-roam-ref-remove
 ;; Projectile
 "p"
 '(nil :which-key "projectile")
 "pr"
 '(projectile-recentf :which-key "projectile-recentf")
 "p&"
 '(projectile-run-async-shell-command-in-root :which-key "projectile-run-async-shell-command-in-root")
 "p!"
 '(projectile-run-shell-command-in-root :which-key "projectile-run-shell-command-in-root")
 "pd"
 '(projectile-remove-known-project :which-key "projectile-remove-known-project")
 "pb"
 '(projectile-switch-to-buffer :which-key "projectile-switch-to-buffer")
 "pa"
 '(projectile-add-known-project :which-key "projectile-add-known-project")
 "ps"
 '(projectile-save-project-buffers :which-key "projectile-save-project-buffers")
 "pg"
 '(projectile-configure-project :which-key "projectile-configure-project")
 "pi"
 '(projectile-invalidate-cache :which-key "projectile-invalidate-cache")
 "po"
 '(projectile-find-other-file :which-key "projectile-find-other-file")
 "pe"
 '(projectile-edit-dir-locals :which-key "projectile-edit-dir-locals")
 "pc"
 '(projectile-compile-project :which-key "projectile-compile-project")
 "pp"
 '(projectile-switch-project :which-key "projectile-switch-project")
 "pT"
 '(projectile-test-project :which-key "projectile-test-project")
 "pR"
 '(projectile-run-project :which-key "projectile-run-project")
 "pk"
 '(projectile-kill-buffers :which-key "projectile-kill-buffers")
 "pn"
 '(a3madkour/make-project :which-key "make-project")
 "pw"
 '(a3madkour/make-ws-project :which-key "make-ws-project")
 "pv"
 '(projectile-run-vterm-other-window :which-key "projectile-run-vterm-other-window")
 "SPC"
 '(projectile-find-file :which-key "projectile-find-file")

 ;;citar
 "z"
 '(nil :which-key "citation")
 "zo"
 '(citar-open :which-key "citar-open")
 "zi"
 '(org-cite-insert :which-key "org-cite-insert")
 "ze"
 '(citar-insert-edit :which-key "Edit citation")
 "zd"
 '(citar-dwim :which-key "citar-dwim")

 ;;notes stuff 'n'
 "n"
 '(nil :which-key "notes")
 "ne"
 '(org-noter :which-key "Org Noter")
 ;; journal
 "nj"
 '(nil :which-key "journal")
 "njj"
 '(org-journal-new-entry :which-key "new journal entry")
 "njJ"
 '(org-journal-new-scheduled-entry :which-key "new scheduled journal entry")


 ;;insert
 "i"
 '(nil :which-key "insert")
 "if"
 '(+default/insert-file-path :which-key "Current file name")
 "iF"
 '(+default/insert-all-path :which-key "Current file name")
 "ir"
 '(consult-register :which-key "Register")
 "ic"
 '(org-chef-insert-recipe :which-key "Org Chef Insert Recipe")
 "is"
 '(yas-insert-snippet :which-key "Snippet")
 "iu"
 '(insert-char :which-key "Unicode")
 "il"
 '(org-insert-link :which-key "Org-insert-link")
 "it"
 '(a3madkour/add-transclusion-from-link :which-key "Insert transclude based on link")

 ;;code/lsp
 "c"
 '(nil :which-key "code")
 "cc" 'compile
 "cC" 'recompile
 "cd" '+lookup/definition
 "cD" '+lookup/references
 "ce" 'eval-buffer
 "cf"
 '(format-all-buffer :which-key "format buffer")
 "ci" '+lookup/implementations
 "ck" '+lookup/documentation
 "ct" '+lookup/type-definition
 "cw" 'delete-trailing-whitespace
 "cm" 'consult-imenu


 ;;langtools
 "l"
 '(nil :which-key "Language Tool")
 "lb" #'langtool-check
 "lc" #'langtool-corrct-buffer
 "lm" #'langtool-show-message-at-point
 "ld" #'langtool-check-done
 "ln" #'langtool-goto-next-eror
 "lp" #'langtool-goto-previous-error


 ) ;; End SPC prefix block

  ;; All-mode keymaps
(general-def
  :keymaps 'override

  ;; Emacs --------
  ;; "M-x" 'M-x
  "C-S-B" 'consult-switch-buffer

  ;; Remapping normal help features to use Consult version
  "C-h v" 'describe-variable
  "C-h o" 'describe-symbol
  "C-h f" 'describe-function
  "C-h F" 'describe-face

  ;; Editing ------
  "M-v" 'simpleclip-paste
  "M-V" 'evil-paste-after ;; shift-paste uses the internal clipboard
  "M-c" 'simpleclip-copy
  "M-u" 'capitalize-dwim ;; Default is upcase-dwim
  "M-U" 'upcase-dwim ;; M-S-u (switch upcase and capitalize)

  ;; Utility ------
  "C-c c" 'org-capture
  "C-;" 'embark-act
  "C-=" 'embark-become
  "C-c C-u" 'string-inflection-all-cycle
  "C-c a" 'org-agenda
  "C-c d" 'consult-dash
  "C-s" 'consult-line ;; Large files will use grep (faster)
  "C-c p" 'mw-thesaurus-lookup-at-point ;; Look up word at point
  "s-\"" 'ispell-word ;; that's super-shift-'
  "C-'" 'avy-goto-char-2

  "C-M-x" 'ispell-complete-word
  "C-M-q" 'indent-pp-sexp)

(general-def :keymaps 'emacs "C-w C-q" 'kill-this-buffer)

  ;; Non-insert mode keymaps
(general-def
  :states '(normal visual motion)
  "u" 'undo
  "|"
  '(lambda () (interactive) (org-agenda nil "k")) ;; Opens my n custom org-super-agenda view
  "C-|"
  '(lambda () (interactive) (org-agenda nil "j")) ;; Opens my m custom org-super-agenda view
  "gc"
  '(evilnc-comment-operator :which-key "commentator")
  "gD"
  '(xref-find-references :which-key "find references"))
(general-def
  :prefix "["
  :states '(normal visual motion)
  "c"
  '(+evil/previous-comment :which-key "previous comment")
  "e"
  '(previous-error :which-key "previous error")
  "F"
  '(+evil/previous-frame :which-key "previous frame")
  "h"
  '(outline-previous-visible-heading :which-key "previous heading")
  "m"
  '(+evil/previous-beginning-of-method :which-key "previous method")
  "M"
  '(+evil/previous-end-of-method :which-key "previous end method")
  "o"
  '(+evil/insert-newline-below :which-key "insert newline below"))
(general-def
  :prefix "]"
  :states '(normal visual motion)
  "c"
  '(+evil/next-comment :which-key "next comment")
  "e"
  '(next-error :which-key "next error")
  "F"
  '(+evil/next-frame :which-key "next frame")
  "h"
  '(outline-next-visible-heading :which-key "next heading")
  "m"
  '(+evil/next-beginning-of-method :which-key "next method")
  "M"
  '(+evil/next-end-of-method :which-key "next end method")
  "o"
  '(+evil/insert-newline-above :which-key "insert newline below"))
(general-def
  :prefix "gs"
  :states '(normal visual motion)
  "s"
  '(evil-avy-goto-char-2 :which-key "avy char 2")
  "/"
  '(evil-avy-goto-char-timer :which-key "avy timer")
  "SPC"
  '(evil-avy-goto-char-timer :which-key "avy timer"))


  ;; Insert keymaps
  ;; Many of these are emulating standard Emacs bindings in Evil insert mode, such as C-a, or C-e.
(general-def
  :states '(insert)
  "C-a" 'evil-beginning-of-visual-line
  "C-e" 'evil-end-of-visual-line
  "C-S-a" 'evil-beginning-of-line
  "C-S-e" 'evil-end-of-line
  "C-n" 'evil-next-visual-line
  "C-p" 'evil-previous-visual-line)


(general-def
  :states 'normal
  :keymaps 'org-mode-map
  "t" 'org-todo
  "K" 'org-shiftup

  "J" 'org-shiftdown
  "TAB" 'org-cycle)

(general-def
  :states 'insert
  :keymaps 'org-mode-map
  "C-o" 'evil-org-open-above)

(general-def
  :states '(normal insert emacs)
  :keymaps 'org-mode-map
  "M-[" 'org-metaleft
  "M-]" 'org-metaright
  "C-M-=" 'ap/org-count-words
  "s-r" 'org-refile
  "M-k" 'org-insert-link)

  ;; Org-src - when editing an org source block
(general-def
  :prefix ","
  :states 'normal
  :keymaps 'org-src-mode-map
  "b"
  '(nil :which-key "org src")
  "bc" 'org-edit-src-abort
  "bb" 'org-edit-src-exit)

(general-define-key
 :prefix "SPC m"
 :states 'motion
 :keymaps '(org-mode-map) ;; Available in org mode, org agenda
 "" nil
 "A"
 '(org-archive-subtree-default :which-key "org-archive")
 "a"
 '(org-agenda :which-key "org agenda")
 "6"
 '(org-sort :which-key "sort")
 "c"
 '(org-capture :which-key "org-capture")
 "s"
 '(org-schedule :which-key "schedule")
 "d"
 '(org-deadline :which-key "deadline")
 "g"
 '(org-goto :which-key "goto heading")
 "t"
 '(a3madkour/add-scheduled-todo :which-key "add scheduled todo")
 "T"
 '(a3madkour/add-scheduled-headline-todo :which-key "add new datetree deadline todo")
 "p"
 '(org-set-property :which-key "set property")
 "e"
 '(org-export-dispatch :which-key "export org")
 "B"
 '(org-toggle-narrow-to-subtree :which-key "toggle narrow to subtree")
 "H"
 '(org-html-convert-region-to-html :which-key "convert region to html")
 "r" 'a3madkour/refile-and-schedule

 "1"
 '(org-toggle-link-display :which-key "toggle link display")
 "2"
 '(org-toggle-inline-images :which-key "toggle images")

 ;; org-babel
 "b"
 '(nil :which-key "babel")
 "bt"
 '(org-babel-tangle :which-key "org-babel-tangle")
 "bb"
 '(org-edit-special :which-key "org-edit-special")
 "bc"
 '(org-edit-src-abort :which-key "org-edit-src-abort")
 "bk"
 '(org-babel-remove-result-one-or-many :which-key "org-babel-remove-result-one-or-many")

 ;; insert
 "i"
 '(nil :which-key "insert")

 "it"
 '(nil :which-key "tables")
 "itt"
 '(org-table-create :which-key "create table")
 "itl"
 '(org-table-insert-hline :which-key "table hline")
 "il"
 '(org-insert-link :which-key "org-insert-link")

 "ib"
 '(org-books-add-url :which-key "Book url")

 "is"
 '(nil :which-key "insert stamp")
 "iss"
 '((lambda ()
	 (interactive)
	 (call-interactively (org-time-stamp-inactive)))
   :which-key "org-time-stamp-inactive")
 "isS"
 '((lambda ()
	 (interactive)
	 (call-interactively (org-time-stamp nil)))
   :which-key "org-time-stamp")

 ;; clocking
 "c"
 '(nil :which-key "clocking")
 "ci"
 '(org-clock-in :which-key "clock in")
 "co"
 '(org-clock-out :which-key "clock out")
 "cj"
 '(org-clock-goto :which-key "jump to clock")

 ;; transclusion stuff
 "l"
 '(nil :which-key "transclusion stuff")
 "ll"
 '(org-transclusion-mode :which-key "org-transclusion mode")
 "li"
 '(a3madkour/add-transclusion-from-link :which-key "add-transclusion-from-link")
 "lr"
 '(org-transclusion-remove :which-key "org-transclusion remove")
 "la"
 '(org-transclusion-add :which-key "org-transclusion add")
 ;;TODO make this open with org-open-atpoint
 "lo"
 '(org-transclusion-open-source :which-key "org-transclusion open source")
 "lO"
 '(org-transclusion-move-to-source :which-key "org-transclusion move to source")
 "ld"
 '(org-transclusion-detach :which-key "org-transclusion detach")
 "le"
 '(org-transclusion-live-sync-start :which-key "org-transclusion live sync")
 "lg"
 '(org-transclusion-refresh :which-key "org-transclusion refresh")
 "lm"
 '(org-transclusion-make-from-link :which-key "org-transclusion make from link"))


  ;; Org-agenda
  ;;TODO figure out a better key than , for these mappings
(general-define-key
 :prefix ","
 :states 'motion
 :keymaps '(org-agenda-mode-map) ;; Available in org mode, org agenda
 "" nil
 "a"
 '(org-agenda :which-key "org agenda")
 "c"
 '(org-capture :which-key "org-capture")
 "s"
 '(org-agenda-schedule :which-key "schedule")
 "d"
 '(org-agenda-deadline :which-key "deadline")
 "t"
 '(org-agenda-set-tags :which-key "set tags")
 ;; clocking
 "c"
 '(nil :which-key "clocking")
 "ci"
 '(org-agenda-clock-in :which-key "clock in")
 "co"
 '(org-agenda-clock-out :which-key "clock out")
 "cj"
 '(org-clock-goto :which-key "jump to clock"))
  ;; Org-agenda
(general-define-key
 :states 'motion
 :keymaps '(org-agenda-mode-map) ;; Available in org mode, org agenda
 "cp"
 '(org-pomodoro :which-key "Start or stop pomodoro"))

(evil-define-key 'motion org-agenda-mode-map
  (kbd "f")
  'org-agenda-later
  (kbd "b")
  'org-agenda-earlier)


(general-define-key
 :prefix "SPC e"
 :states 'motion
 :keymaps '(emms-playlist-mode-map) ;; Available in org mode, org agenda
 "" nil
 "l"
 '(emms-toggle-repeat-playlist :which-key "emms-toggle-repeat-playlist")
 "p"
 '(emms-insert-playlist :which-key "emms-insert-playlist")
 "i"
 '(emms-insert-file :which-key "'emms-insert-file")
 "t"
 '(emms-toggle-repeat-track :which-key "emms-toggle-repeat-track")
 "s"
 '(emms-playlist-save :which-key "emms-playlist-save")
 "m"
 '(emms-shuffle :which-key "emms-shuffle"))

  ;; Help/emacs


(general-define-key
 :states 'normal
 :keymaps 'pdf-view-mode-map
 "i"
 '(org-noter-insert-note :which-key "org-noter-insert-note")
 "s"
 '(a3madkour/org-noter-insert-subheading-note :which-key "org-noter-insert-note subheading"))

(general-define-key
 :states 'motion
 :keymaps 'outshine-mode-map
 "TAB"
 '(outshine-cycle :which-key "outshine-cycle"))

#+end_src

* Plz
#+begin_src emacs-lisp
(use-package plz)
#+end_src
* Final setup
This is for the last command I want to run when emacs load.
** Persp load
#+begin_src emacs-lisp
(persp-state-load "~/default-persp")
#+end_src
