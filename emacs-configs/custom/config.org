#+TITLE: My Emacs Configuration
:PROPERTIES:
#+author: Abdelrahman Madkour
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args :tangle no :results silent
:END:
* Early Init
#+begin_src emacs-lisp :tangle "./early-init.el"
  (setq gc-cons-percentage 0.6)
  (setq native-comp-async-report-warnings-errors 'silent) ;; native-comp warning
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  (setq idle-update-delay 1.0)
  ;; Disabling bidi (bidirectional editing stuff)
  (setq-default bidi-display-reordering 'left-to-right
				bidi-paragraph-direction 'left-to-right)
  ;; (setq bidi-inhibit-bpa t)  ; emacs 27 only - disables bidirectional parenthesis
  ;;
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)
  (setq fast-but-imprecise-scrolling t)
  (setq inhibit-compacting-font-caches t)

  ;; Window configuration
  (setq frame-inhibit-implied-resize t) ;; Supposed to hasten startup
#+end_src
* Straight
#+name: config.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
		 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
		(bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
		  (url-retrieve-synchronously
		   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
		   'silent 'inhibit-cookies)
		(goto-char (point-max))
		(eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
* Compat
Need this until ELPA updates more regularly
#+begin_src emacs-lisp
(straight-use-package '(compat :host github :repo "emacs-compat/compat"))
#+end_src
* GCMH
#+begin_src emacs-lisp
  (use-package gcmh
	:diminish gcmh-mode
	:config
	(setq gcmh-idle-delay 5
		  gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
	(gcmh-mode 1))

  (add-hook 'emacs-startup-hook
			(lambda ()
			  (setq gc-cons-percentage 0.1))) ;; Default value for `gc-cons-percentage'

  (add-hook 'emacs-startup-hook
			(lambda ()
			  (message "Emacs ready in %s with %d garbage collections."
					   (format "%.2f seconds"
							   (float-time
								(time-subtract after-init-time before-init-time)))
					   gcs-done)))
#+end_src

* General configuration
#+begin_src emacs-lisp
  ;; When emacs asks for "yes" or "no", let "y" or "n" suffice
  ;;stop bothering me about reload things from disk and just do it
  (setq revert-without-query '("pdf"))
  (setq use-short-answers t)
  (setq ns-pop-up-frames nil)
  (setq
   org-roam-notes "~/org/roam-notes"
   org-ref-notes "~/org/ref-notes"
   zot-bib  "~/org/ref-notes/library.bib"
   org-cite-default-bibliography (list zot-bib)
   org-cite-csl-styles-dir "~/Zotero/styles"
   org-cite-global-bibliography (list zot-bib)
   org-roam-dailies-directory "~/org/ResearchJournal"
   org-roam-directory org-roam-notes
   )
  ;;dailies template
  (setq org-roam-dailies-capture-templates
		'(("d" "default" entry
		   "* %?"
		   :target (file+head "%<%Y-%m-%d>.org"
							  "#+title: %<%Y-%m-%d>\n"))))
  ;; Confirm to quit
  (setq confirm-kill-emacs 'yes-or-no-p)

  (add-hook 'text-mode-hook 'visual-line-mode)
  ;; Major mode of new buffers
  (setq initial-major-mode 'org-mode)

  ;;set default font size
  (set-face-attribute 'default nil :height 130)
  ;; WINDOW -----------

  ;; Don't resize the frames in steps; it looks weird, especially in tiling window
  ;; managers, where it can leave unseemly gaps.
  (setq frame-resize-pixelwise t)

  ;; When opening a file (like double click) on Mac, use an existing frame
  (setq ns-pop-up-frames nil)

  (setq isearch-wrap-pause nil)

  ;;supposed to not ask me about git
  (setq vc-follow-symlinks nil)

  ;;make agenda current window
  (setq org-agenda-window-setup 'current-window)
  ;; But do not resize windows pixelwise, this can cause crashes in some cases
  ;; where we resize windows too quickly.
  (setq window-resize-pixelwise nil)

  ;; LINES -----------
  (setq-default truncate-lines t)

  (setq-default tab-width 4)

  (scroll-bar-mode -1)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (line-number-mode)
  (column-number-mode)
  (display-time-mode -1)
  (size-indication-mode 1)
  (frame-parameter nil 'left)

  ;;bookmarks
  (setq bookmark-default-file "~/emacs-configs/custom/bookmarks")
  (bookmark-load bookmark-default-file t)

  (defmacro η (fnc)
	"Return function that ignores its arguments and invokes FNC."
	`(lambda (&rest _rest)
	   (funcall ,fnc)))
  (advice-add 'org-deadline       :after (η #'org-save-all-org-buffers))
  (advice-add 'org-schedule       :after (η #'org-save-all-org-buffers))
  (advice-add 'org-store-log-note :after (η #'org-save-all-org-buffers))
  (advice-add 'org-todo           :after (η #'org-save-all-org-buffers))
#+end_src
* Evil
#+begin_src emacs-lisp
  (use-package evil
	:init
	;; (setq evil-want-keybinding t)
	;; (setq evil-want-fine-undo t)
	;; (setq evil-want-keybinding nil)
	;; (setq evil-want-Y-yank-to-eol t)
	(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
	(setq evil-want-keybinding nil)
	:config

	(evil-set-initial-state 'dashboard-mode 'motion)
	(evil-set-initial-state 'debugger-mode 'motion)
	(evil-set-initial-state 'pdf-view-mode 'motion)
	(evil-set-initial-state 'bufler-list-mode 'emacs)
	(evil-set-initial-state 'inferior-python-mode 'emacs)
	(evil-set-initial-state 'term-mode 'emacs)

	;; ----- Keybindings
	;; I tried using evil-define-key for these. Didn't work.
	;; (define-key evil-motion-state-map "/" 'swiper)
	(define-key evil-window-map "\C-q" 'evil-delete-buffer) ;; Maps C-w C-q to evil-delete-buffer (The first C-w puts you into evil-window-map)
	(define-key evil-window-map "\C-w" 'kill-this-buffer)
	(define-key evil-motion-state-map "\C-u" 'evil-scroll-up) 

	(evil-mode 1))


  (use-package evil-goggles
	:ensure t
	:config
	(evil-goggles-mode)
	)
  ;;other evil packages
  (use-package evil-nerd-commenter
	:after evil
	)
  (use-package evil-surround
	:after evil
	:defer 2
	:config
	(global-evil-surround-mode 1))

  (use-package evil-collection
	:after evil
	:ensure t
	:config
	(evil-collection-init))

  (use-package evil-easymotion
	:config
	(setq avy-background t))

  ;;until combobulate gets on melpa
  (use-package evil-textobj-tree-sitter
	:config
	;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
	(define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
	;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
	(define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))

	;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
	(define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj "attribute.outer"))
	;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
	(define-key evil-inner-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj "attribute.inner"))
	;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
	(define-key evil-outer-text-objects-map "k" (evil-textobj-tree-sitter-get-textobj "block.outer"))
	;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
	(define-key evil-inner-text-objects-map "k" (evil-textobj-tree-sitter-get-textobj "block.inner"))

	;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
	(define-key evil-outer-text-objects-map "v" (evil-textobj-tree-sitter-get-textobj "call.outer"))
	;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
	(define-key evil-inner-text-objects-map "v" (evil-textobj-tree-sitter-get-textobj "call.inner"))

	;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
	(define-key evil-outer-text-objects-map "d" (evil-textobj-tree-sitter-get-textobj "class.outer"))
	;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
	(define-key evil-inner-text-objects-map "d" (evil-textobj-tree-sitter-get-textobj "class.inner"))

	;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
	(define-key evil-outer-text-objects-map "i" (evil-textobj-tree-sitter-get-textobj "conditional.outer"))
	;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
	(define-key evil-inner-text-objects-map "i" (evil-textobj-tree-sitter-get-textobj "conditional.inner"))

	;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
	(define-key evil-outer-text-objects-map "j" (evil-textobj-tree-sitter-get-textobj "loop.outer"))
	;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
	(define-key evil-inner-text-objects-map "j" (evil-textobj-tree-sitter-get-textobj "loop.inner"))

	;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
	(define-key evil-outer-text-objects-map "p" (evil-textobj-tree-sitter-get-textobj "parameter.outer"))
	;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
	(define-key evil-inner-text-objects-map "p" (evil-textobj-tree-sitter-get-textobj "parameter.inner"))

	;; Goto start of next function
	(define-key evil-normal-state-map (kbd "]f") (lambda ()
												   (interactive)
												   (evil-textobj-tree-sitter-goto-textobj "function.outer")))
	;; Goto start of previous function
	(define-key evil-normal-state-map (kbd "[f") (lambda ()
												   (interactive)
												   (evil-textobj-tree-sitter-goto-textobj "function.outer" t)))
	;; Goto end of next function
	(define-key evil-normal-state-map (kbd "]F") (lambda ()
												   (interactive)
												   (evil-textobj-tree-sitter-goto-textobj "function.inner" nil t)))
	;; Goto end of previous function
	(define-key evil-normal-state-map (kbd "[F") (lambda ()
												   (interactive)
												   (evil-textobj-tree-sitter-goto-textobj "function.inner" t t)))
	)
  
  (use-package evil-args)
  (use-package evil-visualstar)
  (use-package evil-quick-diff
	:straight (evil-quick-diff
			   :type git
			   :host github
			   :repo "rgrinberg/evil-quick-diff"
			   )
	:init
	(setq evil-quick-diff-key (kbd "zx"))
	(evil-quick-diff-install))
  ;;(use-package evil-quick-diff
  ;;:init
  ;;(setq evil-quick-diff-key (kbd "zx"))
  ;;(evil-quick-diff-install))
  (use-package exato :ensure t)
  (use-package evil-vimish-fold)
  (use-package evil-escape)
  (use-package evil-numbers)
  (use-package evil-exchange)
  (use-package evil-lion
	:ensure t
	:config
	(evil-lion-mode))
  (use-package evil-indent-plus)
  (use-package evil-embrace)
  (use-package evil-snipe
	:diminish evil-snipe-mode
	:diminish evil-snipe-local-mode
	:after evil
	:config
	(evil-snipe-mode +1))
  (use-package evil-org
	:diminish evil-org-mode
	:after org
	:config
	(add-hook 'org-mode-hook 'evil-org-mode)
	(add-hook 'evil-org-mode-hook
			  (lambda () (evil-org-set-key-theme))))

  (require 'evil-org-agenda)
  (setq org-modules '(org-habit))
  (setq org-habit-graph-column 110)
  (evil-org-agenda-set-keys)
  (eval-after-load 'org
	'(org-load-modules-maybe t))
  (use-package evil-anzu :defer t)
#+end_src
** Unimpared
Adapted from doom-emacs unimpared.el
#+begin_src emacs-lisp
  ;;; editor/evil/autoload/unimpaired.el -*- lexical-binding: t; -*-

  ;; These are ported from vim-unimpaired https://github.com/tpope/vim-unimpaired
  ;; and bound in the :config default module (in +evil-bindings.el).

  ;;
  ;;; Next/Previous commands

  ;;;###autoload
  (defun +evil/next-beginning-of-method (count)
	"Jump to the beginning of the COUNT-th method/function after point."
	(interactive "p")
	(beginning-of-defun (- count)))

  ;;;###autoload
  (defun +evil/previous-beginning-of-method (count)
	"Jump to the beginning of the COUNT-th method/function before point."
	(interactive "p")
	(beginning-of-defun count))

  ;;;###autoload
  (defalias #'+evil/next-end-of-method #'end-of-defun
	"Jump to the end of the COUNT-th method/function after point.")

  ;;;###autoload
  (defun +evil/previous-end-of-method (count)
	"Jump to the end of the COUNT-th method/function before point."
	(interactive "p")
	(end-of-defun (- count)))

  ;;;###autoload
  (defun +evil/next-comment (count)
	"Jump to the beginning of the COUNT-th commented region after point."
	(interactive "p")
	(let ((orig-pt (point)))
	  (require 'newcomment)
	  (dotimes (_ (abs count))
		(cond ((> count 0)
			   (while (and (not (eobp)) (sp-point-in-comment))
				 (forward-line 1))
			   (unless (comment-search-forward (point-max) 'noerror)
				 (goto-char orig-pt)
				 (user-error "No comment after point")))
			  (t
			   (while (and (not (bobp)) (sp-point-in-comment))
				 (forward-line -1))
			   (unless (comment-search-backward nil 'noerror)
				 (goto-char orig-pt)
				 (user-error "No comment before point")))))))

  ;;;###autoload
  (defun +evil/previous-comment (count)
	"Jump to the beginning of the COUNT-th commented region before point."
	(interactive "p")
	(+evil/next-comment (- count)))

  ;;; ] SPC / [ SPC
  ;;;###autoload
  (defun +evil/insert-newline-below (count)
	"Insert COUNT blank line(s) below current line. Does not change modes."
	(interactive "p")
	(dotimes (_ count)
	  (save-excursion (evil-insert-newline-below))))

  ;;;###autoload
  (defun +evil/insert-newline-above (count)
	"Insert COUNT blank line(s) above current line. Does not change modes."
	(interactive "p")
	(dotimes (_ count)
	  (save-excursion (evil-insert-newline-above))))

  ;;; ]t / [t
  ;;;###autoload
  (defun +evil/next-frame (count)
	"Focus next frame."
	(interactive "p")
	(dotimes (_ (abs count))
	  (let ((frame (if (> count 0) (next-frame) (previous-frame))))
		(if (eq frame (selected-frame))
			(user-error "No other frame")
		  (select-frame-set-input-focus frame)))))

  ;;;###autoload
  (defun +evil/previous-frame (count)
	"Focus previous frame."
	(interactive "p")
	(+evil/next-frame (- count)))

  ;;; ]f / [f
  (defun +evil--next-file (n)
	(unless buffer-file-name
	  (user-error "Must be called from a file-visiting buffer"))
	(let* ((directory (file-name-directory buffer-file-name))
		   (filename (file-name-nondirectory buffer-file-name))
		   (files (cl-remove-if #'file-directory-p (doom-glob (file-name-directory buffer-file-name) "[!.]*")))
		   (index (cl-position filename files :test #'file-equal-p)))
	  (when (null index)
		(user-error "Couldn't find this file in current directory"))
	  (let ((index (+ index n)))
		(cond ((>= index (length files))
			   (user-error "No files after this one"))
			  ((< index 0)
			   (user-error "No files before this one"))
			  ((expand-file-name (nth index files) directory))))))

  ;;;###autoload
  (defun +evil/next-file (count)
	"Open file following this one, alphabetically, in the same directory."
	(interactive "p")
	(find-file (+evil--next-file count)))

  ;;;###autoload
  (defun +evil/previous-file (count)
	"Open file preceding this one, alphabetically, in the same directory."
	(interactive "p")
	(find-file (+evil--next-file (- count))))


  ;;
  ;;; Encoding/Decoding

  ;; NOTE For ]x / [x see :lang web
  ;; - `+web:encode-html-entities'
  ;; - `+web:decode-html-entities'

  (defun +evil--encode (beg end fn)
	(save-excursion
	  (goto-char beg)
	  (let* ((end (if (eq evil-this-type 'line) (1- end) end))
			 (text (buffer-substring-no-properties beg end)))
		(delete-region beg end)
		(insert (funcall fn text)))))

  ;;; ]u / [u
  ;;;###autoload (autoload '+evil:url-encode "editor/evil/autoload/unimpaired" nil t)
  (evil-define-operator +evil:url-encode (_count &optional beg end)
	"TODO"
	(interactive "<c><r>")
	(+evil--encode beg end #'url-encode-url))

  ;;;###autoload (autoload '+evil:url-decode "editor/evil/autoload/unimpaired" nil t)
  (evil-define-operator +evil:url-decode (_count &optional beg end)
	"TODO"
	(interactive "<c><r>")
	(+evil--encode beg end #'url-unhex-string))

  ;;; ]y / [y
  ;;;###autoload (autoload '+evil:c-string-encode "editor/evil/autoload/unimpaired" nil t)
  (evil-define-operator +evil:c-string-encode (_count &optional beg end)
	"TODO"
	(interactive "<c><r>")
	(+evil--encode
	 beg end
	 (lambda (text)
	   (replace-regexp-in-string "[\"\\]" (lambda (ch) (concat "\\" ch)) text))))

  ;;;###autoload (autoload '+evil:c-string-decode "editor/evil/autoload/unimpaired" nil t)
  (evil-define-operator +evil:c-string-decode (_count &optional beg end)
	"TODO"
	(interactive "<c><r>")
	(+evil--encode
	 beg end
	 (lambda (text)
	   (replace-regexp-in-string "\\\\[\"\\]" (lambda (str) (substring str 1)) text))))


  ;;
  ;;; Standalone

  ;;; gp
  ;;;###autoload
  (defun +evil/reselect-paste ()
	"Return to visual mode and reselect the last pasted region."
	(interactive)
	(cl-destructuring-bind (_ _ _ beg end &optional _)
		evil-last-paste
	  (evil-visual-make-selection
	   (save-excursion (goto-char beg) (point-marker))
	   end)))
#+end_src
** Textobjects
Adapted from doom emacs textobjects.el
#+begin_src emacs-lisp
  ;;;###autoload (autoload '+evil:whole-buffer-txtobj "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:whole-buffer-txtobj (count &optional _beg _end type)
	"Text object to select the whole buffer."
	(evil-range (point-min) (point-max) type))

  ;;;###autoload (autoload '+evil:defun-txtobj "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:defun-txtobj (count &optional _beg _end type)
	"Text object to select the top-level Lisp form or function definition at
  point."
	(cl-destructuring-bind (beg . end)
		(bounds-of-thing-at-point 'defun)
	  (evil-range beg end type)))

  ;;;###autoload (autoload '+evil:inner-url-txtobj "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:inner-url-txtobj (count &optional _beg _end type)
	"Text object to select the inner url at point.
  This excludes the protocol and querystring."
	(cl-destructuring-bind (beg . end)
		(bounds-of-thing-at-point 'url)
	  (evil-range
	   (save-excursion
		 (goto-char beg)
		 (re-search-forward "://" end t))
	   (save-excursion
		 (goto-char end)
		 (- (if-let (pos (re-search-backward "[?#]" beg t))
				pos
			  end)
			(if (evil-visual-state-p)
				1
			  0)))
	   type)))

  ;;;###autoload (autoload '+evil:outer-url-txtobj "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:outer-url-txtobj (count &optional _beg _end type)
	"Text object to select the whole url at point."
	(cl-destructuring-bind (beg . end)
		(bounds-of-thing-at-point 'url)
	  (evil-range
	   beg (- end (if (evil-visual-state-p) 1 0))
	   type)))

  ;;;###autoload (autoload '+evil:inner-any-quote "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:inner-any-quote (count &optional beg end type)
	"Select the closest inner quote."
	(require 'evil-textobj-anyblock)
	(let ((evil-textobj-anyblock-blocks
		   '(("'" . "'")
			 ("\"" . "\"")
			 ("`" . "`")
			 ("‘" . "’")
			 ("“" . "”"))))
	  (evil-textobj-anyblock--make-textobj beg end type count nil)))

  ;;;###autoload (autoload '+evil:outer-any-quote "editor/evil/autoload/textobjects" nil nil)
  (evil-define-text-object +evil:outer-any-quote (count &optional beg end type)
	"Select the closest outer quote."
	(require 'evil-textobj-anyblock)
	(let ((evil-textobj-anyblock-blocks
		   '(("'" . "'")
			 ("\"" . "\"")
			 ("`" . "`")
			 ("‘" . "’")
			 ("“" . "”"))))
	  (evil-textobj-anyblock--make-textobj beg end type count t)))
#+end_src
* Vterm
#+begin_src emacs-lisp
  (use-package vterm
	:ensure t
	:config
	(push '("find-file-other-window" find-file-other-window) vterm-eval-cmds))
  (add-hook 'vterm-mode-hook (lambda()
							   (goto-address-mode 1)))
#+end_src
* Undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree)
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree)
#+end_src
* Tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  ;; (use-package treesit-auto)
#+end_src
* Recent
#+begin_src emacs-lisp
  (use-package recentf
	:ensure nil
	:config
	(setq ;;recentf-auto-cleanup 'never
	 ;; recentf-max-menu-items 0
	 recentf-max-saved-items 200)
	;; Show home folder path as a ~
	(setq recentf-filename-handlers  
		  (append '(abbreviate-file-name) recentf-filename-handlers))
	(recentf-mode))
#+end_src
* Uniquify
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src
* Which key
#+begin_src emacs-lisp
  (use-package which-key
	:diminish which-key-mode
	:init
	(which-key-mode)
	(which-key-setup-minibuffer)
	:config
	(setq which-key-idle-delay 0.3)
	(setq which-key-prefix-prefix "◉ ")
	(setq which-key-sort-order 'which-key-key-order-alpha
		  which-key-min-display-lines 6
		  which-key-max-display-columns nil))
#+end_src

* General 
#+begin_src emacs-lisp
  (use-package general)
#+end_src
* All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons
	:if (display-graphic-p))
#+end_src
* Hydra
#+begin_src emacs-lisp
  (use-package hydra
	:defer t)
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
	:diminish company-mode
	:general
	(general-define-key :keymaps 'company-active-map
						"C-j" 'company-select-next
						"C-k" 'company-select-previous)
	:init
	;; These configurations come from Doom Emacs:
	(add-hook 'after-init-hook 'global-company-mode)
	(setq company-minimum-prefix-length 2
		  company-tooltip-limit 14
		  company-tooltip-align-annotations t
		  company-require-match 'never
		  company-global-modes '(not erc-mode message-mode help-mode gud-mode)
		  company-frontends
		  '(company-pseudo-tooltip-frontend  ; always show candidates in overlay tooltip
			company-echo-metadata-frontend)  ; show selected candidate docs in echo area
		  company-auto-complete nil
		  company-auto-complete-chars nil
		  company-dabbrev-other-buffers nil
		  company-dabbrev-ignore-case nil
		  company-dabbrev-downcase nil)

	:config
	(setq company-idle-delay 0.35)
	(add-to-list 'company-backends 'company-math-symbols-unicode)
	:custom-face
	(company-tooltip ((t (:family "Roboto Mono")))))
#+end_src
* Super-save
#+begin_src emacs-lisp
  (use-package super-save
	:diminish super-save-mode
	:defer 2
	:config
	(setq super-save-auto-save-when-idle t
		  super-save-idle-duration 5 ;; after 5 seconds of not typing autosave
		  super-save-triggers ;; Functions after which buffers are saved (switching window, for example)
		  '(evil-window-next evil-window-prev balance-windows other-window)
		  super-save-max-buffer-size 10000000)
	(super-save-mode +1))
#+end_src
* Saveplace
#+begin_src emacs-lisp
  (use-package saveplace
	:init (setq save-place-limit 100)
	:config (save-place-mode))
#+end_src
* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
	:diminish yas-minor-mode
	:defer 5
	:config
	;; (setq yas-snippet-dirs (list (expand-file-name "snippets" jib/emacs-stuff)))
	(yas-global-mode 1)) ;; or M-x yas-reload-all if you've started YASnippet already.
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change)) 
  (use-package yasnippet-snippets)
#+end_src
* Mixed-pitch 
#+begin_src emacs-lisp
  (use-package mixed-pitch
	:defer t
	:config
	(setq mixed-pitch-set-height nil)
	(dolist (face '(org-date org-priority org-tag org-special-keyword)) ;; Some extra faces I like to be fixed-pitch
	  (add-to-list 'mixed-pitch-fixed-pitch-faces face)))
#+end_src
* Hide-mode-line
#+begin_src emacs-lisp
  (use-package hide-mode-line
	:commands (hide-mode-line-mode))
#+end_src
* Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
	:config
	(doom-modeline-mode)
	(setq doom-modeline-buffer-file-name-style 'auto ;; Just show file name (no path)
		  doom-modeline-enable-word-count t
		  doom-modeline-buffer-encoding nil
		  doom-modeline-icon t ;; Enable/disable all icons
		  doom-modeline-modal-icon t ;; Icon for Evil mode
		  doom-modeline-major-mode-icon t
		  doom-modeline-major-mode-color-icon t
		  doom-modeline-bar-width 3))
#+end_src
* Vetico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
	:init
	(vertico-mode)

	;; Different scroll margin
	;; (setq vertico-scroll-margin 0)

	;; Show more candidates
	;; (setq vertico-count 20)

	;; Grow and shrink the Vertico minibuffer
	;; (setq vertico-resize t)

	;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
	;; (setq vertico-cycle t)
	)
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
	:init
	(savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
	(defun crm-indicator (args)
	  (cons (format "[CRM%s] %s"
					(replace-regexp-in-string
					 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
					 crm-separator)
					(car args))
			(cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
		  '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	;; (setq read-extended-command-predicate
	;;       #'command-completion-default-include-p)

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))
#+end_src
* Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
	:ensure t
	:config
	(marginalia-mode))
#+end_src
* Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
	;; Replace bindings. Lazily loaded due by `use-package'.
	:bind (;; C-c bindings (mode-specific-map)
		   ("C-c h" . consult-history)
		   ("C-c m" . consult-mode-command)
		   ("C-c k" . consult-kmacro)
		   ;; C-x bindings (ctl-x-map)
		   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
		   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
		   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
		   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
		   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
		   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
		   ;; Custom M-# bindings for fast register access
		   ("M-#" . consult-register-load)
		   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
		   ("C-M-#" . consult-register)
		   ;; Other custom bindings
		   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
		   ("<help> a" . consult-apropos)            ;; orig. apropos-command
		   ;; M-g bindings (goto-map)
		   ("M-g e" . consult-compile-error)
		   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
		   ("M-g g" . consult-goto-line)             ;; orig. goto-line
		   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
		   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
		   ("M-g m" . consult-mark)
		   ("M-g k" . consult-global-mark)
		   ("M-g i" . consult-imenu)
		   ("M-g I" . consult-imenu-multi)
		   ;; M-s bindings (search-map)
		   ("M-s d" . consult-find)
		   ("M-s D" . consult-locate)
		   ("M-s g" . consult-grep)
		   ("M-s G" . consult-git-grep)
		   ("M-s r" . consult-ripgrep)
		   ("M-s l" . consult-line)
		   ("M-s L" . consult-line-multi)
		   ("M-s m" . consult-multi-occur)
		   ("M-s k" . consult-keep-lines)
		   ("M-s u" . consult-focus-lines)
		   ;; Isearch integration
		   ("M-s e" . consult-isearch-history)
		   :map isearch-mode-map
		   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
		   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
		   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
		   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
		   ;; Minibuffer history
		   :map minibuffer-local-map
		   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
		   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

	;; Enable automatic preview at point in the *Completions* buffer. This is
	;; relevant when you use the default completion UI.
	:hook (completion-list-mode . consult-preview-at-point-mode)

	;; The :init configuration is always executed (Not lazy)
	:init

	;; Optionally configure the register formatting. This improves the register
	;; preview for `consult-register', `consult-register-load',
	;; `consult-register-store' and the Emacs built-ins.
	(setq register-preview-delay 0.5
		  register-preview-function #'consult-register-format)

	;; Optionally tweak the register preview window.
	;; This adds thin lines, sorting and hides the mode line of the window.
	(advice-add #'register-preview :override #'consult-register-window)

	;; Use Consult to select xref locations with preview
	(setq xref-show-xrefs-function #'consult-xref
		  xref-show-definitions-function #'consult-xref)

	;; Configure other variables and modes in the :config section,
	;; after lazily loading the package.
	:config

	;; Optionally configure preview. The default value
	;; is 'any, such that any key triggers the preview.
	;; (setq consult-preview-key 'any)
	;; (setq consult-preview-key (kbd "M-."))
	;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
	;; For some commands and buffer sources it is useful to configure the
	;; :preview-key on a per-command basis using the `consult-customize' macro.
	(consult-customize
	 consult-theme
	 :preview-key '(:debounce 0.2 any)
	 consult-ripgrep consult-git-grep consult-grep
	 consult-bookmark consult-recent-file consult-xref
	 consult--source-bookmark consult--source-recent-file
	 consult--source-project-recent-file
	 :preview-key (kbd "M-."))

	;; Optionally configure the narrowing key.
	;; Both < and C-+ work reasonably well.
	(setq consult-narrow-key "<") ;; (kbd "C-+")

	;; Optionally make narrowing help available in the minibuffer.
	;; You may want to use `embark-prefix-help-command' or which-key instead.
	;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

	;; By default `consult-project-function' uses `project-root' from project.el.
	;; Optionally configure a different project root function.
	;; There are multiple reasonable alternatives to chose from.
	;;;; 1. project.el (the default)
	;; (setq consult-project-function #'consult--default-project--function)
	;;;; 2. projectile.el (projectile-project-root)
	;; (autoload 'projectile-project-root "projectile")
	;; (setq consult-project-function (lambda (_) (projectile-project-root)))
	;;;; 3. vc.el (vc-root-dir)
	;; (setq consult-project-function (lambda (_) (vc-root-dir)))
	;;;; 4. locate-dominating-file
	;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
	)
#+end_src
* Consult Flycheck
#+begin_src emacs-lisp
  (use-package consult-flycheck)
#+end_src
* Embark
#+begin_src emacs-lisp
  (use-package embark
	:ensure t

	:bind
	(("C-." . embark-act)         ;; pick some comfortable binding
	 ("C-;" . embark-dwim)        ;; good alternative: M-.
	 ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

	:init

	;; Optionally replace the key help with a completing-read interface
	(setq prefix-help-command #'embark-prefix-help-command)

	:config

	;; Hide the mode line of the Embark live/completions buffers
	(add-to-list 'display-buffer-alist
				 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
				   nil
				   (window-parameters (mode-line-format . none)))))

										  ;
#+end_src
* Embark-consult
#+begin_src emacs-lisp
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
	:ensure t
	:after (embark consult)
	:demand t ; only necessary if you have the hook below
	;; if you want to have consult previews as you move around an
	;; auto-updating embark collect buffer
	:hook
	(embark-collect-mode . consult-preview-at-point-mode))
#+end_src
* Orderless
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
	:init
	;; Configure a custom style dispatcher (see the Consult wiki)
	;; (setq orderless-style-dispatchers '(+orderless-dispatch)
	;;       orderless-component-separator #'orderless-escapable-split-on-space)
	(setq completion-styles '(orderless basic)
		  completion-category-defaults nil
		  completion-category-overrides '((file (styles partial-completion)))))
#+end_src
* Smart-parens
#+begin_src emacs-lisp
  (use-package smartparens
	:diminish smartparens-mode
	:defer 1
	:config
	;; Load default smartparens rules for various languages
	(require 'smartparens-config)
	(setq sp-max-prefix-length 25)
	(setq sp-max-pair-length 4)
	(setq sp-highlight-pair-overlay nil
		  sp-highlight-wrap-overlay nil
		  sp-highlight-wrap-tag-overlay nil)

	(with-eval-after-load 'evil
	  (setq sp-show-pair-from-inside t)
	  (setq sp-cancel-autoskip-on-backward-movement nil)
	  (setq sp-pair-overlay-keymap (make-sparse-keymap)))

	(let ((unless-list '(sp-point-before-word-p
						 sp-point-after-word-p
						 sp-point-before-same-p)))
	  (sp-pair "'"  nil :unless unless-list)
	  (sp-pair "\"" nil :unless unless-list))

	;; In lisps ( should open a new form if before another parenthesis
	(sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))

	;; Don't do square-bracket space-expansion where it doesn't make sense to
	(sp-local-pair '(emacs-lisp-mode org-mode markdown-mode gfm-mode)
				   "[" nil :post-handlers '(:rem ("| " "SPC")))


	(dolist (brace '("(" "{" "["))
	  (sp-pair brace nil
			   :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
			   ;; Don't autopair opening braces if before a word character or
			   ;; other opening brace. The rationale: it interferes with manual
			   ;; balancing of braces, and is odd form to have s-exps with no
			   ;; whitespace in between, e.g. ()()(). Insert whitespace if
			   ;; genuinely want to start a new form in the middle of a word.
			   :unless '(sp-point-before-word-p sp-point-before-same-p)))
	(smartparens-global-mode t))
#+end_src
* Projectile
#+begin_src emacs-lisp
  (use-package projectile)
#+end_src
* Flyspell
#+begin_src emacs-lisp
  
  ;; "Enable Flyspell mode, which highlights all misspelled words. "
  (use-package flyspell
	:defer t
	:config

	(add-to-list 'ispell-skip-region-alist '("~" "~"))
	(add-to-list 'ispell-skip-region-alist '("=" "="))
	(add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
	(add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
	(add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
	(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))

	(dolist (mode '(org-mode-hook
					mu4e-compose-mode-hook))
	  (add-hook mode (lambda () (flyspell-mode 1))))

	(setq ispell-extra-args '("--sug-mode=ultra"))

	(setq flyspell-issue-welcome-flag nil
		  flyspell-issue-message-flag nil)

	:general ;; Switches correct word from middle click to right click
	(general-define-key :keymaps 'flyspell-mouse-map
						"<mouse-3>" #'ispell-word
						"<mouse-2>" nil)
	(general-define-key :keymaps 'evil-motion-state-map
						"zz" #'ispell-word)
	)

  (use-package flyspell-correct
	:after flyspell
	:bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit :defer t)
  (use-package magit-todos :defer t)
#+end_src
* Diff-hl
Highlight the diffs of the past commit in a file
#+begin_src emacs-lisp
  (use-package diff-hl
	:config
	(global-diff-hl-mode))
#+end_src
* Unfill
#+begin_src emacs-lisp
  (use-package unfill :defer t)
#+end_src
* Burly
#+begin_src emacs-lisp
  (use-package burly :defer t)
#+end_src
* Ace-window
#+begin_src emacs-lisp
  (use-package ace-window :defer t)
#+end_src
* Centered-cursor-mode
#+begin_src emacs-lisp
  (use-package centered-cursor-mode :diminish centered-cursor-mode)
#+end_src
* Restart emacs
#+begin_src emacs-lisp
  (use-package restart-emacs :defer t)
#+end_src
* Diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
* Bufler
#+begin_src emacs-lisp
  (use-package bufler
	:general
	(:keymaps 'bufler-list-mode-map "Q" 'kill-this-buffer))
#+end_src
* mw-Thesaurus
#+begin_src emacs-lisp
  (use-package mw-thesaurus
	:defer t
	:config
	(add-hook 'mw-thesaurus-mode-hook (lambda () (define-key evil-normal-state-local-map (kbd "q") 'mw-thesaurus--quit))))
#+end_src
* Epithet
#+begin_src emacs-lisp
  (use-package epithet
	:ensure nil
	:config
	(add-hook 'Info-selection-hook #'epithet-rename-buffer)
	(add-hook 'help-mode-hook #'epithet-rename-buffer))
#+end_src
* Most-used-words
#+begin_src emacs-lisp
  (use-package most-used-words :ensure nil)
#+end_src
* Deft
#+begin_src emacs-lisp
  (defun a3madkour/deft-kill ()
	(kill-buffer "*Deft*"))
  (defun a3madkour/deft-evil-fix ()
	(evil-insert-state)
	(centered-cursor-mode))
  (use-package deft
	:config
	(defun cf/deft-parse-title (file contents)
	  "Parse the given FILE and CONTENTS and determine the title.
	If `deft-use-filename-as-title' is nil, the title is taken to
	be the first non-empty line of the FILE.  Else the base name of the FILE is
	used as title."
	  (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
		(if begin
			(string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
		  (deft-base-filename file))))
	(advice-add 'deft-parse-title :override #'cf/deft-parse-title)
	(setq deft-strip-summary-regexp
		  (concat "\\("
				  "[\n\t]" ;; blank
				  "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
				  "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n" ;; org-roam ID
				  "\\|\\[\\[\\(.*\\]\\)" ;; any link 
				  "\\)"))
	(setq deft-directory org-roam-notes
		  deft-extensions '("org" "txt")
		  deft-recursive t
		  deft-file-limit 40
		  deft-use-filename-as-title t)

	(add-hook 'deft-open-file-hook 'a3madkour/deft-kill) ;; Once a file is opened, kill Deft
	(add-hook 'deft-mode-hook 'a3madkour/deft-evil-fix) ;; Goes into insert mode automaticlly in Deft

	;; Removes :PROPERTIES: from descriptions
	;; (setq deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
	:general

	(general-define-key :states 'normal :keymaps 'deft-mode-map
						;; 'q' kills Deft in normal mode
						"q" 'kill-this-buffer)

	(general-define-key :states 'insert :keymaps 'deft-mode-map
						"C-j" 'next-line
						"C-k" 'previous-line)
	)


#+end_src
* PDF-Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
	:defer t
	:mode  ("\\.pdf\\'" . pdf-view-mode)
	:hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1) (auto-revert-mode 1)))
	:config
	(pdf-loader-install)
	(push 'pdf-view-midnight-minor-mode pdf-tools-enabled-modes)
	(setq pdf-view-use-scaling t
		  pdf-view-use-imagemagick nil)

	;; (setq-default pdf-view-display-size 'fit-height)
	;; (setq pdf-view-continuous t) ;; Makes it so scrolling down to the bottom/top of a page doesn't switch to the next page
	(setq pdf-view-midnight-colors '("#ffffff" . "#121212" )) ;; I use midnight mode as dark mode, dark mode doesn't seem to work
	:general
	(general-define-key :states 'motion :keymaps 'pdf-view-mode-map
						"j" 'pdf-view-next-page
						"k" 'pdf-view-previous-page

						"C-j" 'pdf-view-next-line-or-next-page
						"C-k" 'pdf-view-previous-line-or-previous-page

						;; Arrows for movement as well
						(kbd "<down>") 'pdf-view-next-line-or-next-page
						(kbd "<up>") 'pdf-view-previous-line-or-previous-page

						(kbd "<down>") 'pdf-view-next-line-or-next-page
						(kbd "<up>") 'pdf-view-previous-line-or-previous-page

						(kbd "<left>") 'image-backward-hscroll
						(kbd "<right>") 'image-forward-hscroll

						"H" 'pdf-view-fit-height-to-window
						"0" 'pdf-view-fit-height-to-window
						"W" 'pdf-view-fit-width-to-window
						"=" 'pdf-view-enlarge
						"-" 'pdf-view-shrink

						"q" 'quit-window
						"Q" 'kill-this-buffer
						"g" 'revert-buffer
						)
	)
#+end_src
* Popper
#+begin_src emacs-lisp
  (use-package popper
	:bind (("C-`"   . popper-toggle-latest)
		   ("M-`"   . popper-cycle)
		   ("C-M-`" . popper-toggle-type))
	:init
	(setq popper-reference-buffers
		  '("\\*Messages\\*"
			"Output\\*$"
			"\\*Warnings\\*"
			help-mode
			compilation-mode))
	(popper-mode +1))

#+end_src
* Rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
	:defer t)
#+end_src
* Kurecolor
#+begin_src emacs-lisp
  (use-package kurecolor)
#+end_src
* Editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
	:ensure t
	:config
	(editorconfig-mode 1))
#+end_src 
* Hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
	:defer t
	:hook (prog-mode . hl-todo-mode)
	:config
	(setq hl-todo-keyword-faces
		  '(("TODO"   . "#FF0000")
			("FIXME"  . "#FF4500")
			("DEBUG"  . "#A020F0")
			("WIP"   . "#1E90FF"))))
#+end_src
* Ranger
#+begin_src emacs-lisp
  (use-package ranger)

  (ranger-override-dired-mode t)

#+end_src
* Eshell-git-prompt
#+begin_src emacs-lisp
  (use-package eshell-git-prompt
	:config
	(eshell-git-prompt-use-theme 'powerline)
	)
#+end_src
* Command-log-mode
(use-package command-log-mode)
* Pulsar
#+begin_src emacs-lisp
  (use-package pulsar
	:config
	(setq pulsar-pulse-functions
		  ;; NOTE 2022-04-09: The commented out functions are from before
		  ;; the introduction of `pulsar-pulse-on-window-change'.  Try that
		  ;; instead.
		  '(recenter-top-bottom
			move-to-window-line-top-bottom
			reposition-window
			;; bookmark-jump
			;; other-window
			;; delete-window
			;; delete-other-windows
			forward-page
			consult-imenu
			backward-page
			scroll-up-command
			scroll-down-command
			;; windmove-right
			;; windmove-left
			;; windmove-up
			;; windmove-down
			;; windmove-swap-states-right
			;; windmove-swap-states-left
			;; windmove-swap-states-up
			;; windmove-swap-states-down
			;; tab-new
			;; tab-close
			;; tab-next
			org-next-visible-heading
			org-previous-visible-heading
			org-forward-heading-same-level
			org-backward-heading-same-level
			outline-backward-same-level
			outline-forward-same-level
			outline-next-visible-heading
			outline-previous-visible-heading
			outline-up-heading))

	(setq pulsar-pulse-on-window-change t)
	(setq pulsar-pulse t)
	(setq pulsar-delay 0.055)
	(setq pulsar-iterations 10)
	(setq pulsar-face 'pulsar-magenta)
	(setq pulsar-highlight-face 'pulsar-yellow)

	(pulsar-global-mode 1)
	)
#+end_src
* Academic Phrases
#+begin_src emacs-lisp
  (use-package academic-phrases)
#+end_src
* Fountain-mode
#+begin_src emacs-lisp
  (use-package fountain-mode)
#+end_src
* Ripgrep
#+begin_src emacs-lisp
  (use-package rg)
#+end_src
* Dash Docs
#+begin_src emacs-lisp
  (use-package dash-docs
	:config
	(setq dash-docs-docsets-path "~/.docsets")
	(setq installed-langs (dash-docs-installed-docsets))
	;;figure out to convert spaces into underscores when installing the docs
	(setq docset-langs '("Rust" "Emacs_Lisp" "JavaScript" "C" "Bash" "Vim" "SQLite" "PostgreSQL" "OpenGL_4" "OCaml" "LaTeX" "Docker" "C++" "HTML" "SVG" "CSS"  "Haskell" "React" "D3JS"))
	(dolist (lang docset-langs)
	  (when (null (member lang installed-langs))
		(dash-docs-install-docset lang))))
#+end_src
* Define word
#+begin_src emacs-lisp
(use-package define-word)
#+end_src
* Format all
#+begin_src emacs-lisp
  (use-package format-all)
#+end_src
* Lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
	:init
	;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	;; (setq lsp-keymap-prefix "C-c l")
	:hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
		   (web-mode . lsp)
		   (rustic-mode . lsp)
		   (python-mode . lsp)
		   (emmet-mode . lsp)
		   ;; if you want which-key integration
		   (lsp-mode . lsp-ui-mode)
		   (lsp-mode . lsp-enable-which-key-integration))
	:commands lsp
	:custom
	;; what to use when checking on-save. "check" is default, I prefer clippy
	(lsp-rust-analyzer-cargo-watch-command "clippy")
	(lsp-eldoc-render-all t)
	(lsp-idle-delay 0.6)
	;; enable / disable the hints as you prefer:
	(lsp-rust-analyzer-server-display-inlay-hints t)
	(lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
	(lsp-rust-analyzer-display-chaining-hints t)
	(lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
	(lsp-rust-analyzer-display-closure-return-type-hints t)
	;; (lsp-rust-analyzer-display-parameter-hints nil)
	;; (lsp-rust-analyzer-display-reborrow-hints nil)
	)

  (use-package lsp-ui
	:ensure
	:commands lsp-ui-mode
	:custom
	(lsp-ui-peek-always-show t)
	(lsp-ui-sideline-show-hover t)
	(lsp-ui-doc-enable nil))

  (use-package consult-lsp)
  (use-package eglot)
  (use-package dap-mode
	:after lsp-mode
	:commands dap-debug
	:hook ((python-mode . dap-ui-mode) (python-mode . dap-mode))
	:config
	(require 'dap-python)
	(require 'dap-gdb-lldb)
	(setq dap-python-debugger 'debugpy)
	(add-hook 'dap-stopped-hook
			  (lambda (arg) (call-interactively #'dap-hydra)))
	(dap-register-debug-template "Rust::GDB Run Configuration"
								 (list :type "gdb"
									   :request "launch"
									   :name "GDB::Run"
									   :gdbpath "rust-gdb"
									   :target nil
									   :cwd nil)))
#+end_src
* Perspective
#+begin_src emacs-lisp
  (use-package perspective
	:bind
	("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
	:custom
	(persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
	:init
	(persp-mode))
#+end_src
* Powerthesaurus
#+begin_src emacs-lisp
(use-package powerthesaurus)
#+end_src
* Language Packages
** Rust
#+begin_src emacs-lisp
  (use-package rustic
	:config
	(setq rustic-analyzer-command '("~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rust-analyzer"))
	)
#+end_src
** GDScript
#+begin_src emacs-lisp
  (use-package gdscript-mode)
#+end_src
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode)
  (use-package lsp-haskell)
#+end_src
** Python
#+begin_src emacs-lisp

  (use-package python-mode)
  (use-package py-isort)
  (use-package pyimport)
  (use-package python-pytest)
  (use-package conda)
  (use-package anaconda-mode)
  (use-package lsp-pyright
	:ensure t
	:hook (python-mode . (lambda ()
						   (require 'lsp-pyright)
						   (lsp))))  ; or lsp-deferred
#+end_src
** Prolog
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
#+end_src
** C/C++
#+begin_src emacs-lisp
  (use-package demangle-mode)
  (use-package ccls
	:hook ((c-mode c++-mode objc-mode cuda-mode) .
		   (lambda () (require 'ccls) (lsp))))
  (use-package disaster)
  (use-package modern-cpp-font-lock)
#+end_src
** C#
#+begin_src emacs-lisp
  (use-package csharp-mode)
  (use-package csproj-mode)
  ;; (use-package sln-mode)
  ;;Unity stuff'
  (use-package shader-mode)
#+end_src
** Emacs lisp
*** Elisp def
#+begin_src emacs-lisp
  (use-package elisp-def)
#+end_src
*** Emacs autofmt
#+begin_src emacs-lisp
  (use-package elisp-autofmt)
#+end_src
** Latex
#+begin_src emacs-lisp
  (use-package auctex 
	:ensure nil
	:defer t
	:init
	(setq TeX-engine 'xetex ;; Use XeTeX
		  latex-run-command "xetex")

	(setq TeX-parse-self t ; parse on load
		  TeX-auto-save t  ; parse on save
		  ;; Use directories in a hidden away folder for AUCTeX files.
		  TeX-auto-local (concat user-emacs-directory "auctex/auto/")
		  TeX-style-local (concat user-emacs-directory "auctex/style/")

		  TeX-source-correlate-mode t
		  TeX-source-correlate-method 'synctex

		  TeX-show-compilation nil

		  ;; Don't start the Emacs server when correlating sources.
		  TeX-source-correlate-start-server nil

		  ;; Automatically insert braces after sub/superscript in `LaTeX-math-mode'.
		  TeX-electric-sub-and-superscript t
		  ;; Just save, don't ask before each compilation.
		  TeX-save-query nil)

	;; To use pdfview with auctex:
	(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		  TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
		  TeX-source-correlate-start-server t)
	:general
	(general-define-key
	 :prefix ","
	 :states 'normal
	 :keymaps 'LaTeX-mode-map
	 "" nil
	 "a" '(TeX-command-run-all :which-key "TeX run all")
	 "c" '(TeX-command-master :which-key "TeX-command-master")
	 "c" '(TeX-command-master :which-key "TeX-command-master")
	 "e" '(LaTeX-environment :which-key "Insert environment")
	 "s" '(LaTeX-section :which-key "Insert section")
	 "m" '(TeX-insert-macro :which-key "Insert macro")
	 )

	)

  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer) ;; Standard way

  (use-package company-auctex
	:after auctex
	:init
	(add-to-list 'company-backends 'company-auctex)
	(company-auctex-init))

  (use-package latex-preview-pane)
  (use-package evil-tex
	:config
	(add-hook 'LaTeX-mode-hook #'evil-tex-mode))

  (use-package cdlatex
	:hook (org-mode . org-cdlatex-mode))
  
  (use-package company-auctex)
  (use-package company-reftex)
  (use-package company-math)
  (use-package adaptive-wrap
	:hook (LaTeX-mode . adaptive-wrap-prefix-mode)
	:init (setq-default adaptive-wrap-extra-indent 0))
#+end_src
** Web
#+begin_src emacs-lisp
  (use-package emmet-mode
	:config
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . emmet-mode))
	(add-to-list 'auto-mode-alist '("\\.phtml\\'" . emmet-mode))
	(add-to-list 'auto-mode-alist '("\\.css\\'" . emmet-mode)))

  (use-package haml-mode)
  (use-package company-web)
  (use-package impatient-mode)
  (use-package css-mode)
  (use-package com-css-sort)
  (use-package less-css-mode)
  (use-package sass-mode)
  (use-package sws-mode)
  (use-package rainbow-mode)
  (use-package web-mode
	:config
	(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.ts?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
	(setq web-mode-enable-auto-pairing t)
	)
#+end_src
** Javascript and its ilk
#+begin_src emacs-lisp
  (use-package npm-mode)
  (use-package typescript-mode)
  (use-package rjsx-mode)
  (use-package js2-refactor
	:hook ((js2-mode rjsx-mode) . js2-refactor-mode))
  (use-package tide
	:ensure t
	:after (typescript-mode company flycheck)
	:hook ((typescript-mode . tide-setup)
		   (typescript-mode . tide-hl-identifier-mode)
		   (before-save . tide-format-before-save)))
#+end_src
* Org-super-agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
	:after org
	:config
	(setq org-super-agenda-header-map nil) 
	(setq org-super-agenda-groups
		  '((:auto-dir-name t)))
	(org-agenda-list)
	(org-super-agenda-mode))
#+end_src
* Lookup
Ported from doom emacs lookup module
* Org-Mode
#+begin_src emacs-lisp
   (defun a3madkour/clear-latex-temp-files ()
	 (shell-command "rm -rf *.tex *.prv preview.fmt"))

   (defun a3madkour/export-to-latex-on-save (filename)
	 (when (string= (buffer-name) filename)
	   ;; (org-open-file (org-latex-export-to-pdf))
	   (org-latex-export-to-pdf)
	   (a3madkour/clear-latex-temp-files)))

   (defun a3madkour/export-to-latex-on-save-and-open (filename)
	 (when (string= (buffer-name) filename)
	   (org-open-file (org-latex-export-to-pdf))
	   (a3madkour/clear-latex-temp-files)))


   (defun a3madkour/org-font-setup ()
	 ;; (set-face-attribute 'org-document-title nil :height 1.1) ;; Bigger titles, smaller drawers
	 (set-face-attribute 'org-checkbox-statistics-done nil :inherit 'org-done :foreground "green3") ;; Makes org done checkboxes green
	 ;; (set-face-attribute 'org-drawer nil :inherit 'fixed-pitch :inherit 'shadow :height 0.6 :foreground nil) ;; Makes org-drawer way smaller
	 ;; (set-face-attribute 'org-ellipsis nil :inherit 'shadow :height 0.8) ;; Makes org-ellipsis shadow (blends in better)
	 (set-face-attribute 'org-scheduled-today nil :weight 'normal) ;; Removes bold from org-scheduled-today
	 (set-face-attribute 'org-super-agenda-header nil :inherit 'org-agenda-structure :weight 'bold) ;; Bolds org-super-agenda headers
	 (set-face-attribute 'org-scheduled-previously nil :background "red") ;; Bolds org-super-agenda headers

	 ;; Here I set things that need it to be fixed-pitch, just in case the font I am using isn't monospace.
	 ;; (dolist (face '(org-list-dt org-tag org-todo org-table org-checkbox org-priority org-date org-verbatim org-special-keyword))
	 ;;   (set-face-attribute `,face nil :inherit 'fixed-pitch))

	 ;; (dolist (face '(org-code org-verbatim org-meta-line))
	 ;;   (set-face-attribute `,face nil :inherit 'shadow :inherit 'fixed-pitch))
	 )
   (use-package org
	 :hook (org-mode . a3madkour/org-font-setup)
	 :hook (org-agenda-mode . org-super-agenda-mode) ;; Start org-super-agenda
	 :hook (org-capture-mode . evil-insert-state) ;; Start org-capture in Insert state by default
	 :diminish org-indent-mode
	 :diminish visual-line-mode
	 :config
	 (require 'org-tempo)
	 (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
	 (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	 (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
	 (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
	 (add-to-list 'org-structure-template-alist '("py" . "src python"))
	 (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
	 (add-to-list 'org-structure-template-alist '("json" . "src json"))
	 ;;figure out how to get to the category and see if it is a habit beeing added or a task
	 (defun a3madkour/org-set-effort ()
	   (org-set-effort)
	   ())

	 (defun a3madkour/add-scheduled-todo ()
	   (interactive)
	   (let ((selected-date (org-read-date)))
		 (org-insert-todo-heading-respect-content nil)
		 (call-interactively 'org-set-effort)
		 (org-schedule nil selected-date)))

	 (defun a3madkour/add-scheduled-headline-todo ()
	   (interactive)
	   (let ((selected-date (org-read-date)))
		 (org-insert-todo-heading-respect-content nil)
		 (call-interactively 'org-set-effort)
		 (org-schedule nil selected-date)))

	 (defun a3madkour/add-new-org-datetree-headline (selected_date)
	   (save-excursion
		 (let* ((parsed-string (nthcdr 3 (org-parse-time-string selected-date)))
				(new-date (list (nth 1 parsed-string) (car parsed-string) (nth 2 parsed-string))))
		   (org-datetree-find-date-create new-date)
		   (nth 4 (org-heading-components)))))

	 (defun a3madkour/refile-to (file headline selected-date)
	   "Move current headline to specified location"
	   (let ((pos (save-excursion
					(find-file file)
					(let ((new_pos (org-find-exact-headline-in-buffer headline)))
					  (org-schedule nil selected-date)
					  new_pos)
					)))
		 (org-refile nil nil (list headline file nil pos))))

	 (defun a3madkour/refile-and-schedule ()
	   (interactive)
	   (let ((selected-date (org-read-date)))
		 (a3madkour/refile-to buffer-file-name (a3madkour/add-new-org-datetree-headline selected-date) selected-date)))
  
	(defun a3madkour/file-with-current-date (path)
	  (expand-file-name (format "%s.org"
								(format-time-string "%Y-%m-%d")) path))

	 (setq org-capture-templates
		   '(("c" "CS")
			 ("ct" "Todo" entry (file+datetree "~/org/CS/todo.org")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("cu" "Unscheduled" entry (file+headline "~/org/CS/todo.org" "Unscheduled")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("ch" "Habit" entry (file "~/org/CS/habits.org")
			  "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

			 ("a" "Academic")
			 ("at" "Todo" entry (file+datetree "~/org/Academic/todo.org")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("au" "Unscheduled" entry (file+headline "~/org/Academic/todo.org" "Unscheduled")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")

			 ("ah" "Habit" entry (file "~/org/Academic/habits.org")
			  "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

			 ("r" "Artistic")
			 ("rt" "Todo" entry (file+datetree "~/org/Artistic/todo.org")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("ru" "Unscheduled" entry (file+headline "~/org/Artistic/todo.org" "Unscheduled")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("rh" "Habit" entry (file "~/org/Artistic/habits.org")
			  "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

			 ("h" "Health")
			 ("ht" "Todo" entry (file+datetree "~/org/Health/todo.org")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("hu" "Unscheduled" entry (file+headline "~/org/Health/todo.org" "Unscheduled")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("hh" "Habit" entry (file "~/org/Health/habits.org")
			  "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

			 ("i" "Intellectual")
			 ("it" "Todo" entry (file+datetree "~/org/Intellectual/todo.org")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("iu" "Unscheduled" entry (file+headline "~/org/Intellectual/todo.org" "Unscheduled")
			  "* TODO %? %(a3madkour/org-set-effort)\n#+BEGIN: clocktable :scope file :maxlevel 2 :properties ("Effort")#+END:\n")
			 ("ih" "Habit" entry (file "~/org/Intellectual/habits.org")
			  "* TODO %?\nSCHEDULED:%(org-insert-time-stamp (org-read-date nil t) nil nil nil nil \" .+1d\")\n:PROPERTIES:\n:STYLE:    habit\n:END:\n")

			 ("b" "Manual Book" entry (file "~/org/Intellectual/reading-list.org")
			  "* %^{TITLE}\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n:END:%^{AUTHOR}p\n%?" :empty-lines 1)

			 ("g" "Game idea" entry (file+headline "~/org/ideas.org" "Game")
			  "* %?\n")
			 ("p" "Paper idea" entry (file+headline "~/org/ideas.org" "Paper")
			  "* %?\n")
			 ("a" "App idea" entry (file+headline "~/org/ideas.org" "App")
			  "* %?\n")
			 ("v" "Video idea" entry (file+headline "~/org/ideas.org" "Video")
			  "* %?\n")
			 ("w" "Vague idea" entry (file+headline "~/org/ideas.org" "Vague af")
			  "* %?\n")
			 ("f" "Fleeting note" entry (file (lambda () (a3madkour/file-with-current-date "~/org/fleeting-notes")) )
			  "* %?\n")
			 )
		   )
	 )
#+end_src
* Org-ql
#+begin_src emacs-lisp
  (use-package org-ql
	:general
	(general-define-key :keymaps 'org-ql-view-map
						"q" 'kill-buffer-and-window))
#+end_src
* Org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
	:hook (org-mode . org-bullets-mode))
#+end_src
* Org roam
#+begin_src emacs-lisp
  (use-package org-roam)
#+end_src
* Org noter
#+begin_src emacs-lisp
  (use-package org-noter
	:config
	(setq org-noter-always-create-frame nil)
	(setq org-noter-kill-frame-at-session-end nil)
	)
#+end_src
* Org-Journal
#+begin_src emacs-lisp
  (use-package org-journal
	:config
	(setq org-journal-dir "~/org/Journal"))
#+end_src
* Org-pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro)
#+end_src
* Org-transclusion
#+begin_src emacs-lisp
(use-package org-transclusion)
#+end_src
* Org-book
#+begin_src emacs-lisp
  (use-package org-books
	:config
	(setq org-books-file "~/org/reading-list.org")
	)
#+end_src
* Org PDFtools
#+begin_src emacs-lisp
  (use-package org-pdftools
	:hook (org-load . org-pdftools-setup-link ))
#+end_src
* Org web-tools
#+begin_src emacs-lisp
(use-package org-web-tools)
#+end_src
* Ox-pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc)
#+end_src
* Org-clock-csv
#+begin_src emacs-lisp
  (use-package org-clock-csv)
#+end_src
* Ob-Async
#+begin_src emacs-lisp
  (use-package ob-async)
#+end_src
* Citar
#+begin_src emacs-lisp
  (defun citar-org-format-note-madkour (key entry)
	"Format a note from KEY and ENTRY."
	(let* ((template (citar--get-template 'note))
		   (note-meta (when template
						(citar-format--entry template entry)))
		   (template-path (citar--get-template 'note-file))
		   (note-path (when template-path
						(citar-format--entry template-path entry)))
		   (note-tags (cdr (citar-get-field-with-value '("keywords") key)))
		   (filepath (expand-file-name
					  (concat key ".org")
					  (car citar-notes-paths)))
		   (buffer (find-file filepath)))
	  (with-current-buffer buffer
		;; This just overrides other template insertion.
		(erase-buffer)
		(citar-org-roam-make-preamble key)
		(insert "#+title: ")
		(when template (insert note-meta))
		(insert "\n#+filetags::")
		(insert note-tags)
		(insert "\n* Notes\n:PROPERTIES:\n:NOTER_DOCUMENT: ")
		(when template-path (insert note-path))
		(insert "\n:END:\n")
		(insert "\n\n|\n\n#+print_bibliography:")
		(search-backward "|")
		(delete-char 1)
		(when (fboundp 'evil-insert)
		  (evil-insert 1)))))


  (use-package citar
	:no-require
	:custom
	(citar-templates
	 '((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
	   (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
	   (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
	   (note . "Notes on ${author editor}, ${title}")
	   (note-file . "${file}")))
	(org-cite-global-bibliography (list zot-bib))
	(org-cite-insert-processor 'citar)
	(org-cite-follow-processor 'citar)
	(citar-note-format-function 'citar-org-format-note-madkour)
	(org-cite-activate-processor 'citar)
	(citar-bibliography org-cite-global-bibliography)
	(citar-notes-paths (list org-ref-notes))
	;; optional: org-cite-insert is also bound to C-c C-x C-@
	:bind
	(:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

  (use-package citar-embark
	:after citar embark
	:no-require
	:config (citar-embark-mode))
  (setq citar-at-point-function 'embark-act)

#+end_src
* Citproc
#+begin_src emacs-lisp
  (use-package citeproc)
#+end_src
* Themes
#+begin_src emacs-lisp
  (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
		  doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-molokai t)

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)
	;; Enable custom neotree theme (all-the-icons must be installed!)
	(doom-themes-neotree-config)
	;; or for treemacs users
	;; (setq doom-themes-treemacs-theme "doom-molokai") ; use "doom-colors" for less minimal icon theme
	(doom-themes-treemacs-config)
	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config))
#+end_src
* My functions
#+begin_src emacs-lisp
  (defun a3madkour/make-project ()
	(interactive)
	(let ((dir-name (read-directory-name "Select Project Directory")))
	  (magit-init dir-name)
	  (make-empty-file (concat dir-name "todo.org"))))
#+end_src
** Adapted from doom
#+begin_src emacs-lisp
	;;;###autoload
	(defun +default/insert-file-path (arg)
	  "Insert the file name (absolute path if prefix ARG).
	If `buffer-file-name' isn't set, uses `default-directory'."
	  (interactive "P")
	  (let ((path (or buffer-file-name default-directory)))
		(insert
		 (if arg
			 (abbreviate-file-name path)
		   (file-name-nondirectory path)))))
	;;;###autoload
(defun +default/insert-all-path (arg)
  (interactive "P")
    (+default/insert-file-path 1))
#+end_src

* Keybindings
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal motion visual)
   :keymaps 'override
   :prefix "SPC"

   ;; Top level functions
   "/" '(consult-ripgrep :which-key "ripgrep")
   ";" '(deft :which-key "deft")
   ":" '(project-find-file :which-key "p-find file")
   "." '(find-file :which-key "find file")
   "," '(consult-recent-file :which-key "recent files")
   "TAB" '(perspective-map :which-key "perspective map")
   "q" '(save-buffers-kill-terminal :which-key "quit emacs")
   "j" '(jump-to-register :which-key "registers")
   "x" 'org-capture
   "a" 'embark-act

   ;; Buffers
   "b" '(nil :which-key "buffer")
   "bb" '(consult-buffer :which-key "switch buffers")
   "bd" '(evil-delete-buffer :which-key "delete buffer")
   "bi" '(ibuffer  :which-key "ibuffer")
   "br" '(revert-buffer :which-key "revert buffer")

   ;; Files
   "f" '(nil :which-key "files")
   "fb" '(consult-bookmark :which-key "bookmarks")
   "ff" '(find-file :which-key "find file")
   ;; "fn" '(spacemacs/new-empty-buffer :which-key "new file")
   "fr" '(consult-recent-file :which-key "recent files")
   "fR" '(rename-file :which-key "rename file")
   "fs" '(save-buffer :which-key "save buffer")
   "fS" '(evil-write-all :which-key "save all buffers")

   ;; Help/emacs
   "h" '(nil :which-key "help/emacs")

   "hv" '(describe-variable :which-key "des. variable")
   "hb" '(describe-bindings :which-key "des. bindings")
   "hM" '(describe-mode :which-key "des. mode")
   "hf" '(describe-function :which-key "des. func")
   "hF" '(describe-face :which-key "des. face")
   "hk" '(describe-key :which-key "des. key")

   "hed" '((lambda () (interactive) (jump-to-register 67)) :which-key "edit dotfile")

   "hm" '(nil :which-key "switch mode")
   "hme" '(emacs-lisp-mode :which-key "elisp mode")
   "hmo" '(org-mode :which-key "org mode")
   "hmt" '(text-mode :which-key "text mode")

   ;; Git
   "g" '(nil :which-key "magit")
   "gg" '(magit-status :which-key "magit status")

   ;; Open
   "ot" '(vterm-other-window :which-key "Open vterm in another window")
   "oT" '(vterm :which-key "Open vterm in the same window")
   "oa" '(org-agenda :which-key "org-agenda")

   ;; Toggles
   "t" '(nil :which-key "toggles")
   "tt" '(toggle-truncate-lines :which-key "truncate lines")
   "tv" '(visual-line-mode :which-key "visual line mode")
   "tn" '(display-line-numbers-mode :which-key "display line numbers")
   "ta" '(mixed-pitch-mode :which-key "variable pitch mode")
   "tc" '(visual-fill-column-mode :which-key "visual fill column mode")
   "ty" '(load-theme :which-key "load theme")
   "tR" '(read-only-mode :which-key "read only mode")
   "tI" '(toggle-input-method :which-key "toggle input method")
   "tr" '(display-fill-column-indicator-mode :which-key "fill column indicator")
   "tm" '(hide-mode-line-mode :which-key "hide modeline mode")

   ;;Search
   "sb" '(consult-line :which-key "search buffer")
   ;; Windows
   "w" '(nil :which-key "window")
   ;; "wm" '(jib/toggle-maximize-buffer :which-key "maximize buffer")
   "wN" '(make-frame :which-key "make frame")
   "wd" '(evil-window-delete :which-key "delete window")
   "ws" '(split-window-vertically :which-key "split below")
   "wv" '(split-window-horizontally :which-key "split right")
   "wl" '(evil-window-right :which-key "evil-window-right")
   "wh" '(evil-window-left :which-key "evil-window-left")
   "wj" '(evil-window-down :which-key "evil-window-down")
   "wk" '(evil-window-up :which-key "evil-window-up")
   "wz" '(text-scale-adjust :which-key "text zoom")

   ;;org-roam
   "r" '(nil :which-key "org-roam")
   "rD" #'org-roam-demote-entire-buffer
   "rf" #'org-roam-node-find
   "rF" #'org-roam-ref-find
   "rg" #'org-roam-graph
   "ri" #'org-roam-node-insert
   "rI" #'org-id-get-create
   "rm" #'org-roam-buffer-toggle
   "rM" #'org-roam-buffer-display-dedicated
   "rn" #'org-roam-capture
   "rr" #'org-roam-refile
   "rR" #'org-roam-link-replace-all
   "rd" '(nil :which-key "by date")
   "rdb" '(org-roam-dailies-goto-previous-note :which-key "Goto previous note")
   "rdd" '(org-roam-dailies-goto-date :which-key "Goto date")
   "rdD" '(org-roam-dailies-capture-date :which-key "Capture date")
   "rdf" '(org-roam-dailies-goto-next-note :which-key "Goto next note")
   "rdm" '(org-roam-dailies-goto-tomorrow :which-key "Goto tomorrow")
   "rdM" '(org-roam-dailies-capture-tomorrow :which-key "Capture tomorrow")
   "rdn" '(org-roam-dailies-capture-today :which-key "Capture today")
   "rdt" '(org-roam-dailies-goto-today :which-key "Goto today")
   "rdT" '(org-roam-dailies-capture-today :which-key "Capture today")
   "rdy" '(org-roam-dailies-goto-yesterday :which-key "Goto yesterday")
   "rdY" '(org-roam-dailies-capture-yesterday :which-key "Capture yesterday")
   "rd-" '(org-roam-dailies-find-directory :which-key "Find directory")
   "ro" '(nil :which-key "node properties")
   "roa" #'org-roam-alias-add
   "roA" #'org-roam-alias-remove
   "rot" #'org-roam-tag-add
   "roT" #'org-roam-tag-remove
   "ror" #'org-roam-ref-add
   "roR" #'org-roam-ref-remove
   ;; Projectile
   "p" '(nil :which-key "projectile")
   "pr" '(projectile-recentf :which-key "projectile-recentf")
   "p&" '(projectile-run-async-shell-command-in-root :which-key "projectile-run-async-shell-command-in-root")
   "p!" '(projectile-run-shell-command-in-root :which-key "projectile-run-shell-command-in-root")
   "pd" '(projectile-remove-known-project :which-key "projectile-remove-known-project")
   "pb" '(projectile-switch-to-buffer :which-key "projectile-switch-to-buffer")
   "pa" '(projectile-add-known-project :which-key "projectile-add-known-project")
   "ps" '(projectile-save-project-buffers :which-key "projectile-save-project-buffers")
   "pg" '(projectile-configure-project :which-key "projectile-configure-project")
   "pi" '(projectile-invalidate-cache :which-key "projectile-invalidate-cache")
   "po" '(projectile-find-other-file :which-key "projectile-find-other-file")
   "pe" '(projectile-edit-dir-locals :which-key "projectile-edit-dir-locals")
   "pc" '(projectile-compile-project :which-key "projectile-compile-project")
   "pp" '(projectile-switch-project :which-key "projectile-switch-project")
   "pT" '(projectile-test-project :which-key "projectile-test-project")
   "pR" '(projectile-run-project :which-key "projectile-run-project")
   "pk" '(projectile-kill-buffers :which-key "projectile-kill-buffers")
   "pn" '(a3madkour/make-project :which-key "make-project")
   "SPC" '(projectile-find-file :which-key "projectile-find-file")

   ;;citar
   "z" '(nil :which-key "citation")
   "zo" '(citar-open :which-key "citar-open")
   "zi" '(org-cite-insert :which-key "org-cite-insert")
   "ze" '(citar-insert-edit :which-key "Edit citation")
   "zd" '(citar-dwim :which-key "citar-dwim")

   ;;notes stuff 'n'
   "n" '(nil :which-key "notes")
   "ne" '(org-noter :which-key "Org Noter")
   ;; journal
   "nj" '(nil :which-key "journal")
   "njj" '(org-journal-new-entry :which-key "new journal entru")
   "njJ" '(org-journal-new-scheduled-entry :which-key "new scheduled journal entry")


  ;;insert 
   "i" '(nil :which-key "insert")
   "if" '(+default/insert-file-path :which-key "Current file name")
   "iF" '(+default/insert-all-path :which-key "Current file name")
   "ir" '(consult-register :which-key "Register")
   "is" '(yas-insert-snippet :which-key "Snippet")
   "iu" '(insert-char :which-key "Unicode")

  ;;code/lsp
   "c" '(nil :which-key "code")
   "ca" '(lsp-execute-code-action :which-key "LSP Code action")
   "cr" '(lsp-rename :which-key "LSP Rename")
   "cc" 'compile
   "cC" 'recompile
   ;; "cd" '(+lookup/definition)
   ;; "cD" '(+lookup/references)
   "ce" 'eval-buffer
   "cf" '(lsp-format-buffer :which-key "LSP format buffer")
   ;; "ci" '(+lookup/implementations)
   "cj" 'consult-lsp-symbols
   ;; "ck" '(+lookup/documentation)
   "co" '(lsp-organize-imports :which-key "LSP organize imports")
   ;; "ct" '(+lookup/type-definition)
   "cw" 'delete-trailing-whitespace
   ) ;; End SPC prefix block

  ;; All-mode keymaps
  (general-def
	:keymaps 'override

	;; Emacs --------
	;; "M-x" 'M-x
	"ß" 'evil-window-next ;; option-s
	"Í" 'other-frame ;; option-shift-s
	"C-S-B" 'consult-switch-buffer
	"∫" 'consult-switch-buffer ;; option-b

	;; Remapping normal help features to use Consult version
	"C-h v" 'describe-variable
	"C-h o" 'describe-symbol
	"C-h f" 'describe-function
	"C-h F" 'describe-face

	;; Editing ------
	"M-v" 'simpleclip-paste
	"M-V" 'evil-paste-after ;; shift-paste uses the internal clipboard
	"M-c" 'simpleclip-copy
	"M-u" 'capitalize-dwim ;; Default is upcase-dwim
	"M-U" 'upcase-dwim ;; M-S-u (switch upcase and capitalize)
	;;"M-z" 'undo-fu-only-undo				
	;;"M-S" 'undo-fu-only-redo

	;; Utility ------
	"C-c c" 'org-capture
	"C-;" 'embark-act
	"C-c a" 'org-agenda
	"C-s" 'consult-line ;; Large files will use grep (faster)
	"s-\"" 'ispell-word ;; that's super-shift-'
	;; "M-+" 'jib/calc-speaking-time
	"C-'" 'avy-goto-char-2

	"C-x C-b" 'bufler-list
	"C-M-x" 'ispell-complete-word

	;; super-number functions
	"s-1" 'mw-thesaurus-lookup-dwim
	"s-!" 'mw-thesaurus-lookup
	"s-2" 'ispell-buffer
	"s-3" 'revert-buffer
	;; "s-4" '(lambda () (interactive) (consult-file-jump nil jib/dropbox))
	;; "s-5" '(lambda () (interactive) (consult-rg nil jib/dropbox))
	"s-6" 'org-capture
	)

  (general-def
	:keymaps 'emacs
	"C-w C-q" 'kill-this-buffer
	)

  ;; Non-insert mode keymaps
  (general-def
	:states '(normal visual motion)
	"u" 'undo
	"|" '(lambda () (interactive) (org-agenda nil "k")) ;; Opens my n custom org-super-agenda view
	"C-|" '(lambda () (interactive) (org-agenda nil "j")) ;; Opens my m custom org-super-agenda view
	"gc" '(evilnc-comment-operator :which-key "commentator")
	"gD" '(xref-find-references :which-key "find references")
	)
  (general-def
	:prefix "["
	:states '(normal visual motion)
	"c" '(+evil/previous-comment :which-key "previous comment")
	"e" '(previous-error :which-key "previous error")
	"F" '(+evil/previous-frame :which-key "previous frame")
	"h" '(outline-previous-visible-heading :which-key "previous heading")
	"m" '(+evil/previous-beginning-of-method :which-key "previous method")
	"M" '(+evil/previous-end-of-method :which-key "previous end method")
	"o" '(+evil/insert-newline-below :which-key "insert newline below")
	)
  (general-def
	:prefix "]"
	:states '(normal visual motion)
	"c" '(+evil/next-comment :which-key "next comment")
	"e" '(next-error :which-key "next error")
	"F" '(+evil/next-frame :which-key "next frame")
	"h" '(outline-next-visible-heading :which-key "next heading")
	"m" '(+evil/next-beginning-of-method :which-key "next method")
	"M" '(+evil/next-end-of-method :which-key "next end method")
	"o" '(+evil/insert-newline-above :which-key "insert newline below")
	)
  (general-def
	:prefix "gs"
	:states '(normal visual motion)
	"s" '(evil-avy-goto-char-2 :which-key "avy char 2")
	"/" '(evil-avy-goto-char-timer :which-key "avy timer")
	"SPC" '(evil-avy-goto-char-timer :which-key "avy timer")
	)


  ;; Insert keymaps
  ;; Many of these are emulating standard Emacs bindings in Evil insert mode, such as C-a, or C-e.
  (general-def
	:states '(insert)
	"C-a" 'evil-beginning-of-visual-line
	"C-e" 'evil-end-of-visual-line
	"C-S-a" 'evil-beginning-of-line
	"C-S-e" 'evil-end-of-line
	"C-n" 'evil-next-visual-line
	"C-p" 'evil-previous-visual-line
	)


  (general-def
	:states 'normal
	:keymaps 'org-mode-map
	"t" 'org-todo
	;; "<return>" 'org-open-at-point-global
	"K" 'org-shiftup

	"J" 'org-shiftdown
	"TAB" 'org-cycle
	)

  (general-def
	:states 'insert
	:keymaps 'org-mode-map
	"C-o" 'evil-org-open-above)

  (general-def
	:states '(normal insert emacs)
	:keymaps 'org-mode-map
	"M-[" 'org-metaleft
	"M-]" 'org-metaright
	"C-M-=" 'ap/org-count-words
	"s-r" 'org-refile
	"M-k" 'org-insert-link
	)

  ;; Org-src - when editing an org source block
  (general-def
	:prefix ","
	:states 'normal
	:keymaps 'org-src-mode-map
	"b" '(nil :which-key "org src")
	"bc" 'org-edit-src-abort
	"bb" 'org-edit-src-exit
	)

  (general-define-key
   :prefix ","
   :states 'motion
   :keymaps '(org-mode-map) ;; Available in org mode, org agenda
   "" nil
   "A" '(org-archive-subtree-default :which-key "org-archive")
   "a" '(org-agenda :which-key "org agenda")
   "6" '(org-sort :which-key "sort")
   "c" '(org-capture :which-key "org-capture")
   "s" '(org-schedule :which-key "schedule")
   "d" '(org-deadline :which-key "deadline")
   "g" '(org-goto :which-key "goto heading")
   "t" '(a3madkour/add-scheduled-todo :which-key "add scheduled todo")
   "T" '(a3madkour/add-scheduled-headline-todo :which-key "add new datetree deadline todo")
   "p" '(org-set-property :which-key "set property")
   "e" '(org-export-dispatch :which-key "export org")
   "B" '(org-toggle-narrow-to-subtree :which-key "toggle narrow to subtree")
   "H" '(org-html-convert-region-to-html :which-key "convert region to html")
   "r" 'a3madkour/refile-and-schedule 

   "1" '(org-toggle-link-display :which-key "toggle link display")
   "2" '(org-toggle-inline-images :which-key "toggle images")

   ;; org-babel
   "b" '(nil :which-key "babel")
   "bt" '(org-babel-tangle :which-key "org-babel-tangle")
   "bb" '(org-edit-special :which-key "org-edit-special")
   "bc" '(org-edit-src-abort :which-key "org-edit-src-abort")
   "bk" '(org-babel-remove-result-one-or-many :which-key "org-babel-remove-result-one-or-many")

   ;; insert
   "i" '(nil :which-key "insert")

   "it" '(nil :which-key "tables")
   "itt" '(org-table-create :which-key "create table")
   "itl" '(org-table-insert-hline :which-key "table hline")

   "il" '(org-insert-link :which-key "org-insert-link")
   "ib" '(org-books-add-url :which-key "Book url")

   "is" '(nil :which-key "insert stamp")
   "iss" '((lambda () (interactive) (call-interactively (org-time-stamp-inactive))) :which-key "org-time-stamp-inactive")
   "isS" '((lambda () (interactive) (call-interactively (org-time-stamp nil))) :which-key "org-time-stamp")

   ;; clocking
   "c" '(nil :which-key "clocking")
   "ci" '(org-clock-in :which-key "clock in")
   "co" '(org-clock-out :which-key "clock out")
   "cj" '(org-clock-goto :which-key "jump to clock")
   )


  ;; Org-agenda
  (general-define-key
   :prefix ","
   :states 'motion
   :keymaps '(org-agenda-mode-map) ;; Available in org mode, org agenda
   "" nil
   "a" '(org-agenda :which-key "org agenda")
   "c" '(org-capture :which-key "org-capture")
   "s" '(org-agenda-schedule :which-key "schedule")
   "d" '(org-agenda-deadline :which-key "deadline")
   "t" '(org-agenda-set-tags :which-key "set tags")
   ;; clocking
   "c" '(nil :which-key "clocking")
   "ci" '(org-agenda-clock-in :which-key "clock in")
   "co" '(org-agenda-clock-out :which-key "clock out")
   "cj" '(org-clock-goto :which-key "jump to clock")
   )
  ;; Org-agenda
  (general-define-key
   :states 'motion
   :keymaps '(org-agenda-mode-map) ;; Available in org mode, org agenda
   "cp" '(org-pomodoro :which-key "Start or stop pomodoro")
   )

  (evil-define-key 'motion org-agenda-mode-map
	(kbd "f") 'org-agenda-later
	(kbd "b") 'org-agenda-earlier)

#+end_src
